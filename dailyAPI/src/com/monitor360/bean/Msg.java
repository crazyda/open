package com.monitor360.bean;
/**

 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-11-21")
public class Msg implements org.apache.thrift.TBase<Msg, Msg._Fields>, java.io.Serializable, Cloneable, Comparable<Msg> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Msg");

  private static final org.apache.thrift.protocol.TField R_BUF_FIELD_DESC = new org.apache.thrift.protocol.TField("r_buf", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LOG_BUF_FIELD_DESC = new org.apache.thrift.protocol.TField("log_buf", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MAC_FIELD_DESC = new org.apache.thrift.protocol.TField("mac", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DEVICE_BAGNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("device_bagname", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("device_id", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField STRIP_FIELD_DESC = new org.apache.thrift.protocol.TField("strip", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField USER_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("user_types", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField UPDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("update", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField M_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("m_type", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("num", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField OFF_FIELD_DESC = new org.apache.thrift.protocol.TField("off", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField PARTNER_FIELD_DESC = new org.apache.thrift.protocol.TField("partner", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField VS_FIELD_DESC = new org.apache.thrift.protocol.TField("vs", org.apache.thrift.protocol.TType.LIST, (short)17);
  private static final org.apache.thrift.protocol.TField MAC_BEGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("mac_begin", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField MAC_END_FIELD_DESC = new org.apache.thrift.protocol.TField("mac_end", org.apache.thrift.protocol.TType.STRING, (short)19);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MsgTupleSchemeFactory());
  }

  public String r_buf; // required
  public String log_buf; // required
  public String mac; // required
  public String user_name; // required
  public String device_bagname; // required
  public String device_id; // required
  public int page; // required
  public int strip; // required
  public int user_types; // required
  public int update; // required
  public String type; // required
  public String m_type; // required
  public int num; // required
  public int off; // required
  public String partner; // required
  public int state; // required
  public List<String> vs; // required
  public String mac_begin; // required
  public String mac_end; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    R_BUF((short)1, "r_buf"),
    LOG_BUF((short)2, "log_buf"),
    MAC((short)3, "mac"),
    USER_NAME((short)4, "user_name"),
    DEVICE_BAGNAME((short)5, "device_bagname"),
    DEVICE_ID((short)6, "device_id"),
    PAGE((short)7, "page"),
    STRIP((short)8, "strip"),
    USER_TYPES((short)9, "user_types"),
    UPDATE((short)10, "update"),
    TYPE((short)11, "type"),
    M_TYPE((short)12, "m_type"),
    NUM((short)13, "num"),
    OFF((short)14, "off"),
    PARTNER((short)15, "partner"),
    STATE((short)16, "state"),
    VS((short)17, "vs"),
    MAC_BEGIN((short)18, "mac_begin"),
    MAC_END((short)19, "mac_end");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // R_BUF
          return R_BUF;
        case 2: // LOG_BUF
          return LOG_BUF;
        case 3: // MAC
          return MAC;
        case 4: // USER_NAME
          return USER_NAME;
        case 5: // DEVICE_BAGNAME
          return DEVICE_BAGNAME;
        case 6: // DEVICE_ID
          return DEVICE_ID;
        case 7: // PAGE
          return PAGE;
        case 8: // STRIP
          return STRIP;
        case 9: // USER_TYPES
          return USER_TYPES;
        case 10: // UPDATE
          return UPDATE;
        case 11: // TYPE
          return TYPE;
        case 12: // M_TYPE
          return M_TYPE;
        case 13: // NUM
          return NUM;
        case 14: // OFF
          return OFF;
        case 15: // PARTNER
          return PARTNER;
        case 16: // STATE
          return STATE;
        case 17: // VS
          return VS;
        case 18: // MAC_BEGIN
          return MAC_BEGIN;
        case 19: // MAC_END
          return MAC_END;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PAGE_ISSET_ID = 0;
  private static final int __STRIP_ISSET_ID = 1;
  private static final int __USER_TYPES_ISSET_ID = 2;
  private static final int __UPDATE_ISSET_ID = 3;
  private static final int __NUM_ISSET_ID = 4;
  private static final int __OFF_ISSET_ID = 5;
  private static final int __STATE_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.R_BUF, new org.apache.thrift.meta_data.FieldMetaData("r_buf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOG_BUF, new org.apache.thrift.meta_data.FieldMetaData("log_buf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAC, new org.apache.thrift.meta_data.FieldMetaData("mac", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVICE_BAGNAME, new org.apache.thrift.meta_data.FieldMetaData("device_bagname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("device_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STRIP, new org.apache.thrift.meta_data.FieldMetaData("strip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_TYPES, new org.apache.thrift.meta_data.FieldMetaData("user_types", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE, new org.apache.thrift.meta_data.FieldMetaData("update", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.M_TYPE, new org.apache.thrift.meta_data.FieldMetaData("m_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUM, new org.apache.thrift.meta_data.FieldMetaData("num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OFF, new org.apache.thrift.meta_data.FieldMetaData("off", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARTNER, new org.apache.thrift.meta_data.FieldMetaData("partner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VS, new org.apache.thrift.meta_data.FieldMetaData("vs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.MAC_BEGIN, new org.apache.thrift.meta_data.FieldMetaData("mac_begin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAC_END, new org.apache.thrift.meta_data.FieldMetaData("mac_end", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Msg.class, metaDataMap);
  }

  public Msg() {
  }

  public Msg(
    String r_buf,
    String log_buf,
    String mac,
    String user_name,
    String device_bagname,
    String device_id,
    int page,
    int strip,
    int user_types,
    int update,
    String type,
    String m_type,
    int num,
    int off,
    String partner,
    int state,
    List<String> vs,
    String mac_begin,
    String mac_end)
  {
    this();
    this.r_buf = r_buf;
    this.log_buf = log_buf;
    this.mac = mac;
    this.user_name = user_name;
    this.device_bagname = device_bagname;
    this.device_id = device_id;
    this.page = page;
    setPageIsSet(true);
    this.strip = strip;
    setStripIsSet(true);
    this.user_types = user_types;
    setUser_typesIsSet(true);
    this.update = update;
    setUpdateIsSet(true);
    this.type = type;
    this.m_type = m_type;
    this.num = num;
    setNumIsSet(true);
    this.off = off;
    setOffIsSet(true);
    this.partner = partner;
    this.state = state;
    setStateIsSet(true);
    this.vs = vs;
    this.mac_begin = mac_begin;
    this.mac_end = mac_end;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Msg(Msg other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetR_buf()) {
      this.r_buf = other.r_buf;
    }
    if (other.isSetLog_buf()) {
      this.log_buf = other.log_buf;
    }
    if (other.isSetMac()) {
      this.mac = other.mac;
    }
    if (other.isSetUser_name()) {
      this.user_name = other.user_name;
    }
    if (other.isSetDevice_bagname()) {
      this.device_bagname = other.device_bagname;
    }
    if (other.isSetDevice_id()) {
      this.device_id = other.device_id;
    }
    this.page = other.page;
    this.strip = other.strip;
    this.user_types = other.user_types;
    this.update = other.update;
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetM_type()) {
      this.m_type = other.m_type;
    }
    this.num = other.num;
    this.off = other.off;
    if (other.isSetPartner()) {
      this.partner = other.partner;
    }
    this.state = other.state;
    if (other.isSetVs()) {
      List<String> __this__vs = new ArrayList<String>(other.vs);
      this.vs = __this__vs;
    }
    if (other.isSetMac_begin()) {
      this.mac_begin = other.mac_begin;
    }
    if (other.isSetMac_end()) {
      this.mac_end = other.mac_end;
    }
  }

  public Msg deepCopy() {
    return new Msg(this);
  }

  @Override
  public void clear() {
    this.r_buf = null;
    this.log_buf = null;
    this.mac = null;
    this.user_name = null;
    this.device_bagname = null;
    this.device_id = null;
    setPageIsSet(false);
    this.page = 0;
    setStripIsSet(false);
    this.strip = 0;
    setUser_typesIsSet(false);
    this.user_types = 0;
    setUpdateIsSet(false);
    this.update = 0;
    this.type = null;
    this.m_type = null;
    setNumIsSet(false);
    this.num = 0;
    setOffIsSet(false);
    this.off = 0;
    this.partner = null;
    setStateIsSet(false);
    this.state = 0;
    this.vs = null;
    this.mac_begin = null;
    this.mac_end = null;
  }

  public String getR_buf() {
    return this.r_buf;
  }

  public Msg setR_buf(String r_buf) {
    this.r_buf = r_buf;
    return this;
  }

  public void unsetR_buf() {
    this.r_buf = null;
  }

  /** Returns true if field r_buf is set (has been assigned a value) and false otherwise */
  public boolean isSetR_buf() {
    return this.r_buf != null;
  }

  public void setR_bufIsSet(boolean value) {
    if (!value) {
      this.r_buf = null;
    }
  }

  public String getLog_buf() {
    return this.log_buf;
  }

  public Msg setLog_buf(String log_buf) {
    this.log_buf = log_buf;
    return this;
  }

  public void unsetLog_buf() {
    this.log_buf = null;
  }

  /** Returns true if field log_buf is set (has been assigned a value) and false otherwise */
  public boolean isSetLog_buf() {
    return this.log_buf != null;
  }

  public void setLog_bufIsSet(boolean value) {
    if (!value) {
      this.log_buf = null;
    }
  }

  public String getMac() {
    return this.mac;
  }

  public Msg setMac(String mac) {
    this.mac = mac;
    return this;
  }

  public void unsetMac() {
    this.mac = null;
  }

  /** Returns true if field mac is set (has been assigned a value) and false otherwise */
  public boolean isSetMac() {
    return this.mac != null;
  }

  public void setMacIsSet(boolean value) {
    if (!value) {
      this.mac = null;
    }
  }

  public String getUser_name() {
    return this.user_name;
  }

  public Msg setUser_name(String user_name) {
    this.user_name = user_name;
    return this;
  }

  public void unsetUser_name() {
    this.user_name = null;
  }

  /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
  public boolean isSetUser_name() {
    return this.user_name != null;
  }

  public void setUser_nameIsSet(boolean value) {
    if (!value) {
      this.user_name = null;
    }
  }

  public String getDevice_bagname() {
    return this.device_bagname;
  }

  public Msg setDevice_bagname(String device_bagname) {
    this.device_bagname = device_bagname;
    return this;
  }

  public void unsetDevice_bagname() {
    this.device_bagname = null;
  }

  /** Returns true if field device_bagname is set (has been assigned a value) and false otherwise */
  public boolean isSetDevice_bagname() {
    return this.device_bagname != null;
  }

  public void setDevice_bagnameIsSet(boolean value) {
    if (!value) {
      this.device_bagname = null;
    }
  }

  public String getDevice_id() {
    return this.device_id;
  }

  public Msg setDevice_id(String device_id) {
    this.device_id = device_id;
    return this;
  }

  public void unsetDevice_id() {
    this.device_id = null;
  }

  /** Returns true if field device_id is set (has been assigned a value) and false otherwise */
  public boolean isSetDevice_id() {
    return this.device_id != null;
  }

  public void setDevice_idIsSet(boolean value) {
    if (!value) {
      this.device_id = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public Msg setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getStrip() {
    return this.strip;
  }

  public Msg setStrip(int strip) {
    this.strip = strip;
    setStripIsSet(true);
    return this;
  }

  public void unsetStrip() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRIP_ISSET_ID);
  }

  /** Returns true if field strip is set (has been assigned a value) and false otherwise */
  public boolean isSetStrip() {
    return EncodingUtils.testBit(__isset_bitfield, __STRIP_ISSET_ID);
  }

  public void setStripIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRIP_ISSET_ID, value);
  }

  public int getUser_types() {
    return this.user_types;
  }

  public Msg setUser_types(int user_types) {
    this.user_types = user_types;
    setUser_typesIsSet(true);
    return this;
  }

  public void unsetUser_types() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USER_TYPES_ISSET_ID);
  }

  /** Returns true if field user_types is set (has been assigned a value) and false otherwise */
  public boolean isSetUser_types() {
    return EncodingUtils.testBit(__isset_bitfield, __USER_TYPES_ISSET_ID);
  }

  public void setUser_typesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USER_TYPES_ISSET_ID, value);
  }

  public int getUpdate() {
    return this.update;
  }

  public Msg setUpdate(int update) {
    this.update = update;
    setUpdateIsSet(true);
    return this;
  }

  public void unsetUpdate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATE_ISSET_ID);
  }

  /** Returns true if field update is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdate() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATE_ISSET_ID);
  }

  public void setUpdateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATE_ISSET_ID, value);
  }

  public String getType() {
    return this.type;
  }

  public Msg setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getM_type() {
    return this.m_type;
  }

  public Msg setM_type(String m_type) {
    this.m_type = m_type;
    return this;
  }

  public void unsetM_type() {
    this.m_type = null;
  }

  /** Returns true if field m_type is set (has been assigned a value) and false otherwise */
  public boolean isSetM_type() {
    return this.m_type != null;
  }

  public void setM_typeIsSet(boolean value) {
    if (!value) {
      this.m_type = null;
    }
  }

  public int getNum() {
    return this.num;
  }

  public Msg setNum(int num) {
    this.num = num;
    setNumIsSet(true);
    return this;
  }

  public void unsetNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_ISSET_ID);
  }

  /** Returns true if field num is set (has been assigned a value) and false otherwise */
  public boolean isSetNum() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_ISSET_ID);
  }

  public void setNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_ISSET_ID, value);
  }

  public int getOff() {
    return this.off;
  }

  public Msg setOff(int off) {
    this.off = off;
    setOffIsSet(true);
    return this;
  }

  public void unsetOff() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFF_ISSET_ID);
  }

  /** Returns true if field off is set (has been assigned a value) and false otherwise */
  public boolean isSetOff() {
    return EncodingUtils.testBit(__isset_bitfield, __OFF_ISSET_ID);
  }

  public void setOffIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFF_ISSET_ID, value);
  }

  public String getPartner() {
    return this.partner;
  }

  public Msg setPartner(String partner) {
    this.partner = partner;
    return this;
  }

  public void unsetPartner() {
    this.partner = null;
  }

  /** Returns true if field partner is set (has been assigned a value) and false otherwise */
  public boolean isSetPartner() {
    return this.partner != null;
  }

  public void setPartnerIsSet(boolean value) {
    if (!value) {
      this.partner = null;
    }
  }

  public int getState() {
    return this.state;
  }

  public Msg setState(int state) {
    this.state = state;
    setStateIsSet(true);
    return this;
  }

  public void unsetState() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  public void setStateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
  }

  public int getVsSize() {
    return (this.vs == null) ? 0 : this.vs.size();
  }

  public java.util.Iterator<String> getVsIterator() {
    return (this.vs == null) ? null : this.vs.iterator();
  }

  public void addToVs(String elem) {
    if (this.vs == null) {
      this.vs = new ArrayList<String>();
    }
    this.vs.add(elem);
  }

  public List<String> getVs() {
    return this.vs;
  }

  public Msg setVs(List<String> vs) {
    this.vs = vs;
    return this;
  }

  public void unsetVs() {
    this.vs = null;
  }

  /** Returns true if field vs is set (has been assigned a value) and false otherwise */
  public boolean isSetVs() {
    return this.vs != null;
  }

  public void setVsIsSet(boolean value) {
    if (!value) {
      this.vs = null;
    }
  }

  public String getMac_begin() {
    return this.mac_begin;
  }

  public Msg setMac_begin(String mac_begin) {
    this.mac_begin = mac_begin;
    return this;
  }

  public void unsetMac_begin() {
    this.mac_begin = null;
  }

  /** Returns true if field mac_begin is set (has been assigned a value) and false otherwise */
  public boolean isSetMac_begin() {
    return this.mac_begin != null;
  }

  public void setMac_beginIsSet(boolean value) {
    if (!value) {
      this.mac_begin = null;
    }
  }

  public String getMac_end() {
    return this.mac_end;
  }

  public Msg setMac_end(String mac_end) {
    this.mac_end = mac_end;
    return this;
  }

  public void unsetMac_end() {
    this.mac_end = null;
  }

  /** Returns true if field mac_end is set (has been assigned a value) and false otherwise */
  public boolean isSetMac_end() {
    return this.mac_end != null;
  }

  public void setMac_endIsSet(boolean value) {
    if (!value) {
      this.mac_end = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case R_BUF:
      if (value == null) {
        unsetR_buf();
      } else {
        setR_buf((String)value);
      }
      break;

    case LOG_BUF:
      if (value == null) {
        unsetLog_buf();
      } else {
        setLog_buf((String)value);
      }
      break;

    case MAC:
      if (value == null) {
        unsetMac();
      } else {
        setMac((String)value);
      }
      break;

    case USER_NAME:
      if (value == null) {
        unsetUser_name();
      } else {
        setUser_name((String)value);
      }
      break;

    case DEVICE_BAGNAME:
      if (value == null) {
        unsetDevice_bagname();
      } else {
        setDevice_bagname((String)value);
      }
      break;

    case DEVICE_ID:
      if (value == null) {
        unsetDevice_id();
      } else {
        setDevice_id((String)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case STRIP:
      if (value == null) {
        unsetStrip();
      } else {
        setStrip((Integer)value);
      }
      break;

    case USER_TYPES:
      if (value == null) {
        unsetUser_types();
      } else {
        setUser_types((Integer)value);
      }
      break;

    case UPDATE:
      if (value == null) {
        unsetUpdate();
      } else {
        setUpdate((Integer)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case M_TYPE:
      if (value == null) {
        unsetM_type();
      } else {
        setM_type((String)value);
      }
      break;

    case NUM:
      if (value == null) {
        unsetNum();
      } else {
        setNum((Integer)value);
      }
      break;

    case OFF:
      if (value == null) {
        unsetOff();
      } else {
        setOff((Integer)value);
      }
      break;

    case PARTNER:
      if (value == null) {
        unsetPartner();
      } else {
        setPartner((String)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((Integer)value);
      }
      break;

    case VS:
      if (value == null) {
        unsetVs();
      } else {
        setVs((List<String>)value);
      }
      break;

    case MAC_BEGIN:
      if (value == null) {
        unsetMac_begin();
      } else {
        setMac_begin((String)value);
      }
      break;

    case MAC_END:
      if (value == null) {
        unsetMac_end();
      } else {
        setMac_end((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case R_BUF:
      return getR_buf();

    case LOG_BUF:
      return getLog_buf();

    case MAC:
      return getMac();

    case USER_NAME:
      return getUser_name();

    case DEVICE_BAGNAME:
      return getDevice_bagname();

    case DEVICE_ID:
      return getDevice_id();

    case PAGE:
      return Integer.valueOf(getPage());

    case STRIP:
      return Integer.valueOf(getStrip());

    case USER_TYPES:
      return Integer.valueOf(getUser_types());

    case UPDATE:
      return Integer.valueOf(getUpdate());

    case TYPE:
      return getType();

    case M_TYPE:
      return getM_type();

    case NUM:
      return Integer.valueOf(getNum());

    case OFF:
      return Integer.valueOf(getOff());

    case PARTNER:
      return getPartner();

    case STATE:
      return Integer.valueOf(getState());

    case VS:
      return getVs();

    case MAC_BEGIN:
      return getMac_begin();

    case MAC_END:
      return getMac_end();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case R_BUF:
      return isSetR_buf();
    case LOG_BUF:
      return isSetLog_buf();
    case MAC:
      return isSetMac();
    case USER_NAME:
      return isSetUser_name();
    case DEVICE_BAGNAME:
      return isSetDevice_bagname();
    case DEVICE_ID:
      return isSetDevice_id();
    case PAGE:
      return isSetPage();
    case STRIP:
      return isSetStrip();
    case USER_TYPES:
      return isSetUser_types();
    case UPDATE:
      return isSetUpdate();
    case TYPE:
      return isSetType();
    case M_TYPE:
      return isSetM_type();
    case NUM:
      return isSetNum();
    case OFF:
      return isSetOff();
    case PARTNER:
      return isSetPartner();
    case STATE:
      return isSetState();
    case VS:
      return isSetVs();
    case MAC_BEGIN:
      return isSetMac_begin();
    case MAC_END:
      return isSetMac_end();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Msg)
      return this.equals((Msg)that);
    return false;
  }

  public boolean equals(Msg that) {
    if (that == null)
      return false;

    boolean this_present_r_buf = true && this.isSetR_buf();
    boolean that_present_r_buf = true && that.isSetR_buf();
    if (this_present_r_buf || that_present_r_buf) {
      if (!(this_present_r_buf && that_present_r_buf))
        return false;
      if (!this.r_buf.equals(that.r_buf))
        return false;
    }

    boolean this_present_log_buf = true && this.isSetLog_buf();
    boolean that_present_log_buf = true && that.isSetLog_buf();
    if (this_present_log_buf || that_present_log_buf) {
      if (!(this_present_log_buf && that_present_log_buf))
        return false;
      if (!this.log_buf.equals(that.log_buf))
        return false;
    }

    boolean this_present_mac = true && this.isSetMac();
    boolean that_present_mac = true && that.isSetMac();
    if (this_present_mac || that_present_mac) {
      if (!(this_present_mac && that_present_mac))
        return false;
      if (!this.mac.equals(that.mac))
        return false;
    }

    boolean this_present_user_name = true && this.isSetUser_name();
    boolean that_present_user_name = true && that.isSetUser_name();
    if (this_present_user_name || that_present_user_name) {
      if (!(this_present_user_name && that_present_user_name))
        return false;
      if (!this.user_name.equals(that.user_name))
        return false;
    }

    boolean this_present_device_bagname = true && this.isSetDevice_bagname();
    boolean that_present_device_bagname = true && that.isSetDevice_bagname();
    if (this_present_device_bagname || that_present_device_bagname) {
      if (!(this_present_device_bagname && that_present_device_bagname))
        return false;
      if (!this.device_bagname.equals(that.device_bagname))
        return false;
    }

    boolean this_present_device_id = true && this.isSetDevice_id();
    boolean that_present_device_id = true && that.isSetDevice_id();
    if (this_present_device_id || that_present_device_id) {
      if (!(this_present_device_id && that_present_device_id))
        return false;
      if (!this.device_id.equals(that.device_id))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_strip = true;
    boolean that_present_strip = true;
    if (this_present_strip || that_present_strip) {
      if (!(this_present_strip && that_present_strip))
        return false;
      if (this.strip != that.strip)
        return false;
    }

    boolean this_present_user_types = true;
    boolean that_present_user_types = true;
    if (this_present_user_types || that_present_user_types) {
      if (!(this_present_user_types && that_present_user_types))
        return false;
      if (this.user_types != that.user_types)
        return false;
    }

    boolean this_present_update = true;
    boolean that_present_update = true;
    if (this_present_update || that_present_update) {
      if (!(this_present_update && that_present_update))
        return false;
      if (this.update != that.update)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_m_type = true && this.isSetM_type();
    boolean that_present_m_type = true && that.isSetM_type();
    if (this_present_m_type || that_present_m_type) {
      if (!(this_present_m_type && that_present_m_type))
        return false;
      if (!this.m_type.equals(that.m_type))
        return false;
    }

    boolean this_present_num = true;
    boolean that_present_num = true;
    if (this_present_num || that_present_num) {
      if (!(this_present_num && that_present_num))
        return false;
      if (this.num != that.num)
        return false;
    }

    boolean this_present_off = true;
    boolean that_present_off = true;
    if (this_present_off || that_present_off) {
      if (!(this_present_off && that_present_off))
        return false;
      if (this.off != that.off)
        return false;
    }

    boolean this_present_partner = true && this.isSetPartner();
    boolean that_present_partner = true && that.isSetPartner();
    if (this_present_partner || that_present_partner) {
      if (!(this_present_partner && that_present_partner))
        return false;
      if (!this.partner.equals(that.partner))
        return false;
    }

    boolean this_present_state = true;
    boolean that_present_state = true;
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (this.state != that.state)
        return false;
    }

    boolean this_present_vs = true && this.isSetVs();
    boolean that_present_vs = true && that.isSetVs();
    if (this_present_vs || that_present_vs) {
      if (!(this_present_vs && that_present_vs))
        return false;
      if (!this.vs.equals(that.vs))
        return false;
    }

    boolean this_present_mac_begin = true && this.isSetMac_begin();
    boolean that_present_mac_begin = true && that.isSetMac_begin();
    if (this_present_mac_begin || that_present_mac_begin) {
      if (!(this_present_mac_begin && that_present_mac_begin))
        return false;
      if (!this.mac_begin.equals(that.mac_begin))
        return false;
    }

    boolean this_present_mac_end = true && this.isSetMac_end();
    boolean that_present_mac_end = true && that.isSetMac_end();
    if (this_present_mac_end || that_present_mac_end) {
      if (!(this_present_mac_end && that_present_mac_end))
        return false;
      if (!this.mac_end.equals(that.mac_end))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_r_buf = true && (isSetR_buf());
    list.add(present_r_buf);
    if (present_r_buf)
      list.add(r_buf);

    boolean present_log_buf = true && (isSetLog_buf());
    list.add(present_log_buf);
    if (present_log_buf)
      list.add(log_buf);

    boolean present_mac = true && (isSetMac());
    list.add(present_mac);
    if (present_mac)
      list.add(mac);

    boolean present_user_name = true && (isSetUser_name());
    list.add(present_user_name);
    if (present_user_name)
      list.add(user_name);

    boolean present_device_bagname = true && (isSetDevice_bagname());
    list.add(present_device_bagname);
    if (present_device_bagname)
      list.add(device_bagname);

    boolean present_device_id = true && (isSetDevice_id());
    list.add(present_device_id);
    if (present_device_id)
      list.add(device_id);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_strip = true;
    list.add(present_strip);
    if (present_strip)
      list.add(strip);

    boolean present_user_types = true;
    list.add(present_user_types);
    if (present_user_types)
      list.add(user_types);

    boolean present_update = true;
    list.add(present_update);
    if (present_update)
      list.add(update);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_m_type = true && (isSetM_type());
    list.add(present_m_type);
    if (present_m_type)
      list.add(m_type);

    boolean present_num = true;
    list.add(present_num);
    if (present_num)
      list.add(num);

    boolean present_off = true;
    list.add(present_off);
    if (present_off)
      list.add(off);

    boolean present_partner = true && (isSetPartner());
    list.add(present_partner);
    if (present_partner)
      list.add(partner);

    boolean present_state = true;
    list.add(present_state);
    if (present_state)
      list.add(state);

    boolean present_vs = true && (isSetVs());
    list.add(present_vs);
    if (present_vs)
      list.add(vs);

    boolean present_mac_begin = true && (isSetMac_begin());
    list.add(present_mac_begin);
    if (present_mac_begin)
      list.add(mac_begin);

    boolean present_mac_end = true && (isSetMac_end());
    list.add(present_mac_end);
    if (present_mac_end)
      list.add(mac_end);

    return list.hashCode();
  }

  @Override
  public int compareTo(Msg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetR_buf()).compareTo(other.isSetR_buf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetR_buf()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.r_buf, other.r_buf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLog_buf()).compareTo(other.isSetLog_buf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLog_buf()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.log_buf, other.log_buf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMac()).compareTo(other.isSetMac());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMac()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mac, other.mac);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(other.isSetUser_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, other.user_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDevice_bagname()).compareTo(other.isSetDevice_bagname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDevice_bagname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device_bagname, other.device_bagname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDevice_id()).compareTo(other.isSetDevice_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDevice_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device_id, other.device_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStrip()).compareTo(other.isSetStrip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strip, other.strip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser_types()).compareTo(other.isSetUser_types());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser_types()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_types, other.user_types);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdate()).compareTo(other.isSetUpdate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.update, other.update);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetM_type()).compareTo(other.isSetM_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetM_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.m_type, other.m_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum()).compareTo(other.isSetNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num, other.num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOff()).compareTo(other.isSetOff());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOff()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.off, other.off);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartner()).compareTo(other.isSetPartner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partner, other.partner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVs()).compareTo(other.isSetVs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vs, other.vs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMac_begin()).compareTo(other.isSetMac_begin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMac_begin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mac_begin, other.mac_begin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMac_end()).compareTo(other.isSetMac_end());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMac_end()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mac_end, other.mac_end);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Msg(");
    boolean first = true;

    sb.append("r_buf:");
    if (this.r_buf == null) {
      sb.append("null");
    } else {
      sb.append(this.r_buf);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("log_buf:");
    if (this.log_buf == null) {
      sb.append("null");
    } else {
      sb.append(this.log_buf);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mac:");
    if (this.mac == null) {
      sb.append("null");
    } else {
      sb.append(this.mac);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("user_name:");
    if (this.user_name == null) {
      sb.append("null");
    } else {
      sb.append(this.user_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("device_bagname:");
    if (this.device_bagname == null) {
      sb.append("null");
    } else {
      sb.append(this.device_bagname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("device_id:");
    if (this.device_id == null) {
      sb.append("null");
    } else {
      sb.append(this.device_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("strip:");
    sb.append(this.strip);
    first = false;
    if (!first) sb.append(", ");
    sb.append("user_types:");
    sb.append(this.user_types);
    first = false;
    if (!first) sb.append(", ");
    sb.append("update:");
    sb.append(this.update);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("m_type:");
    if (this.m_type == null) {
      sb.append("null");
    } else {
      sb.append(this.m_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("num:");
    sb.append(this.num);
    first = false;
    if (!first) sb.append(", ");
    sb.append("off:");
    sb.append(this.off);
    first = false;
    if (!first) sb.append(", ");
    sb.append("partner:");
    if (this.partner == null) {
      sb.append("null");
    } else {
      sb.append(this.partner);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    sb.append(this.state);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vs:");
    if (this.vs == null) {
      sb.append("null");
    } else {
      sb.append(this.vs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mac_begin:");
    if (this.mac_begin == null) {
      sb.append("null");
    } else {
      sb.append(this.mac_begin);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mac_end:");
    if (this.mac_end == null) {
      sb.append("null");
    } else {
      sb.append(this.mac_end);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MsgStandardSchemeFactory implements SchemeFactory {
    public MsgStandardScheme getScheme() {
      return new MsgStandardScheme();
    }
  }

  private static class MsgStandardScheme extends StandardScheme<Msg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Msg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // R_BUF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.r_buf = iprot.readString();
              struct.setR_bufIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOG_BUF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.log_buf = iprot.readString();
              struct.setLog_bufIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MAC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mac = iprot.readString();
              struct.setMacIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user_name = iprot.readString();
              struct.setUser_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DEVICE_BAGNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.device_bagname = iprot.readString();
              struct.setDevice_bagnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DEVICE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.device_id = iprot.readString();
              struct.setDevice_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STRIP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.strip = iprot.readI32();
              struct.setStripIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // USER_TYPES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.user_types = iprot.readI32();
              struct.setUser_typesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // UPDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.update = iprot.readI32();
              struct.setUpdateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // M_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.m_type = iprot.readString();
              struct.setM_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num = iprot.readI32();
              struct.setNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // OFF
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.off = iprot.readI32();
              struct.setOffIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PARTNER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partner = iprot.readString();
              struct.setPartnerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.state = iprot.readI32();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // VS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.vs = new ArrayList<String>(_list8.size);
                String _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = iprot.readString();
                  struct.vs.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setVsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // MAC_BEGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mac_begin = iprot.readString();
              struct.setMac_beginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // MAC_END
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mac_end = iprot.readString();
              struct.setMac_endIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Msg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.r_buf != null) {
        oprot.writeFieldBegin(R_BUF_FIELD_DESC);
        oprot.writeString(struct.r_buf);
        oprot.writeFieldEnd();
      }
      if (struct.log_buf != null) {
        oprot.writeFieldBegin(LOG_BUF_FIELD_DESC);
        oprot.writeString(struct.log_buf);
        oprot.writeFieldEnd();
      }
      if (struct.mac != null) {
        oprot.writeFieldBegin(MAC_FIELD_DESC);
        oprot.writeString(struct.mac);
        oprot.writeFieldEnd();
      }
      if (struct.user_name != null) {
        oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
        oprot.writeString(struct.user_name);
        oprot.writeFieldEnd();
      }
      if (struct.device_bagname != null) {
        oprot.writeFieldBegin(DEVICE_BAGNAME_FIELD_DESC);
        oprot.writeString(struct.device_bagname);
        oprot.writeFieldEnd();
      }
      if (struct.device_id != null) {
        oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
        oprot.writeString(struct.device_id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STRIP_FIELD_DESC);
      oprot.writeI32(struct.strip);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_TYPES_FIELD_DESC);
      oprot.writeI32(struct.user_types);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_FIELD_DESC);
      oprot.writeI32(struct.update);
      oprot.writeFieldEnd();
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.m_type != null) {
        oprot.writeFieldBegin(M_TYPE_FIELD_DESC);
        oprot.writeString(struct.m_type);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NUM_FIELD_DESC);
      oprot.writeI32(struct.num);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OFF_FIELD_DESC);
      oprot.writeI32(struct.off);
      oprot.writeFieldEnd();
      if (struct.partner != null) {
        oprot.writeFieldBegin(PARTNER_FIELD_DESC);
        oprot.writeString(struct.partner);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATE_FIELD_DESC);
      oprot.writeI32(struct.state);
      oprot.writeFieldEnd();
      if (struct.vs != null) {
        oprot.writeFieldBegin(VS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.vs.size()));
          for (String _iter11 : struct.vs)
          {
            oprot.writeString(_iter11);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.mac_begin != null) {
        oprot.writeFieldBegin(MAC_BEGIN_FIELD_DESC);
        oprot.writeString(struct.mac_begin);
        oprot.writeFieldEnd();
      }
      if (struct.mac_end != null) {
        oprot.writeFieldBegin(MAC_END_FIELD_DESC);
        oprot.writeString(struct.mac_end);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MsgTupleSchemeFactory implements SchemeFactory {
    public MsgTupleScheme getScheme() {
      return new MsgTupleScheme();
    }
  }

  private static class MsgTupleScheme extends TupleScheme<Msg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Msg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetR_buf()) {
        optionals.set(0);
      }
      if (struct.isSetLog_buf()) {
        optionals.set(1);
      }
      if (struct.isSetMac()) {
        optionals.set(2);
      }
      if (struct.isSetUser_name()) {
        optionals.set(3);
      }
      if (struct.isSetDevice_bagname()) {
        optionals.set(4);
      }
      if (struct.isSetDevice_id()) {
        optionals.set(5);
      }
      if (struct.isSetPage()) {
        optionals.set(6);
      }
      if (struct.isSetStrip()) {
        optionals.set(7);
      }
      if (struct.isSetUser_types()) {
        optionals.set(8);
      }
      if (struct.isSetUpdate()) {
        optionals.set(9);
      }
      if (struct.isSetType()) {
        optionals.set(10);
      }
      if (struct.isSetM_type()) {
        optionals.set(11);
      }
      if (struct.isSetNum()) {
        optionals.set(12);
      }
      if (struct.isSetOff()) {
        optionals.set(13);
      }
      if (struct.isSetPartner()) {
        optionals.set(14);
      }
      if (struct.isSetState()) {
        optionals.set(15);
      }
      if (struct.isSetVs()) {
        optionals.set(16);
      }
      if (struct.isSetMac_begin()) {
        optionals.set(17);
      }
      if (struct.isSetMac_end()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetR_buf()) {
        oprot.writeString(struct.r_buf);
      }
      if (struct.isSetLog_buf()) {
        oprot.writeString(struct.log_buf);
      }
      if (struct.isSetMac()) {
        oprot.writeString(struct.mac);
      }
      if (struct.isSetUser_name()) {
        oprot.writeString(struct.user_name);
      }
      if (struct.isSetDevice_bagname()) {
        oprot.writeString(struct.device_bagname);
      }
      if (struct.isSetDevice_id()) {
        oprot.writeString(struct.device_id);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetStrip()) {
        oprot.writeI32(struct.strip);
      }
      if (struct.isSetUser_types()) {
        oprot.writeI32(struct.user_types);
      }
      if (struct.isSetUpdate()) {
        oprot.writeI32(struct.update);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetM_type()) {
        oprot.writeString(struct.m_type);
      }
      if (struct.isSetNum()) {
        oprot.writeI32(struct.num);
      }
      if (struct.isSetOff()) {
        oprot.writeI32(struct.off);
      }
      if (struct.isSetPartner()) {
        oprot.writeString(struct.partner);
      }
      if (struct.isSetState()) {
        oprot.writeI32(struct.state);
      }
      if (struct.isSetVs()) {
        {
          oprot.writeI32(struct.vs.size());
          for (String _iter12 : struct.vs)
          {
            oprot.writeString(_iter12);
          }
        }
      }
      if (struct.isSetMac_begin()) {
        oprot.writeString(struct.mac_begin);
      }
      if (struct.isSetMac_end()) {
        oprot.writeString(struct.mac_end);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Msg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.r_buf = iprot.readString();
        struct.setR_bufIsSet(true);
      }
      if (incoming.get(1)) {
        struct.log_buf = iprot.readString();
        struct.setLog_bufIsSet(true);
      }
      if (incoming.get(2)) {
        struct.mac = iprot.readString();
        struct.setMacIsSet(true);
      }
      if (incoming.get(3)) {
        struct.user_name = iprot.readString();
        struct.setUser_nameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.device_bagname = iprot.readString();
        struct.setDevice_bagnameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.device_id = iprot.readString();
        struct.setDevice_idIsSet(true);
      }
      if (incoming.get(6)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(7)) {
        struct.strip = iprot.readI32();
        struct.setStripIsSet(true);
      }
      if (incoming.get(8)) {
        struct.user_types = iprot.readI32();
        struct.setUser_typesIsSet(true);
      }
      if (incoming.get(9)) {
        struct.update = iprot.readI32();
        struct.setUpdateIsSet(true);
      }
      if (incoming.get(10)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.m_type = iprot.readString();
        struct.setM_typeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.num = iprot.readI32();
        struct.setNumIsSet(true);
      }
      if (incoming.get(13)) {
        struct.off = iprot.readI32();
        struct.setOffIsSet(true);
      }
      if (incoming.get(14)) {
        struct.partner = iprot.readString();
        struct.setPartnerIsSet(true);
      }
      if (incoming.get(15)) {
        struct.state = iprot.readI32();
        struct.setStateIsSet(true);
      }
      if (incoming.get(16)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.vs = new ArrayList<String>(_list13.size);
          String _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = iprot.readString();
            struct.vs.add(_elem14);
          }
        }
        struct.setVsIsSet(true);
      }
      if (incoming.get(17)) {
        struct.mac_begin = iprot.readString();
        struct.setMac_beginIsSet(true);
      }
      if (incoming.get(18)) {
        struct.mac_end = iprot.readString();
        struct.setMac_endIsSet(true);
      }
    }
  }

}

