package com.monitor360.bean;
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-11-21")
public class TTGService {

  public interface Iface {

    public Response getStudentInfo(Request request) throws org.apache.thrift.TException;

    public int device_reset_certificate(String mac) throws org.apache.thrift.TException;

    public int add_test_account(String user_name) throws org.apache.thrift.TException;

    public int delete_test_account(String user_name) throws org.apache.thrift.TException;

    public String select_condition_account(String user_name) throws org.apache.thrift.TException;

    public String select_paging_account(int page, int strip) throws org.apache.thrift.TException;

    public int unbundling_equipment(String device_id) throws org.apache.thrift.TException;

    public int update_device(int user_type, String device_bagname, int update) throws org.apache.thrift.TException;

    public int update_random_selection(int num, String device_bagname, String mac) throws org.apache.thrift.TException;

    public int update_one_user(String user_name, String device_bagname) throws org.apache.thrift.TException;

    public String statistics_update_user_num(String device_bagname) throws org.apache.thrift.TException;

    public String query_online_user(String type, String m_type) throws org.apache.thrift.TException;

    public String statistics_data(String device_id) throws org.apache.thrift.TException;

    public int reset_user_level(String user_name) throws org.apache.thrift.TException;

    public String query_issuing_certificate_num(String partner, String mac, int state, int num, int off) throws org.apache.thrift.TException;

    public String query_device_attribute(String device_id) throws org.apache.thrift.TException;

    public String add_mac_msg(String msg) throws org.apache.thrift.TException;

    public int update_version(String msg) throws org.apache.thrift.TException;

    public int update_country(String msg) throws org.apache.thrift.TException;

    public String device_type_num(String partner) throws org.apache.thrift.TException;

    public String query_country_num(String partner) throws org.apache.thrift.TException;

    public String create_user_group(int group_id, String group_name) throws org.apache.thrift.TException;

    public String delete_user_group(int group_id) throws org.apache.thrift.TException;

    public String change_user_group(int group_id, String group_name) throws org.apache.thrift.TException;

    public String move_device_user_group(String device_id, int group_id) throws org.apache.thrift.TException;

    public String action_user_group(int group_id) throws org.apache.thrift.TException;

    public String init_user_group(String user_name) throws org.apache.thrift.TException;

    public String add_camera_type(String camera_type, String PanoTypeEx, int series, String PanoTilt, String PTinfo) throws org.apache.thrift.TException;

    public String delete_camera_type(String camera_type) throws org.apache.thrift.TException;

    public String change_camera_type(String camera_type, String PanoTypeEx, int series, String PanoTilt, String PTinfo) throws org.apache.thrift.TException;

    public String query_camera_type(String camera_type) throws org.apache.thrift.TException;

    public String select_paging_camera_type(int page, int strip) throws org.apache.thrift.TException;

    public String query_partner(String partner) throws org.apache.thrift.TException;

    public String query_partner_device(String partner, String mac, int state) throws org.apache.thrift.TException;

    public String delete_partner(String partner) throws org.apache.thrift.TException;

    public String query_partner_user(String partner, String user_name) throws org.apache.thrift.TException;

    public String query_allocate_device(String partner) throws org.apache.thrift.TException;

    public String partner_allocate_device(String f_partner, String c_partner, String mac) throws org.apache.thrift.TException;

    public String Web_mysql_server(String buf) throws org.apache.thrift.TException;

    public String partner_recover_device(String f_partner, String c_partner, String mac) throws org.apache.thrift.TException;

    public String set_issue_id(String mac, int state) throws org.apache.thrift.TException;

    public String query_issue_id(String mac) throws org.apache.thrift.TException;

    public String query_mac_attribute(String partner, String type) throws org.apache.thrift.TException;

    public String send_mail(String buf) throws org.apache.thrift.TException;

    public String update_password(String user_name, String new_pwd) throws org.apache.thrift.TException;

    public String device_disable(String mac_start, String mac_end, int flag) throws org.apache.thrift.TException;

    public String device_remove_disable(String mac_start, String mac_end, int flag) throws org.apache.thrift.TException;

    public String query_device_IP(String device_id) throws org.apache.thrift.TException;

    public int add_user(String user_name, String passwd, String company, int flag) throws org.apache.thrift.TException;

    public int register_service(String user_name, String passwd) throws org.apache.thrift.TException;

    public String trace_device_update(int num, String device_bagname) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getStudentInfo(Request request, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void device_reset_certificate(String mac, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void add_test_account(String user_name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delete_test_account(String user_name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void select_condition_account(String user_name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void select_paging_account(int page, int strip, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void unbundling_equipment(String device_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void update_device(int user_type, String device_bagname, int update, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void update_random_selection(int num, String device_bagname, String mac, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void update_one_user(String user_name, String device_bagname, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void statistics_update_user_num(String device_bagname, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void query_online_user(String type, String m_type, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void statistics_data(String device_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reset_user_level(String user_name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void query_issuing_certificate_num(String partner, String mac, int state, int num, int off, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void query_device_attribute(String device_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void add_mac_msg(String msg, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void update_version(String msg, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void update_country(String msg, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void device_type_num(String partner, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void query_country_num(String partner, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void create_user_group(int group_id, String group_name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delete_user_group(int group_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void change_user_group(int group_id, String group_name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void move_device_user_group(String device_id, int group_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void action_user_group(int group_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void init_user_group(String user_name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void add_camera_type(String camera_type, String PanoTypeEx, int series, String PanoTilt, String PTinfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delete_camera_type(String camera_type, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void change_camera_type(String camera_type, String PanoTypeEx, int series, String PanoTilt, String PTinfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void query_camera_type(String camera_type, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void select_paging_camera_type(int page, int strip, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void query_partner(String partner, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void query_partner_device(String partner, String mac, int state, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delete_partner(String partner, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void query_partner_user(String partner, String user_name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void query_allocate_device(String partner, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void partner_allocate_device(String f_partner, String c_partner, String mac, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void Web_mysql_server(String buf, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void partner_recover_device(String f_partner, String c_partner, String mac, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void set_issue_id(String mac, int state, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void query_issue_id(String mac, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void query_mac_attribute(String partner, String type, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void send_mail(String buf, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void update_password(String user_name, String new_pwd, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void device_disable(String mac_start, String mac_end, int flag, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void device_remove_disable(String mac_start, String mac_end, int flag, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void query_device_IP(String device_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void add_user(String user_name, String passwd, String company, int flag, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void register_service(String user_name, String passwd, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void trace_device_update(int num, String device_bagname, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Response getStudentInfo(Request request) throws org.apache.thrift.TException
    {
      send_getStudentInfo(request);
      return recv_getStudentInfo();
    }

    public void send_getStudentInfo(Request request) throws org.apache.thrift.TException
    {
      getStudentInfo_args args = new getStudentInfo_args();
      args.setRequest(request);
      sendBase("getStudentInfo", args);
    }

    public Response recv_getStudentInfo() throws org.apache.thrift.TException
    {
      getStudentInfo_result result = new getStudentInfo_result();
      receiveBase(result, "getStudentInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStudentInfo failed: unknown result");
    }

    public int device_reset_certificate(String mac) throws org.apache.thrift.TException
    {
      send_device_reset_certificate(mac);
      return recv_device_reset_certificate();
    }

    public void send_device_reset_certificate(String mac) throws org.apache.thrift.TException
    {
      device_reset_certificate_args args = new device_reset_certificate_args();
      args.setMac(mac);
      sendBase("device_reset_certificate", args);
    }

    public int recv_device_reset_certificate() throws org.apache.thrift.TException
    {
      device_reset_certificate_result result = new device_reset_certificate_result();
      receiveBase(result, "device_reset_certificate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "device_reset_certificate failed: unknown result");
    }

    public int add_test_account(String user_name) throws org.apache.thrift.TException
    {
      send_add_test_account(user_name);
      return recv_add_test_account();
    }

    public void send_add_test_account(String user_name) throws org.apache.thrift.TException
    {
      add_test_account_args args = new add_test_account_args();
      args.setUser_name(user_name);
      sendBase("add_test_account", args);
    }

    public int recv_add_test_account() throws org.apache.thrift.TException
    {
      add_test_account_result result = new add_test_account_result();
      receiveBase(result, "add_test_account");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "add_test_account failed: unknown result");
    }

    public int delete_test_account(String user_name) throws org.apache.thrift.TException
    {
      send_delete_test_account(user_name);
      return recv_delete_test_account();
    }

    public void send_delete_test_account(String user_name) throws org.apache.thrift.TException
    {
      delete_test_account_args args = new delete_test_account_args();
      args.setUser_name(user_name);
      sendBase("delete_test_account", args);
    }

    public int recv_delete_test_account() throws org.apache.thrift.TException
    {
      delete_test_account_result result = new delete_test_account_result();
      receiveBase(result, "delete_test_account");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delete_test_account failed: unknown result");
    }

    public String select_condition_account(String user_name) throws org.apache.thrift.TException
    {
      send_select_condition_account(user_name);
      return recv_select_condition_account();
    }

    public void send_select_condition_account(String user_name) throws org.apache.thrift.TException
    {
      select_condition_account_args args = new select_condition_account_args();
      args.setUser_name(user_name);
      sendBase("select_condition_account", args);
    }

    public String recv_select_condition_account() throws org.apache.thrift.TException
    {
      select_condition_account_result result = new select_condition_account_result();
      receiveBase(result, "select_condition_account");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "select_condition_account failed: unknown result");
    }

    public String select_paging_account(int page, int strip) throws org.apache.thrift.TException
    {
      send_select_paging_account(page, strip);
      return recv_select_paging_account();
    }

    public void send_select_paging_account(int page, int strip) throws org.apache.thrift.TException
    {
      select_paging_account_args args = new select_paging_account_args();
      args.setPage(page);
      args.setStrip(strip);
      sendBase("select_paging_account", args);
    }

    public String recv_select_paging_account() throws org.apache.thrift.TException
    {
      select_paging_account_result result = new select_paging_account_result();
      receiveBase(result, "select_paging_account");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "select_paging_account failed: unknown result");
    }

    public int unbundling_equipment(String device_id) throws org.apache.thrift.TException
    {
      send_unbundling_equipment(device_id);
      return recv_unbundling_equipment();
    }

    public void send_unbundling_equipment(String device_id) throws org.apache.thrift.TException
    {
      unbundling_equipment_args args = new unbundling_equipment_args();
      args.setDevice_id(device_id);
      sendBase("unbundling_equipment", args);
    }

    public int recv_unbundling_equipment() throws org.apache.thrift.TException
    {
      unbundling_equipment_result result = new unbundling_equipment_result();
      receiveBase(result, "unbundling_equipment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "unbundling_equipment failed: unknown result");
    }

    public int update_device(int user_type, String device_bagname, int update) throws org.apache.thrift.TException
    {
      send_update_device(user_type, device_bagname, update);
      return recv_update_device();
    }

    public void send_update_device(int user_type, String device_bagname, int update) throws org.apache.thrift.TException
    {
      update_device_args args = new update_device_args();
      args.setUser_type(user_type);
      args.setDevice_bagname(device_bagname);
      args.setUpdate(update);
      sendBase("update_device", args);
    }

    public int recv_update_device() throws org.apache.thrift.TException
    {
      update_device_result result = new update_device_result();
      receiveBase(result, "update_device");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "update_device failed: unknown result");
    }

    public int update_random_selection(int num, String device_bagname, String mac) throws org.apache.thrift.TException
    {
      send_update_random_selection(num, device_bagname, mac);
      return recv_update_random_selection();
    }

    public void send_update_random_selection(int num, String device_bagname, String mac) throws org.apache.thrift.TException
    {
      update_random_selection_args args = new update_random_selection_args();
      args.setNum(num);
      args.setDevice_bagname(device_bagname);
      args.setMac(mac);
      sendBase("update_random_selection", args);
    }

    public int recv_update_random_selection() throws org.apache.thrift.TException
    {
      update_random_selection_result result = new update_random_selection_result();
      receiveBase(result, "update_random_selection");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "update_random_selection failed: unknown result");
    }

    public int update_one_user(String user_name, String device_bagname) throws org.apache.thrift.TException
    {
      send_update_one_user(user_name, device_bagname);
      return recv_update_one_user();
    }

    public void send_update_one_user(String user_name, String device_bagname) throws org.apache.thrift.TException
    {
      update_one_user_args args = new update_one_user_args();
      args.setUser_name(user_name);
      args.setDevice_bagname(device_bagname);
      sendBase("update_one_user", args);
    }

    public int recv_update_one_user() throws org.apache.thrift.TException
    {
      update_one_user_result result = new update_one_user_result();
      receiveBase(result, "update_one_user");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "update_one_user failed: unknown result");
    }

    public String statistics_update_user_num(String device_bagname) throws org.apache.thrift.TException
    {
      send_statistics_update_user_num(device_bagname);
      return recv_statistics_update_user_num();
    }

    public void send_statistics_update_user_num(String device_bagname) throws org.apache.thrift.TException
    {
      statistics_update_user_num_args args = new statistics_update_user_num_args();
      args.setDevice_bagname(device_bagname);
      sendBase("statistics_update_user_num", args);
    }

    public String recv_statistics_update_user_num() throws org.apache.thrift.TException
    {
      statistics_update_user_num_result result = new statistics_update_user_num_result();
      receiveBase(result, "statistics_update_user_num");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "statistics_update_user_num failed: unknown result");
    }

    public String query_online_user(String type, String m_type) throws org.apache.thrift.TException
    {
      send_query_online_user(type, m_type);
      return recv_query_online_user();
    }

    public void send_query_online_user(String type, String m_type) throws org.apache.thrift.TException
    {
      query_online_user_args args = new query_online_user_args();
      args.setType(type);
      args.setM_type(m_type);
      sendBase("query_online_user", args);
    }

    public String recv_query_online_user() throws org.apache.thrift.TException
    {
      query_online_user_result result = new query_online_user_result();
      receiveBase(result, "query_online_user");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "query_online_user failed: unknown result");
    }

    public String statistics_data(String device_id) throws org.apache.thrift.TException
    {
      send_statistics_data(device_id);
      return recv_statistics_data();
    }

    public void send_statistics_data(String device_id) throws org.apache.thrift.TException
    {
      statistics_data_args args = new statistics_data_args();
      args.setDevice_id(device_id);
      sendBase("statistics_data", args);
    }

    public String recv_statistics_data() throws org.apache.thrift.TException
    {
      statistics_data_result result = new statistics_data_result();
      receiveBase(result, "statistics_data");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "statistics_data failed: unknown result");
    }

    public int reset_user_level(String user_name) throws org.apache.thrift.TException
    {
      send_reset_user_level(user_name);
      return recv_reset_user_level();
    }

    public void send_reset_user_level(String user_name) throws org.apache.thrift.TException
    {
      reset_user_level_args args = new reset_user_level_args();
      args.setUser_name(user_name);
      sendBase("reset_user_level", args);
    }

    public int recv_reset_user_level() throws org.apache.thrift.TException
    {
      reset_user_level_result result = new reset_user_level_result();
      receiveBase(result, "reset_user_level");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reset_user_level failed: unknown result");
    }

    public String query_issuing_certificate_num(String partner, String mac, int state, int num, int off) throws org.apache.thrift.TException
    {
      send_query_issuing_certificate_num(partner, mac, state, num, off);
      return recv_query_issuing_certificate_num();
    }

    public void send_query_issuing_certificate_num(String partner, String mac, int state, int num, int off) throws org.apache.thrift.TException
    {
      query_issuing_certificate_num_args args = new query_issuing_certificate_num_args();
      args.setPartner(partner);
      args.setMac(mac);
      args.setState(state);
      args.setNum(num);
      args.setOff(off);
      sendBase("query_issuing_certificate_num", args);
    }

    public String recv_query_issuing_certificate_num() throws org.apache.thrift.TException
    {
      query_issuing_certificate_num_result result = new query_issuing_certificate_num_result();
      receiveBase(result, "query_issuing_certificate_num");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "query_issuing_certificate_num failed: unknown result");
    }

    public String query_device_attribute(String device_id) throws org.apache.thrift.TException
    {
      send_query_device_attribute(device_id);
      return recv_query_device_attribute();
    }

    public void send_query_device_attribute(String device_id) throws org.apache.thrift.TException
    {
      query_device_attribute_args args = new query_device_attribute_args();
      args.setDevice_id(device_id);
      sendBase("query_device_attribute", args);
    }

    public String recv_query_device_attribute() throws org.apache.thrift.TException
    {
      query_device_attribute_result result = new query_device_attribute_result();
      receiveBase(result, "query_device_attribute");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "query_device_attribute failed: unknown result");
    }

    public String add_mac_msg(String msg) throws org.apache.thrift.TException
    {
      send_add_mac_msg(msg);
      return recv_add_mac_msg();
    }

    public void send_add_mac_msg(String msg) throws org.apache.thrift.TException
    {
      add_mac_msg_args args = new add_mac_msg_args();
      args.setMsg(msg);
      sendBase("add_mac_msg", args);
    }

    public String recv_add_mac_msg() throws org.apache.thrift.TException
    {
      add_mac_msg_result result = new add_mac_msg_result();
      receiveBase(result, "add_mac_msg");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "add_mac_msg failed: unknown result");
    }

    public int update_version(String msg) throws org.apache.thrift.TException
    {
      send_update_version(msg);
      return recv_update_version();
    }

    public void send_update_version(String msg) throws org.apache.thrift.TException
    {
      update_version_args args = new update_version_args();
      args.setMsg(msg);
      sendBase("update_version", args);
    }

    public int recv_update_version() throws org.apache.thrift.TException
    {
      update_version_result result = new update_version_result();
      receiveBase(result, "update_version");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "update_version failed: unknown result");
    }

    public int update_country(String msg) throws org.apache.thrift.TException
    {
      send_update_country(msg);
      return recv_update_country();
    }

    public void send_update_country(String msg) throws org.apache.thrift.TException
    {
      update_country_args args = new update_country_args();
      args.setMsg(msg);
      sendBase("update_country", args);
    }

    public int recv_update_country() throws org.apache.thrift.TException
    {
      update_country_result result = new update_country_result();
      receiveBase(result, "update_country");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "update_country failed: unknown result");
    }

    public String device_type_num(String partner) throws org.apache.thrift.TException
    {
      send_device_type_num(partner);
      return recv_device_type_num();
    }

    public void send_device_type_num(String partner) throws org.apache.thrift.TException
    {
      device_type_num_args args = new device_type_num_args();
      args.setPartner(partner);
      sendBase("device_type_num", args);
    }

    public String recv_device_type_num() throws org.apache.thrift.TException
    {
      device_type_num_result result = new device_type_num_result();
      receiveBase(result, "device_type_num");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "device_type_num failed: unknown result");
    }

    public String query_country_num(String partner) throws org.apache.thrift.TException
    {
      send_query_country_num(partner);
      return recv_query_country_num();
    }

    public void send_query_country_num(String partner) throws org.apache.thrift.TException
    {
      query_country_num_args args = new query_country_num_args();
      args.setPartner(partner);
      sendBase("query_country_num", args);
    }

    public String recv_query_country_num() throws org.apache.thrift.TException
    {
      query_country_num_result result = new query_country_num_result();
      receiveBase(result, "query_country_num");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "query_country_num failed: unknown result");
    }

    public String create_user_group(int group_id, String group_name) throws org.apache.thrift.TException
    {
      send_create_user_group(group_id, group_name);
      return recv_create_user_group();
    }

    public void send_create_user_group(int group_id, String group_name) throws org.apache.thrift.TException
    {
      create_user_group_args args = new create_user_group_args();
      args.setGroup_id(group_id);
      args.setGroup_name(group_name);
      sendBase("create_user_group", args);
    }

    public String recv_create_user_group() throws org.apache.thrift.TException
    {
      create_user_group_result result = new create_user_group_result();
      receiveBase(result, "create_user_group");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "create_user_group failed: unknown result");
    }

    public String delete_user_group(int group_id) throws org.apache.thrift.TException
    {
      send_delete_user_group(group_id);
      return recv_delete_user_group();
    }

    public void send_delete_user_group(int group_id) throws org.apache.thrift.TException
    {
      delete_user_group_args args = new delete_user_group_args();
      args.setGroup_id(group_id);
      sendBase("delete_user_group", args);
    }

    public String recv_delete_user_group() throws org.apache.thrift.TException
    {
      delete_user_group_result result = new delete_user_group_result();
      receiveBase(result, "delete_user_group");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delete_user_group failed: unknown result");
    }

    public String change_user_group(int group_id, String group_name) throws org.apache.thrift.TException
    {
      send_change_user_group(group_id, group_name);
      return recv_change_user_group();
    }

    public void send_change_user_group(int group_id, String group_name) throws org.apache.thrift.TException
    {
      change_user_group_args args = new change_user_group_args();
      args.setGroup_id(group_id);
      args.setGroup_name(group_name);
      sendBase("change_user_group", args);
    }

    public String recv_change_user_group() throws org.apache.thrift.TException
    {
      change_user_group_result result = new change_user_group_result();
      receiveBase(result, "change_user_group");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "change_user_group failed: unknown result");
    }

    public String move_device_user_group(String device_id, int group_id) throws org.apache.thrift.TException
    {
      send_move_device_user_group(device_id, group_id);
      return recv_move_device_user_group();
    }

    public void send_move_device_user_group(String device_id, int group_id) throws org.apache.thrift.TException
    {
      move_device_user_group_args args = new move_device_user_group_args();
      args.setDevice_id(device_id);
      args.setGroup_id(group_id);
      sendBase("move_device_user_group", args);
    }

    public String recv_move_device_user_group() throws org.apache.thrift.TException
    {
      move_device_user_group_result result = new move_device_user_group_result();
      receiveBase(result, "move_device_user_group");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "move_device_user_group failed: unknown result");
    }

    public String action_user_group(int group_id) throws org.apache.thrift.TException
    {
      send_action_user_group(group_id);
      return recv_action_user_group();
    }

    public void send_action_user_group(int group_id) throws org.apache.thrift.TException
    {
      action_user_group_args args = new action_user_group_args();
      args.setGroup_id(group_id);
      sendBase("action_user_group", args);
    }

    public String recv_action_user_group() throws org.apache.thrift.TException
    {
      action_user_group_result result = new action_user_group_result();
      receiveBase(result, "action_user_group");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "action_user_group failed: unknown result");
    }

    public String init_user_group(String user_name) throws org.apache.thrift.TException
    {
      send_init_user_group(user_name);
      return recv_init_user_group();
    }

    public void send_init_user_group(String user_name) throws org.apache.thrift.TException
    {
      init_user_group_args args = new init_user_group_args();
      args.setUser_name(user_name);
      sendBase("init_user_group", args);
    }

    public String recv_init_user_group() throws org.apache.thrift.TException
    {
      init_user_group_result result = new init_user_group_result();
      receiveBase(result, "init_user_group");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "init_user_group failed: unknown result");
    }

    public String add_camera_type(String camera_type, String PanoTypeEx, int series, String PanoTilt, String PTinfo) throws org.apache.thrift.TException
    {
      send_add_camera_type(camera_type, PanoTypeEx, series, PanoTilt, PTinfo);
      return recv_add_camera_type();
    }

    public void send_add_camera_type(String camera_type, String PanoTypeEx, int series, String PanoTilt, String PTinfo) throws org.apache.thrift.TException
    {
      add_camera_type_args args = new add_camera_type_args();
      args.setCamera_type(camera_type);
      args.setPanoTypeEx(PanoTypeEx);
      args.setSeries(series);
      args.setPanoTilt(PanoTilt);
      args.setPTinfo(PTinfo);
      sendBase("add_camera_type", args);
    }

    public String recv_add_camera_type() throws org.apache.thrift.TException
    {
      add_camera_type_result result = new add_camera_type_result();
      receiveBase(result, "add_camera_type");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "add_camera_type failed: unknown result");
    }

    public String delete_camera_type(String camera_type) throws org.apache.thrift.TException
    {
      send_delete_camera_type(camera_type);
      return recv_delete_camera_type();
    }

    public void send_delete_camera_type(String camera_type) throws org.apache.thrift.TException
    {
      delete_camera_type_args args = new delete_camera_type_args();
      args.setCamera_type(camera_type);
      sendBase("delete_camera_type", args);
    }

    public String recv_delete_camera_type() throws org.apache.thrift.TException
    {
      delete_camera_type_result result = new delete_camera_type_result();
      receiveBase(result, "delete_camera_type");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delete_camera_type failed: unknown result");
    }

    public String change_camera_type(String camera_type, String PanoTypeEx, int series, String PanoTilt, String PTinfo) throws org.apache.thrift.TException
    {
      send_change_camera_type(camera_type, PanoTypeEx, series, PanoTilt, PTinfo);
      return recv_change_camera_type();
    }

    public void send_change_camera_type(String camera_type, String PanoTypeEx, int series, String PanoTilt, String PTinfo) throws org.apache.thrift.TException
    {
      change_camera_type_args args = new change_camera_type_args();
      args.setCamera_type(camera_type);
      args.setPanoTypeEx(PanoTypeEx);
      args.setSeries(series);
      args.setPanoTilt(PanoTilt);
      args.setPTinfo(PTinfo);
      sendBase("change_camera_type", args);
    }

    public String recv_change_camera_type() throws org.apache.thrift.TException
    {
      change_camera_type_result result = new change_camera_type_result();
      receiveBase(result, "change_camera_type");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "change_camera_type failed: unknown result");
    }

    public String query_camera_type(String camera_type) throws org.apache.thrift.TException
    {
      send_query_camera_type(camera_type);
      return recv_query_camera_type();
    }

    public void send_query_camera_type(String camera_type) throws org.apache.thrift.TException
    {
      query_camera_type_args args = new query_camera_type_args();
      args.setCamera_type(camera_type);
      sendBase("query_camera_type", args);
    }

    public String recv_query_camera_type() throws org.apache.thrift.TException
    {
      query_camera_type_result result = new query_camera_type_result();
      receiveBase(result, "query_camera_type");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "query_camera_type failed: unknown result");
    }

    public String select_paging_camera_type(int page, int strip) throws org.apache.thrift.TException
    {
      send_select_paging_camera_type(page, strip);
      return recv_select_paging_camera_type();
    }

    public void send_select_paging_camera_type(int page, int strip) throws org.apache.thrift.TException
    {
      select_paging_camera_type_args args = new select_paging_camera_type_args();
      args.setPage(page);
      args.setStrip(strip);
      sendBase("select_paging_camera_type", args);
    }

    public String recv_select_paging_camera_type() throws org.apache.thrift.TException
    {
      select_paging_camera_type_result result = new select_paging_camera_type_result();
      receiveBase(result, "select_paging_camera_type");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "select_paging_camera_type failed: unknown result");
    }

    public String query_partner(String partner) throws org.apache.thrift.TException
    {
      send_query_partner(partner);
      return recv_query_partner();
    }

    public void send_query_partner(String partner) throws org.apache.thrift.TException
    {
      query_partner_args args = new query_partner_args();
      args.setPartner(partner);
      sendBase("query_partner", args);
    }

    public String recv_query_partner() throws org.apache.thrift.TException
    {
      query_partner_result result = new query_partner_result();
      receiveBase(result, "query_partner");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "query_partner failed: unknown result");
    }

    public String query_partner_device(String partner, String mac, int state) throws org.apache.thrift.TException
    {
      send_query_partner_device(partner, mac, state);
      return recv_query_partner_device();
    }

    public void send_query_partner_device(String partner, String mac, int state) throws org.apache.thrift.TException
    {
      query_partner_device_args args = new query_partner_device_args();
      args.setPartner(partner);
      args.setMac(mac);
      args.setState(state);
      sendBase("query_partner_device", args);
    }

    public String recv_query_partner_device() throws org.apache.thrift.TException
    {
      query_partner_device_result result = new query_partner_device_result();
      receiveBase(result, "query_partner_device");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "query_partner_device failed: unknown result");
    }

    public String delete_partner(String partner) throws org.apache.thrift.TException
    {
      send_delete_partner(partner);
      return recv_delete_partner();
    }

    public void send_delete_partner(String partner) throws org.apache.thrift.TException
    {
      delete_partner_args args = new delete_partner_args();
      args.setPartner(partner);
      sendBase("delete_partner", args);
    }

    public String recv_delete_partner() throws org.apache.thrift.TException
    {
      delete_partner_result result = new delete_partner_result();
      receiveBase(result, "delete_partner");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delete_partner failed: unknown result");
    }

    public String query_partner_user(String partner, String user_name) throws org.apache.thrift.TException
    {
      send_query_partner_user(partner, user_name);
      return recv_query_partner_user();
    }

    public void send_query_partner_user(String partner, String user_name) throws org.apache.thrift.TException
    {
      query_partner_user_args args = new query_partner_user_args();
      args.setPartner(partner);
      args.setUser_name(user_name);
      sendBase("query_partner_user", args);
    }

    public String recv_query_partner_user() throws org.apache.thrift.TException
    {
      query_partner_user_result result = new query_partner_user_result();
      receiveBase(result, "query_partner_user");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "query_partner_user failed: unknown result");
    }

    public String query_allocate_device(String partner) throws org.apache.thrift.TException
    {
      send_query_allocate_device(partner);
      return recv_query_allocate_device();
    }

    public void send_query_allocate_device(String partner) throws org.apache.thrift.TException
    {
      query_allocate_device_args args = new query_allocate_device_args();
      args.setPartner(partner);
      sendBase("query_allocate_device", args);
    }

    public String recv_query_allocate_device() throws org.apache.thrift.TException
    {
      query_allocate_device_result result = new query_allocate_device_result();
      receiveBase(result, "query_allocate_device");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "query_allocate_device failed: unknown result");
    }

    public String partner_allocate_device(String f_partner, String c_partner, String mac) throws org.apache.thrift.TException
    {
      send_partner_allocate_device(f_partner, c_partner, mac);
      return recv_partner_allocate_device();
    }

    public void send_partner_allocate_device(String f_partner, String c_partner, String mac) throws org.apache.thrift.TException
    {
      partner_allocate_device_args args = new partner_allocate_device_args();
      args.setF_partner(f_partner);
      args.setC_partner(c_partner);
      args.setMac(mac);
      sendBase("partner_allocate_device", args);
    }

    public String recv_partner_allocate_device() throws org.apache.thrift.TException
    {
      partner_allocate_device_result result = new partner_allocate_device_result();
      receiveBase(result, "partner_allocate_device");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "partner_allocate_device failed: unknown result");
    }

    public String Web_mysql_server(String buf) throws org.apache.thrift.TException
    {
      send_Web_mysql_server(buf);
      return recv_Web_mysql_server();
    }

    public void send_Web_mysql_server(String buf) throws org.apache.thrift.TException
    {
      Web_mysql_server_args args = new Web_mysql_server_args();
      args.setBuf(buf);
      sendBase("Web_mysql_server", args);
    }

    public String recv_Web_mysql_server() throws org.apache.thrift.TException
    {
      Web_mysql_server_result result = new Web_mysql_server_result();
      receiveBase(result, "Web_mysql_server");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Web_mysql_server failed: unknown result");
    }

    public String partner_recover_device(String f_partner, String c_partner, String mac) throws org.apache.thrift.TException
    {
      send_partner_recover_device(f_partner, c_partner, mac);
      return recv_partner_recover_device();
    }

    public void send_partner_recover_device(String f_partner, String c_partner, String mac) throws org.apache.thrift.TException
    {
      partner_recover_device_args args = new partner_recover_device_args();
      args.setF_partner(f_partner);
      args.setC_partner(c_partner);
      args.setMac(mac);
      sendBase("partner_recover_device", args);
    }

    public String recv_partner_recover_device() throws org.apache.thrift.TException
    {
      partner_recover_device_result result = new partner_recover_device_result();
      receiveBase(result, "partner_recover_device");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "partner_recover_device failed: unknown result");
    }

    public String set_issue_id(String mac, int state) throws org.apache.thrift.TException
    {
      send_set_issue_id(mac, state);
      return recv_set_issue_id();
    }

    public void send_set_issue_id(String mac, int state) throws org.apache.thrift.TException
    {
      set_issue_id_args args = new set_issue_id_args();
      args.setMac(mac);
      args.setState(state);
      sendBase("set_issue_id", args);
    }

    public String recv_set_issue_id() throws org.apache.thrift.TException
    {
      set_issue_id_result result = new set_issue_id_result();
      receiveBase(result, "set_issue_id");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "set_issue_id failed: unknown result");
    }

    public String query_issue_id(String mac) throws org.apache.thrift.TException
    {
      send_query_issue_id(mac);
      return recv_query_issue_id();
    }

    public void send_query_issue_id(String mac) throws org.apache.thrift.TException
    {
      query_issue_id_args args = new query_issue_id_args();
      args.setMac(mac);
      sendBase("query_issue_id", args);
    }

    public String recv_query_issue_id() throws org.apache.thrift.TException
    {
      query_issue_id_result result = new query_issue_id_result();
      receiveBase(result, "query_issue_id");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "query_issue_id failed: unknown result");
    }

    public String query_mac_attribute(String partner, String type) throws org.apache.thrift.TException
    {
      send_query_mac_attribute(partner, type);
      return recv_query_mac_attribute();
    }

    public void send_query_mac_attribute(String partner, String type) throws org.apache.thrift.TException
    {
      query_mac_attribute_args args = new query_mac_attribute_args();
      args.setPartner(partner);
      args.setType(type);
      sendBase("query_mac_attribute", args);
    }

    public String recv_query_mac_attribute() throws org.apache.thrift.TException
    {
      query_mac_attribute_result result = new query_mac_attribute_result();
      receiveBase(result, "query_mac_attribute");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "query_mac_attribute failed: unknown result");
    }

    public String send_mail(String buf) throws org.apache.thrift.TException
    {
      send_send_mail(buf);
      return recv_send_mail();
    }

    public void send_send_mail(String buf) throws org.apache.thrift.TException
    {
      send_mail_args args = new send_mail_args();
      args.setBuf(buf);
      sendBase("send_mail", args);
    }

    public String recv_send_mail() throws org.apache.thrift.TException
    {
      send_mail_result result = new send_mail_result();
      receiveBase(result, "send_mail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "send_mail failed: unknown result");
    }

    public String update_password(String user_name, String new_pwd) throws org.apache.thrift.TException
    {
      send_update_password(user_name, new_pwd);
      return recv_update_password();
    }

    public void send_update_password(String user_name, String new_pwd) throws org.apache.thrift.TException
    {
      update_password_args args = new update_password_args();
      args.setUser_name(user_name);
      args.setNew_pwd(new_pwd);
      sendBase("update_password", args);
    }

    public String recv_update_password() throws org.apache.thrift.TException
    {
      update_password_result result = new update_password_result();
      receiveBase(result, "update_password");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "update_password failed: unknown result");
    }

    public String device_disable(String mac_start, String mac_end, int flag) throws org.apache.thrift.TException
    {
      send_device_disable(mac_start, mac_end, flag);
      return recv_device_disable();
    }

    public void send_device_disable(String mac_start, String mac_end, int flag) throws org.apache.thrift.TException
    {
      device_disable_args args = new device_disable_args();
      args.setMac_start(mac_start);
      args.setMac_end(mac_end);
      args.setFlag(flag);
      sendBase("device_disable", args);
    }

    public String recv_device_disable() throws org.apache.thrift.TException
    {
      device_disable_result result = new device_disable_result();
      receiveBase(result, "device_disable");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "device_disable failed: unknown result");
    }

    public String device_remove_disable(String mac_start, String mac_end, int flag) throws org.apache.thrift.TException
    {
      send_device_remove_disable(mac_start, mac_end, flag);
      return recv_device_remove_disable();
    }

    public void send_device_remove_disable(String mac_start, String mac_end, int flag) throws org.apache.thrift.TException
    {
      device_remove_disable_args args = new device_remove_disable_args();
      args.setMac_start(mac_start);
      args.setMac_end(mac_end);
      args.setFlag(flag);
      sendBase("device_remove_disable", args);
    }

    public String recv_device_remove_disable() throws org.apache.thrift.TException
    {
      device_remove_disable_result result = new device_remove_disable_result();
      receiveBase(result, "device_remove_disable");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "device_remove_disable failed: unknown result");
    }

    public String query_device_IP(String device_id) throws org.apache.thrift.TException
    {
      send_query_device_IP(device_id);
      return recv_query_device_IP();
    }

    public void send_query_device_IP(String device_id) throws org.apache.thrift.TException
    {
      query_device_IP_args args = new query_device_IP_args();
      args.setDevice_id(device_id);
      sendBase("query_device_IP", args);
    }

    public String recv_query_device_IP() throws org.apache.thrift.TException
    {
      query_device_IP_result result = new query_device_IP_result();
      receiveBase(result, "query_device_IP");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "query_device_IP failed: unknown result");
    }

    public int add_user(String user_name, String passwd, String company, int flag) throws org.apache.thrift.TException
    {
      send_add_user(user_name, passwd, company, flag);
      return recv_add_user();
    }

    public void send_add_user(String user_name, String passwd, String company, int flag) throws org.apache.thrift.TException
    {
      add_user_args args = new add_user_args();
      args.setUser_name(user_name);
      args.setPasswd(passwd);
      args.setCompany(company);
      args.setFlag(flag);
      sendBase("add_user", args);
    }

    public int recv_add_user() throws org.apache.thrift.TException
    {
      add_user_result result = new add_user_result();
      receiveBase(result, "add_user");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "add_user failed: unknown result");
    }

    public int register_service(String user_name, String passwd) throws org.apache.thrift.TException
    {
      send_register_service(user_name, passwd);
      return recv_register_service();
    }

    public void send_register_service(String user_name, String passwd) throws org.apache.thrift.TException
    {
      register_service_args args = new register_service_args();
      args.setUser_name(user_name);
      args.setPasswd(passwd);
      sendBase("register_service", args);
    }

    public int recv_register_service() throws org.apache.thrift.TException
    {
      register_service_result result = new register_service_result();
      receiveBase(result, "register_service");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "register_service failed: unknown result");
    }

    public String trace_device_update(int num, String device_bagname) throws org.apache.thrift.TException
    {
      send_trace_device_update(num, device_bagname);
      return recv_trace_device_update();
    }

    public void send_trace_device_update(int num, String device_bagname) throws org.apache.thrift.TException
    {
      trace_device_update_args args = new trace_device_update_args();
      args.setNum(num);
      args.setDevice_bagname(device_bagname);
      sendBase("trace_device_update", args);
    }

    public String recv_trace_device_update() throws org.apache.thrift.TException
    {
      trace_device_update_result result = new trace_device_update_result();
      receiveBase(result, "trace_device_update");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "trace_device_update failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getStudentInfo(Request request, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getStudentInfo_call method_call = new getStudentInfo_call(request, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStudentInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Request request;
      public getStudentInfo_call(Request request, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStudentInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStudentInfo_args args = new getStudentInfo_args();
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStudentInfo();
      }
    }

    public void device_reset_certificate(String mac, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      device_reset_certificate_call method_call = new device_reset_certificate_call(mac, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class device_reset_certificate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String mac;
      public device_reset_certificate_call(String mac, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mac = mac;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("device_reset_certificate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        device_reset_certificate_args args = new device_reset_certificate_args();
        args.setMac(mac);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_device_reset_certificate();
      }
    }

    public void add_test_account(String user_name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      add_test_account_call method_call = new add_test_account_call(user_name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class add_test_account_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      public add_test_account_call(String user_name, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("add_test_account", org.apache.thrift.protocol.TMessageType.CALL, 0));
        add_test_account_args args = new add_test_account_args();
        args.setUser_name(user_name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_add_test_account();
      }
    }

    public void delete_test_account(String user_name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delete_test_account_call method_call = new delete_test_account_call(user_name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delete_test_account_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      public delete_test_account_call(String user_name, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delete_test_account", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delete_test_account_args args = new delete_test_account_args();
        args.setUser_name(user_name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delete_test_account();
      }
    }

    public void select_condition_account(String user_name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      select_condition_account_call method_call = new select_condition_account_call(user_name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class select_condition_account_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      public select_condition_account_call(String user_name, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("select_condition_account", org.apache.thrift.protocol.TMessageType.CALL, 0));
        select_condition_account_args args = new select_condition_account_args();
        args.setUser_name(user_name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_select_condition_account();
      }
    }

    public void select_paging_account(int page, int strip, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      select_paging_account_call method_call = new select_paging_account_call(page, strip, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class select_paging_account_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int page;
      private int strip;
      public select_paging_account_call(int page, int strip, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.page = page;
        this.strip = strip;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("select_paging_account", org.apache.thrift.protocol.TMessageType.CALL, 0));
        select_paging_account_args args = new select_paging_account_args();
        args.setPage(page);
        args.setStrip(strip);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_select_paging_account();
      }
    }

    public void unbundling_equipment(String device_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      unbundling_equipment_call method_call = new unbundling_equipment_call(device_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class unbundling_equipment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String device_id;
      public unbundling_equipment_call(String device_id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.device_id = device_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("unbundling_equipment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        unbundling_equipment_args args = new unbundling_equipment_args();
        args.setDevice_id(device_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_unbundling_equipment();
      }
    }

    public void update_device(int user_type, String device_bagname, int update, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      update_device_call method_call = new update_device_call(user_type, device_bagname, update, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class update_device_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int user_type;
      private String device_bagname;
      private int update;
      public update_device_call(int user_type, String device_bagname, int update, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_type = user_type;
        this.device_bagname = device_bagname;
        this.update = update;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("update_device", org.apache.thrift.protocol.TMessageType.CALL, 0));
        update_device_args args = new update_device_args();
        args.setUser_type(user_type);
        args.setDevice_bagname(device_bagname);
        args.setUpdate(update);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_update_device();
      }
    }

    public void update_random_selection(int num, String device_bagname, String mac, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      update_random_selection_call method_call = new update_random_selection_call(num, device_bagname, mac, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class update_random_selection_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int num;
      private String device_bagname;
      private String mac;
      public update_random_selection_call(int num, String device_bagname, String mac, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.num = num;
        this.device_bagname = device_bagname;
        this.mac = mac;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("update_random_selection", org.apache.thrift.protocol.TMessageType.CALL, 0));
        update_random_selection_args args = new update_random_selection_args();
        args.setNum(num);
        args.setDevice_bagname(device_bagname);
        args.setMac(mac);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_update_random_selection();
      }
    }

    public void update_one_user(String user_name, String device_bagname, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      update_one_user_call method_call = new update_one_user_call(user_name, device_bagname, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class update_one_user_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      private String device_bagname;
      public update_one_user_call(String user_name, String device_bagname, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
        this.device_bagname = device_bagname;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("update_one_user", org.apache.thrift.protocol.TMessageType.CALL, 0));
        update_one_user_args args = new update_one_user_args();
        args.setUser_name(user_name);
        args.setDevice_bagname(device_bagname);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_update_one_user();
      }
    }

    public void statistics_update_user_num(String device_bagname, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      statistics_update_user_num_call method_call = new statistics_update_user_num_call(device_bagname, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class statistics_update_user_num_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String device_bagname;
      public statistics_update_user_num_call(String device_bagname, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.device_bagname = device_bagname;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("statistics_update_user_num", org.apache.thrift.protocol.TMessageType.CALL, 0));
        statistics_update_user_num_args args = new statistics_update_user_num_args();
        args.setDevice_bagname(device_bagname);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_statistics_update_user_num();
      }
    }

    public void query_online_user(String type, String m_type, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      query_online_user_call method_call = new query_online_user_call(type, m_type, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class query_online_user_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String type;
      private String m_type;
      public query_online_user_call(String type, String m_type, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.type = type;
        this.m_type = m_type;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("query_online_user", org.apache.thrift.protocol.TMessageType.CALL, 0));
        query_online_user_args args = new query_online_user_args();
        args.setType(type);
        args.setM_type(m_type);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_query_online_user();
      }
    }

    public void statistics_data(String device_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      statistics_data_call method_call = new statistics_data_call(device_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class statistics_data_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String device_id;
      public statistics_data_call(String device_id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.device_id = device_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("statistics_data", org.apache.thrift.protocol.TMessageType.CALL, 0));
        statistics_data_args args = new statistics_data_args();
        args.setDevice_id(device_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_statistics_data();
      }
    }

    public void reset_user_level(String user_name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reset_user_level_call method_call = new reset_user_level_call(user_name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reset_user_level_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      public reset_user_level_call(String user_name, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reset_user_level", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reset_user_level_args args = new reset_user_level_args();
        args.setUser_name(user_name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reset_user_level();
      }
    }

    public void query_issuing_certificate_num(String partner, String mac, int state, int num, int off, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      query_issuing_certificate_num_call method_call = new query_issuing_certificate_num_call(partner, mac, state, num, off, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class query_issuing_certificate_num_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String partner;
      private String mac;
      private int state;
      private int num;
      private int off;
      public query_issuing_certificate_num_call(String partner, String mac, int state, int num, int off, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.partner = partner;
        this.mac = mac;
        this.state = state;
        this.num = num;
        this.off = off;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("query_issuing_certificate_num", org.apache.thrift.protocol.TMessageType.CALL, 0));
        query_issuing_certificate_num_args args = new query_issuing_certificate_num_args();
        args.setPartner(partner);
        args.setMac(mac);
        args.setState(state);
        args.setNum(num);
        args.setOff(off);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_query_issuing_certificate_num();
      }
    }

    public void query_device_attribute(String device_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      query_device_attribute_call method_call = new query_device_attribute_call(device_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class query_device_attribute_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String device_id;
      public query_device_attribute_call(String device_id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.device_id = device_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("query_device_attribute", org.apache.thrift.protocol.TMessageType.CALL, 0));
        query_device_attribute_args args = new query_device_attribute_args();
        args.setDevice_id(device_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_query_device_attribute();
      }
    }

    public void add_mac_msg(String msg, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      add_mac_msg_call method_call = new add_mac_msg_call(msg, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class add_mac_msg_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String msg;
      public add_mac_msg_call(String msg, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.msg = msg;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("add_mac_msg", org.apache.thrift.protocol.TMessageType.CALL, 0));
        add_mac_msg_args args = new add_mac_msg_args();
        args.setMsg(msg);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_add_mac_msg();
      }
    }

    public void update_version(String msg, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      update_version_call method_call = new update_version_call(msg, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class update_version_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String msg;
      public update_version_call(String msg, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.msg = msg;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("update_version", org.apache.thrift.protocol.TMessageType.CALL, 0));
        update_version_args args = new update_version_args();
        args.setMsg(msg);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_update_version();
      }
    }

    public void update_country(String msg, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      update_country_call method_call = new update_country_call(msg, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class update_country_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String msg;
      public update_country_call(String msg, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.msg = msg;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("update_country", org.apache.thrift.protocol.TMessageType.CALL, 0));
        update_country_args args = new update_country_args();
        args.setMsg(msg);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_update_country();
      }
    }

    public void device_type_num(String partner, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      device_type_num_call method_call = new device_type_num_call(partner, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class device_type_num_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String partner;
      public device_type_num_call(String partner, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.partner = partner;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("device_type_num", org.apache.thrift.protocol.TMessageType.CALL, 0));
        device_type_num_args args = new device_type_num_args();
        args.setPartner(partner);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_device_type_num();
      }
    }

    public void query_country_num(String partner, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      query_country_num_call method_call = new query_country_num_call(partner, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class query_country_num_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String partner;
      public query_country_num_call(String partner, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.partner = partner;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("query_country_num", org.apache.thrift.protocol.TMessageType.CALL, 0));
        query_country_num_args args = new query_country_num_args();
        args.setPartner(partner);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_query_country_num();
      }
    }

    public void create_user_group(int group_id, String group_name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      create_user_group_call method_call = new create_user_group_call(group_id, group_name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class create_user_group_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int group_id;
      private String group_name;
      public create_user_group_call(int group_id, String group_name, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.group_id = group_id;
        this.group_name = group_name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("create_user_group", org.apache.thrift.protocol.TMessageType.CALL, 0));
        create_user_group_args args = new create_user_group_args();
        args.setGroup_id(group_id);
        args.setGroup_name(group_name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_create_user_group();
      }
    }

    public void delete_user_group(int group_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delete_user_group_call method_call = new delete_user_group_call(group_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delete_user_group_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int group_id;
      public delete_user_group_call(int group_id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.group_id = group_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delete_user_group", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delete_user_group_args args = new delete_user_group_args();
        args.setGroup_id(group_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delete_user_group();
      }
    }

    public void change_user_group(int group_id, String group_name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      change_user_group_call method_call = new change_user_group_call(group_id, group_name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class change_user_group_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int group_id;
      private String group_name;
      public change_user_group_call(int group_id, String group_name, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.group_id = group_id;
        this.group_name = group_name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("change_user_group", org.apache.thrift.protocol.TMessageType.CALL, 0));
        change_user_group_args args = new change_user_group_args();
        args.setGroup_id(group_id);
        args.setGroup_name(group_name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_change_user_group();
      }
    }

    public void move_device_user_group(String device_id, int group_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      move_device_user_group_call method_call = new move_device_user_group_call(device_id, group_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class move_device_user_group_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String device_id;
      private int group_id;
      public move_device_user_group_call(String device_id, int group_id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.device_id = device_id;
        this.group_id = group_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("move_device_user_group", org.apache.thrift.protocol.TMessageType.CALL, 0));
        move_device_user_group_args args = new move_device_user_group_args();
        args.setDevice_id(device_id);
        args.setGroup_id(group_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_move_device_user_group();
      }
    }

    public void action_user_group(int group_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      action_user_group_call method_call = new action_user_group_call(group_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class action_user_group_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int group_id;
      public action_user_group_call(int group_id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.group_id = group_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("action_user_group", org.apache.thrift.protocol.TMessageType.CALL, 0));
        action_user_group_args args = new action_user_group_args();
        args.setGroup_id(group_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_action_user_group();
      }
    }

    public void init_user_group(String user_name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      init_user_group_call method_call = new init_user_group_call(user_name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class init_user_group_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      public init_user_group_call(String user_name, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("init_user_group", org.apache.thrift.protocol.TMessageType.CALL, 0));
        init_user_group_args args = new init_user_group_args();
        args.setUser_name(user_name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_init_user_group();
      }
    }

    public void add_camera_type(String camera_type, String PanoTypeEx, int series, String PanoTilt, String PTinfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      add_camera_type_call method_call = new add_camera_type_call(camera_type, PanoTypeEx, series, PanoTilt, PTinfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class add_camera_type_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String camera_type;
      private String PanoTypeEx;
      private int series;
      private String PanoTilt;
      private String PTinfo;
      public add_camera_type_call(String camera_type, String PanoTypeEx, int series, String PanoTilt, String PTinfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.camera_type = camera_type;
        this.PanoTypeEx = PanoTypeEx;
        this.series = series;
        this.PanoTilt = PanoTilt;
        this.PTinfo = PTinfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("add_camera_type", org.apache.thrift.protocol.TMessageType.CALL, 0));
        add_camera_type_args args = new add_camera_type_args();
        args.setCamera_type(camera_type);
        args.setPanoTypeEx(PanoTypeEx);
        args.setSeries(series);
        args.setPanoTilt(PanoTilt);
        args.setPTinfo(PTinfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_add_camera_type();
      }
    }

    public void delete_camera_type(String camera_type, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delete_camera_type_call method_call = new delete_camera_type_call(camera_type, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delete_camera_type_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String camera_type;
      public delete_camera_type_call(String camera_type, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.camera_type = camera_type;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delete_camera_type", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delete_camera_type_args args = new delete_camera_type_args();
        args.setCamera_type(camera_type);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delete_camera_type();
      }
    }

    public void change_camera_type(String camera_type, String PanoTypeEx, int series, String PanoTilt, String PTinfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      change_camera_type_call method_call = new change_camera_type_call(camera_type, PanoTypeEx, series, PanoTilt, PTinfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class change_camera_type_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String camera_type;
      private String PanoTypeEx;
      private int series;
      private String PanoTilt;
      private String PTinfo;
      public change_camera_type_call(String camera_type, String PanoTypeEx, int series, String PanoTilt, String PTinfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.camera_type = camera_type;
        this.PanoTypeEx = PanoTypeEx;
        this.series = series;
        this.PanoTilt = PanoTilt;
        this.PTinfo = PTinfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("change_camera_type", org.apache.thrift.protocol.TMessageType.CALL, 0));
        change_camera_type_args args = new change_camera_type_args();
        args.setCamera_type(camera_type);
        args.setPanoTypeEx(PanoTypeEx);
        args.setSeries(series);
        args.setPanoTilt(PanoTilt);
        args.setPTinfo(PTinfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_change_camera_type();
      }
    }

    public void query_camera_type(String camera_type, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      query_camera_type_call method_call = new query_camera_type_call(camera_type, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class query_camera_type_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String camera_type;
      public query_camera_type_call(String camera_type, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.camera_type = camera_type;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("query_camera_type", org.apache.thrift.protocol.TMessageType.CALL, 0));
        query_camera_type_args args = new query_camera_type_args();
        args.setCamera_type(camera_type);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_query_camera_type();
      }
    }

    public void select_paging_camera_type(int page, int strip, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      select_paging_camera_type_call method_call = new select_paging_camera_type_call(page, strip, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class select_paging_camera_type_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int page;
      private int strip;
      public select_paging_camera_type_call(int page, int strip, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.page = page;
        this.strip = strip;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("select_paging_camera_type", org.apache.thrift.protocol.TMessageType.CALL, 0));
        select_paging_camera_type_args args = new select_paging_camera_type_args();
        args.setPage(page);
        args.setStrip(strip);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_select_paging_camera_type();
      }
    }

    public void query_partner(String partner, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      query_partner_call method_call = new query_partner_call(partner, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class query_partner_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String partner;
      public query_partner_call(String partner, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.partner = partner;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("query_partner", org.apache.thrift.protocol.TMessageType.CALL, 0));
        query_partner_args args = new query_partner_args();
        args.setPartner(partner);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_query_partner();
      }
    }

    public void query_partner_device(String partner, String mac, int state, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      query_partner_device_call method_call = new query_partner_device_call(partner, mac, state, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class query_partner_device_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String partner;
      private String mac;
      private int state;
      public query_partner_device_call(String partner, String mac, int state, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.partner = partner;
        this.mac = mac;
        this.state = state;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("query_partner_device", org.apache.thrift.protocol.TMessageType.CALL, 0));
        query_partner_device_args args = new query_partner_device_args();
        args.setPartner(partner);
        args.setMac(mac);
        args.setState(state);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_query_partner_device();
      }
    }

    public void delete_partner(String partner, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delete_partner_call method_call = new delete_partner_call(partner, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delete_partner_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String partner;
      public delete_partner_call(String partner, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.partner = partner;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delete_partner", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delete_partner_args args = new delete_partner_args();
        args.setPartner(partner);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delete_partner();
      }
    }

    public void query_partner_user(String partner, String user_name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      query_partner_user_call method_call = new query_partner_user_call(partner, user_name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class query_partner_user_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String partner;
      private String user_name;
      public query_partner_user_call(String partner, String user_name, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.partner = partner;
        this.user_name = user_name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("query_partner_user", org.apache.thrift.protocol.TMessageType.CALL, 0));
        query_partner_user_args args = new query_partner_user_args();
        args.setPartner(partner);
        args.setUser_name(user_name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_query_partner_user();
      }
    }

    public void query_allocate_device(String partner, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      query_allocate_device_call method_call = new query_allocate_device_call(partner, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class query_allocate_device_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String partner;
      public query_allocate_device_call(String partner, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.partner = partner;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("query_allocate_device", org.apache.thrift.protocol.TMessageType.CALL, 0));
        query_allocate_device_args args = new query_allocate_device_args();
        args.setPartner(partner);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_query_allocate_device();
      }
    }

    public void partner_allocate_device(String f_partner, String c_partner, String mac, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      partner_allocate_device_call method_call = new partner_allocate_device_call(f_partner, c_partner, mac, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class partner_allocate_device_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String f_partner;
      private String c_partner;
      private String mac;
      public partner_allocate_device_call(String f_partner, String c_partner, String mac, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.f_partner = f_partner;
        this.c_partner = c_partner;
        this.mac = mac;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("partner_allocate_device", org.apache.thrift.protocol.TMessageType.CALL, 0));
        partner_allocate_device_args args = new partner_allocate_device_args();
        args.setF_partner(f_partner);
        args.setC_partner(c_partner);
        args.setMac(mac);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_partner_allocate_device();
      }
    }

    public void Web_mysql_server(String buf, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Web_mysql_server_call method_call = new Web_mysql_server_call(buf, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Web_mysql_server_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String buf;
      public Web_mysql_server_call(String buf, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.buf = buf;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Web_mysql_server", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Web_mysql_server_args args = new Web_mysql_server_args();
        args.setBuf(buf);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Web_mysql_server();
      }
    }

    public void partner_recover_device(String f_partner, String c_partner, String mac, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      partner_recover_device_call method_call = new partner_recover_device_call(f_partner, c_partner, mac, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class partner_recover_device_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String f_partner;
      private String c_partner;
      private String mac;
      public partner_recover_device_call(String f_partner, String c_partner, String mac, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.f_partner = f_partner;
        this.c_partner = c_partner;
        this.mac = mac;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("partner_recover_device", org.apache.thrift.protocol.TMessageType.CALL, 0));
        partner_recover_device_args args = new partner_recover_device_args();
        args.setF_partner(f_partner);
        args.setC_partner(c_partner);
        args.setMac(mac);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_partner_recover_device();
      }
    }

    public void set_issue_id(String mac, int state, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      set_issue_id_call method_call = new set_issue_id_call(mac, state, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class set_issue_id_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String mac;
      private int state;
      public set_issue_id_call(String mac, int state, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mac = mac;
        this.state = state;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("set_issue_id", org.apache.thrift.protocol.TMessageType.CALL, 0));
        set_issue_id_args args = new set_issue_id_args();
        args.setMac(mac);
        args.setState(state);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_set_issue_id();
      }
    }

    public void query_issue_id(String mac, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      query_issue_id_call method_call = new query_issue_id_call(mac, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class query_issue_id_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String mac;
      public query_issue_id_call(String mac, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mac = mac;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("query_issue_id", org.apache.thrift.protocol.TMessageType.CALL, 0));
        query_issue_id_args args = new query_issue_id_args();
        args.setMac(mac);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_query_issue_id();
      }
    }

    public void query_mac_attribute(String partner, String type, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      query_mac_attribute_call method_call = new query_mac_attribute_call(partner, type, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class query_mac_attribute_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String partner;
      private String type;
      public query_mac_attribute_call(String partner, String type, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.partner = partner;
        this.type = type;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("query_mac_attribute", org.apache.thrift.protocol.TMessageType.CALL, 0));
        query_mac_attribute_args args = new query_mac_attribute_args();
        args.setPartner(partner);
        args.setType(type);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_query_mac_attribute();
      }
    }

    public void send_mail(String buf, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      send_mail_call method_call = new send_mail_call(buf, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class send_mail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String buf;
      public send_mail_call(String buf, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.buf = buf;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("send_mail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        send_mail_args args = new send_mail_args();
        args.setBuf(buf);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_send_mail();
      }
    }

    public void update_password(String user_name, String new_pwd, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      update_password_call method_call = new update_password_call(user_name, new_pwd, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class update_password_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      private String new_pwd;
      public update_password_call(String user_name, String new_pwd, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
        this.new_pwd = new_pwd;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("update_password", org.apache.thrift.protocol.TMessageType.CALL, 0));
        update_password_args args = new update_password_args();
        args.setUser_name(user_name);
        args.setNew_pwd(new_pwd);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_update_password();
      }
    }

    public void device_disable(String mac_start, String mac_end, int flag, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      device_disable_call method_call = new device_disable_call(mac_start, mac_end, flag, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class device_disable_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String mac_start;
      private String mac_end;
      private int flag;
      public device_disable_call(String mac_start, String mac_end, int flag, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mac_start = mac_start;
        this.mac_end = mac_end;
        this.flag = flag;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("device_disable", org.apache.thrift.protocol.TMessageType.CALL, 0));
        device_disable_args args = new device_disable_args();
        args.setMac_start(mac_start);
        args.setMac_end(mac_end);
        args.setFlag(flag);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_device_disable();
      }
    }

    public void device_remove_disable(String mac_start, String mac_end, int flag, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      device_remove_disable_call method_call = new device_remove_disable_call(mac_start, mac_end, flag, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class device_remove_disable_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String mac_start;
      private String mac_end;
      private int flag;
      public device_remove_disable_call(String mac_start, String mac_end, int flag, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mac_start = mac_start;
        this.mac_end = mac_end;
        this.flag = flag;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("device_remove_disable", org.apache.thrift.protocol.TMessageType.CALL, 0));
        device_remove_disable_args args = new device_remove_disable_args();
        args.setMac_start(mac_start);
        args.setMac_end(mac_end);
        args.setFlag(flag);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_device_remove_disable();
      }
    }

    public void query_device_IP(String device_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      query_device_IP_call method_call = new query_device_IP_call(device_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class query_device_IP_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String device_id;
      public query_device_IP_call(String device_id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.device_id = device_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("query_device_IP", org.apache.thrift.protocol.TMessageType.CALL, 0));
        query_device_IP_args args = new query_device_IP_args();
        args.setDevice_id(device_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_query_device_IP();
      }
    }

    public void add_user(String user_name, String passwd, String company, int flag, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      add_user_call method_call = new add_user_call(user_name, passwd, company, flag, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class add_user_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      private String passwd;
      private String company;
      private int flag;
      public add_user_call(String user_name, String passwd, String company, int flag, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
        this.passwd = passwd;
        this.company = company;
        this.flag = flag;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("add_user", org.apache.thrift.protocol.TMessageType.CALL, 0));
        add_user_args args = new add_user_args();
        args.setUser_name(user_name);
        args.setPasswd(passwd);
        args.setCompany(company);
        args.setFlag(flag);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_add_user();
      }
    }

    public void register_service(String user_name, String passwd, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      register_service_call method_call = new register_service_call(user_name, passwd, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class register_service_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String user_name;
      private String passwd;
      public register_service_call(String user_name, String passwd, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user_name = user_name;
        this.passwd = passwd;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("register_service", org.apache.thrift.protocol.TMessageType.CALL, 0));
        register_service_args args = new register_service_args();
        args.setUser_name(user_name);
        args.setPasswd(passwd);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_register_service();
      }
    }

    public void trace_device_update(int num, String device_bagname, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      trace_device_update_call method_call = new trace_device_update_call(num, device_bagname, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class trace_device_update_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int num;
      private String device_bagname;
      public trace_device_update_call(int num, String device_bagname, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.num = num;
        this.device_bagname = device_bagname;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("trace_device_update", org.apache.thrift.protocol.TMessageType.CALL, 0));
        trace_device_update_args args = new trace_device_update_args();
        args.setNum(num);
        args.setDevice_bagname(device_bagname);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_trace_device_update();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getStudentInfo", new getStudentInfo());
      processMap.put("device_reset_certificate", new device_reset_certificate());
      processMap.put("add_test_account", new add_test_account());
      processMap.put("delete_test_account", new delete_test_account());
      processMap.put("select_condition_account", new select_condition_account());
      processMap.put("select_paging_account", new select_paging_account());
      processMap.put("unbundling_equipment", new unbundling_equipment());
      processMap.put("update_device", new update_device());
      processMap.put("update_random_selection", new update_random_selection());
      processMap.put("update_one_user", new update_one_user());
      processMap.put("statistics_update_user_num", new statistics_update_user_num());
      processMap.put("query_online_user", new query_online_user());
      processMap.put("statistics_data", new statistics_data());
      processMap.put("reset_user_level", new reset_user_level());
      processMap.put("query_issuing_certificate_num", new query_issuing_certificate_num());
      processMap.put("query_device_attribute", new query_device_attribute());
      processMap.put("add_mac_msg", new add_mac_msg());
      processMap.put("update_version", new update_version());
      processMap.put("update_country", new update_country());
      processMap.put("device_type_num", new device_type_num());
      processMap.put("query_country_num", new query_country_num());
      processMap.put("create_user_group", new create_user_group());
      processMap.put("delete_user_group", new delete_user_group());
      processMap.put("change_user_group", new change_user_group());
      processMap.put("move_device_user_group", new move_device_user_group());
      processMap.put("action_user_group", new action_user_group());
      processMap.put("init_user_group", new init_user_group());
      processMap.put("add_camera_type", new add_camera_type());
      processMap.put("delete_camera_type", new delete_camera_type());
      processMap.put("change_camera_type", new change_camera_type());
      processMap.put("query_camera_type", new query_camera_type());
      processMap.put("select_paging_camera_type", new select_paging_camera_type());
      processMap.put("query_partner", new query_partner());
      processMap.put("query_partner_device", new query_partner_device());
      processMap.put("delete_partner", new delete_partner());
      processMap.put("query_partner_user", new query_partner_user());
      processMap.put("query_allocate_device", new query_allocate_device());
      processMap.put("partner_allocate_device", new partner_allocate_device());
      processMap.put("Web_mysql_server", new Web_mysql_server());
      processMap.put("partner_recover_device", new partner_recover_device());
      processMap.put("set_issue_id", new set_issue_id());
      processMap.put("query_issue_id", new query_issue_id());
      processMap.put("query_mac_attribute", new query_mac_attribute());
      processMap.put("send_mail", new send_mail());
      processMap.put("update_password", new update_password());
      processMap.put("device_disable", new device_disable());
      processMap.put("device_remove_disable", new device_remove_disable());
      processMap.put("query_device_IP", new query_device_IP());
      processMap.put("add_user", new add_user());
      processMap.put("register_service", new register_service());
      processMap.put("trace_device_update", new trace_device_update());
      return processMap;
    }

    public static class getStudentInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStudentInfo_args> {
      public getStudentInfo() {
        super("getStudentInfo");
      }

      public getStudentInfo_args getEmptyArgsInstance() {
        return new getStudentInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getStudentInfo_result getResult(I iface, getStudentInfo_args args) throws org.apache.thrift.TException {
        getStudentInfo_result result = new getStudentInfo_result();
        result.success = iface.getStudentInfo(args.request);
        return result;
      }
    }

    public static class device_reset_certificate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, device_reset_certificate_args> {
      public device_reset_certificate() {
        super("device_reset_certificate");
      }

      public device_reset_certificate_args getEmptyArgsInstance() {
        return new device_reset_certificate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public device_reset_certificate_result getResult(I iface, device_reset_certificate_args args) throws org.apache.thrift.TException {
        device_reset_certificate_result result = new device_reset_certificate_result();
        result.success = iface.device_reset_certificate(args.mac);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class add_test_account<I extends Iface> extends org.apache.thrift.ProcessFunction<I, add_test_account_args> {
      public add_test_account() {
        super("add_test_account");
      }

      public add_test_account_args getEmptyArgsInstance() {
        return new add_test_account_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public add_test_account_result getResult(I iface, add_test_account_args args) throws org.apache.thrift.TException {
        add_test_account_result result = new add_test_account_result();
        result.success = iface.add_test_account(args.user_name);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class delete_test_account<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delete_test_account_args> {
      public delete_test_account() {
        super("delete_test_account");
      }

      public delete_test_account_args getEmptyArgsInstance() {
        return new delete_test_account_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delete_test_account_result getResult(I iface, delete_test_account_args args) throws org.apache.thrift.TException {
        delete_test_account_result result = new delete_test_account_result();
        result.success = iface.delete_test_account(args.user_name);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class select_condition_account<I extends Iface> extends org.apache.thrift.ProcessFunction<I, select_condition_account_args> {
      public select_condition_account() {
        super("select_condition_account");
      }

      public select_condition_account_args getEmptyArgsInstance() {
        return new select_condition_account_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public select_condition_account_result getResult(I iface, select_condition_account_args args) throws org.apache.thrift.TException {
        select_condition_account_result result = new select_condition_account_result();
        result.success = iface.select_condition_account(args.user_name);
        return result;
      }
    }

    public static class select_paging_account<I extends Iface> extends org.apache.thrift.ProcessFunction<I, select_paging_account_args> {
      public select_paging_account() {
        super("select_paging_account");
      }

      public select_paging_account_args getEmptyArgsInstance() {
        return new select_paging_account_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public select_paging_account_result getResult(I iface, select_paging_account_args args) throws org.apache.thrift.TException {
        select_paging_account_result result = new select_paging_account_result();
        result.success = iface.select_paging_account(args.page, args.strip);
        return result;
      }
    }

    public static class unbundling_equipment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, unbundling_equipment_args> {
      public unbundling_equipment() {
        super("unbundling_equipment");
      }

      public unbundling_equipment_args getEmptyArgsInstance() {
        return new unbundling_equipment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public unbundling_equipment_result getResult(I iface, unbundling_equipment_args args) throws org.apache.thrift.TException {
        unbundling_equipment_result result = new unbundling_equipment_result();
        result.success = iface.unbundling_equipment(args.device_id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class update_device<I extends Iface> extends org.apache.thrift.ProcessFunction<I, update_device_args> {
      public update_device() {
        super("update_device");
      }

      public update_device_args getEmptyArgsInstance() {
        return new update_device_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public update_device_result getResult(I iface, update_device_args args) throws org.apache.thrift.TException {
        update_device_result result = new update_device_result();
        result.success = iface.update_device(args.user_type, args.device_bagname, args.update);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class update_random_selection<I extends Iface> extends org.apache.thrift.ProcessFunction<I, update_random_selection_args> {
      public update_random_selection() {
        super("update_random_selection");
      }

      public update_random_selection_args getEmptyArgsInstance() {
        return new update_random_selection_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public update_random_selection_result getResult(I iface, update_random_selection_args args) throws org.apache.thrift.TException {
        update_random_selection_result result = new update_random_selection_result();
        result.success = iface.update_random_selection(args.num, args.device_bagname, args.mac);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class update_one_user<I extends Iface> extends org.apache.thrift.ProcessFunction<I, update_one_user_args> {
      public update_one_user() {
        super("update_one_user");
      }

      public update_one_user_args getEmptyArgsInstance() {
        return new update_one_user_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public update_one_user_result getResult(I iface, update_one_user_args args) throws org.apache.thrift.TException {
        update_one_user_result result = new update_one_user_result();
        result.success = iface.update_one_user(args.user_name, args.device_bagname);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class statistics_update_user_num<I extends Iface> extends org.apache.thrift.ProcessFunction<I, statistics_update_user_num_args> {
      public statistics_update_user_num() {
        super("statistics_update_user_num");
      }

      public statistics_update_user_num_args getEmptyArgsInstance() {
        return new statistics_update_user_num_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public statistics_update_user_num_result getResult(I iface, statistics_update_user_num_args args) throws org.apache.thrift.TException {
        statistics_update_user_num_result result = new statistics_update_user_num_result();
        result.success = iface.statistics_update_user_num(args.device_bagname);
        return result;
      }
    }

    public static class query_online_user<I extends Iface> extends org.apache.thrift.ProcessFunction<I, query_online_user_args> {
      public query_online_user() {
        super("query_online_user");
      }

      public query_online_user_args getEmptyArgsInstance() {
        return new query_online_user_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public query_online_user_result getResult(I iface, query_online_user_args args) throws org.apache.thrift.TException {
        query_online_user_result result = new query_online_user_result();
        result.success = iface.query_online_user(args.type, args.m_type);
        return result;
      }
    }

    public static class statistics_data<I extends Iface> extends org.apache.thrift.ProcessFunction<I, statistics_data_args> {
      public statistics_data() {
        super("statistics_data");
      }

      public statistics_data_args getEmptyArgsInstance() {
        return new statistics_data_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public statistics_data_result getResult(I iface, statistics_data_args args) throws org.apache.thrift.TException {
        statistics_data_result result = new statistics_data_result();
        result.success = iface.statistics_data(args.device_id);
        return result;
      }
    }

    public static class reset_user_level<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reset_user_level_args> {
      public reset_user_level() {
        super("reset_user_level");
      }

      public reset_user_level_args getEmptyArgsInstance() {
        return new reset_user_level_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reset_user_level_result getResult(I iface, reset_user_level_args args) throws org.apache.thrift.TException {
        reset_user_level_result result = new reset_user_level_result();
        result.success = iface.reset_user_level(args.user_name);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class query_issuing_certificate_num<I extends Iface> extends org.apache.thrift.ProcessFunction<I, query_issuing_certificate_num_args> {
      public query_issuing_certificate_num() {
        super("query_issuing_certificate_num");
      }

      public query_issuing_certificate_num_args getEmptyArgsInstance() {
        return new query_issuing_certificate_num_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public query_issuing_certificate_num_result getResult(I iface, query_issuing_certificate_num_args args) throws org.apache.thrift.TException {
        query_issuing_certificate_num_result result = new query_issuing_certificate_num_result();
        result.success = iface.query_issuing_certificate_num(args.partner, args.mac, args.state, args.num, args.off);
        return result;
      }
    }

    public static class query_device_attribute<I extends Iface> extends org.apache.thrift.ProcessFunction<I, query_device_attribute_args> {
      public query_device_attribute() {
        super("query_device_attribute");
      }

      public query_device_attribute_args getEmptyArgsInstance() {
        return new query_device_attribute_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public query_device_attribute_result getResult(I iface, query_device_attribute_args args) throws org.apache.thrift.TException {
        query_device_attribute_result result = new query_device_attribute_result();
        result.success = iface.query_device_attribute(args.device_id);
        return result;
      }
    }

    public static class add_mac_msg<I extends Iface> extends org.apache.thrift.ProcessFunction<I, add_mac_msg_args> {
      public add_mac_msg() {
        super("add_mac_msg");
      }

      public add_mac_msg_args getEmptyArgsInstance() {
        return new add_mac_msg_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public add_mac_msg_result getResult(I iface, add_mac_msg_args args) throws org.apache.thrift.TException {
        add_mac_msg_result result = new add_mac_msg_result();
        result.success = iface.add_mac_msg(args.msg);
        return result;
      }
    }

    public static class update_version<I extends Iface> extends org.apache.thrift.ProcessFunction<I, update_version_args> {
      public update_version() {
        super("update_version");
      }

      public update_version_args getEmptyArgsInstance() {
        return new update_version_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public update_version_result getResult(I iface, update_version_args args) throws org.apache.thrift.TException {
        update_version_result result = new update_version_result();
        result.success = iface.update_version(args.msg);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class update_country<I extends Iface> extends org.apache.thrift.ProcessFunction<I, update_country_args> {
      public update_country() {
        super("update_country");
      }

      public update_country_args getEmptyArgsInstance() {
        return new update_country_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public update_country_result getResult(I iface, update_country_args args) throws org.apache.thrift.TException {
        update_country_result result = new update_country_result();
        result.success = iface.update_country(args.msg);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class device_type_num<I extends Iface> extends org.apache.thrift.ProcessFunction<I, device_type_num_args> {
      public device_type_num() {
        super("device_type_num");
      }

      public device_type_num_args getEmptyArgsInstance() {
        return new device_type_num_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public device_type_num_result getResult(I iface, device_type_num_args args) throws org.apache.thrift.TException {
        device_type_num_result result = new device_type_num_result();
        result.success = iface.device_type_num(args.partner);
        return result;
      }
    }

    public static class query_country_num<I extends Iface> extends org.apache.thrift.ProcessFunction<I, query_country_num_args> {
      public query_country_num() {
        super("query_country_num");
      }

      public query_country_num_args getEmptyArgsInstance() {
        return new query_country_num_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public query_country_num_result getResult(I iface, query_country_num_args args) throws org.apache.thrift.TException {
        query_country_num_result result = new query_country_num_result();
        result.success = iface.query_country_num(args.partner);
        return result;
      }
    }

    public static class create_user_group<I extends Iface> extends org.apache.thrift.ProcessFunction<I, create_user_group_args> {
      public create_user_group() {
        super("create_user_group");
      }

      public create_user_group_args getEmptyArgsInstance() {
        return new create_user_group_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public create_user_group_result getResult(I iface, create_user_group_args args) throws org.apache.thrift.TException {
        create_user_group_result result = new create_user_group_result();
        result.success = iface.create_user_group(args.group_id, args.group_name);
        return result;
      }
    }

    public static class delete_user_group<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delete_user_group_args> {
      public delete_user_group() {
        super("delete_user_group");
      }

      public delete_user_group_args getEmptyArgsInstance() {
        return new delete_user_group_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delete_user_group_result getResult(I iface, delete_user_group_args args) throws org.apache.thrift.TException {
        delete_user_group_result result = new delete_user_group_result();
        result.success = iface.delete_user_group(args.group_id);
        return result;
      }
    }

    public static class change_user_group<I extends Iface> extends org.apache.thrift.ProcessFunction<I, change_user_group_args> {
      public change_user_group() {
        super("change_user_group");
      }

      public change_user_group_args getEmptyArgsInstance() {
        return new change_user_group_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public change_user_group_result getResult(I iface, change_user_group_args args) throws org.apache.thrift.TException {
        change_user_group_result result = new change_user_group_result();
        result.success = iface.change_user_group(args.group_id, args.group_name);
        return result;
      }
    }

    public static class move_device_user_group<I extends Iface> extends org.apache.thrift.ProcessFunction<I, move_device_user_group_args> {
      public move_device_user_group() {
        super("move_device_user_group");
      }

      public move_device_user_group_args getEmptyArgsInstance() {
        return new move_device_user_group_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public move_device_user_group_result getResult(I iface, move_device_user_group_args args) throws org.apache.thrift.TException {
        move_device_user_group_result result = new move_device_user_group_result();
        result.success = iface.move_device_user_group(args.device_id, args.group_id);
        return result;
      }
    }

    public static class action_user_group<I extends Iface> extends org.apache.thrift.ProcessFunction<I, action_user_group_args> {
      public action_user_group() {
        super("action_user_group");
      }

      public action_user_group_args getEmptyArgsInstance() {
        return new action_user_group_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public action_user_group_result getResult(I iface, action_user_group_args args) throws org.apache.thrift.TException {
        action_user_group_result result = new action_user_group_result();
        result.success = iface.action_user_group(args.group_id);
        return result;
      }
    }

    public static class init_user_group<I extends Iface> extends org.apache.thrift.ProcessFunction<I, init_user_group_args> {
      public init_user_group() {
        super("init_user_group");
      }

      public init_user_group_args getEmptyArgsInstance() {
        return new init_user_group_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public init_user_group_result getResult(I iface, init_user_group_args args) throws org.apache.thrift.TException {
        init_user_group_result result = new init_user_group_result();
        result.success = iface.init_user_group(args.user_name);
        return result;
      }
    }

    public static class add_camera_type<I extends Iface> extends org.apache.thrift.ProcessFunction<I, add_camera_type_args> {
      public add_camera_type() {
        super("add_camera_type");
      }

      public add_camera_type_args getEmptyArgsInstance() {
        return new add_camera_type_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public add_camera_type_result getResult(I iface, add_camera_type_args args) throws org.apache.thrift.TException {
        add_camera_type_result result = new add_camera_type_result();
        result.success = iface.add_camera_type(args.camera_type, args.PanoTypeEx, args.series, args.PanoTilt, args.PTinfo);
        return result;
      }
    }

    public static class delete_camera_type<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delete_camera_type_args> {
      public delete_camera_type() {
        super("delete_camera_type");
      }

      public delete_camera_type_args getEmptyArgsInstance() {
        return new delete_camera_type_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delete_camera_type_result getResult(I iface, delete_camera_type_args args) throws org.apache.thrift.TException {
        delete_camera_type_result result = new delete_camera_type_result();
        result.success = iface.delete_camera_type(args.camera_type);
        return result;
      }
    }

    public static class change_camera_type<I extends Iface> extends org.apache.thrift.ProcessFunction<I, change_camera_type_args> {
      public change_camera_type() {
        super("change_camera_type");
      }

      public change_camera_type_args getEmptyArgsInstance() {
        return new change_camera_type_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public change_camera_type_result getResult(I iface, change_camera_type_args args) throws org.apache.thrift.TException {
        change_camera_type_result result = new change_camera_type_result();
        result.success = iface.change_camera_type(args.camera_type, args.PanoTypeEx, args.series, args.PanoTilt, args.PTinfo);
        return result;
      }
    }

    public static class query_camera_type<I extends Iface> extends org.apache.thrift.ProcessFunction<I, query_camera_type_args> {
      public query_camera_type() {
        super("query_camera_type");
      }

      public query_camera_type_args getEmptyArgsInstance() {
        return new query_camera_type_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public query_camera_type_result getResult(I iface, query_camera_type_args args) throws org.apache.thrift.TException {
        query_camera_type_result result = new query_camera_type_result();
        result.success = iface.query_camera_type(args.camera_type);
        return result;
      }
    }

    public static class select_paging_camera_type<I extends Iface> extends org.apache.thrift.ProcessFunction<I, select_paging_camera_type_args> {
      public select_paging_camera_type() {
        super("select_paging_camera_type");
      }

      public select_paging_camera_type_args getEmptyArgsInstance() {
        return new select_paging_camera_type_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public select_paging_camera_type_result getResult(I iface, select_paging_camera_type_args args) throws org.apache.thrift.TException {
        select_paging_camera_type_result result = new select_paging_camera_type_result();
        result.success = iface.select_paging_camera_type(args.page, args.strip);
        return result;
      }
    }

    public static class query_partner<I extends Iface> extends org.apache.thrift.ProcessFunction<I, query_partner_args> {
      public query_partner() {
        super("query_partner");
      }

      public query_partner_args getEmptyArgsInstance() {
        return new query_partner_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public query_partner_result getResult(I iface, query_partner_args args) throws org.apache.thrift.TException {
        query_partner_result result = new query_partner_result();
        result.success = iface.query_partner(args.partner);
        return result;
      }
    }

    public static class query_partner_device<I extends Iface> extends org.apache.thrift.ProcessFunction<I, query_partner_device_args> {
      public query_partner_device() {
        super("query_partner_device");
      }

      public query_partner_device_args getEmptyArgsInstance() {
        return new query_partner_device_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public query_partner_device_result getResult(I iface, query_partner_device_args args) throws org.apache.thrift.TException {
        query_partner_device_result result = new query_partner_device_result();
        result.success = iface.query_partner_device(args.partner, args.mac, args.state);
        return result;
      }
    }

    public static class delete_partner<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delete_partner_args> {
      public delete_partner() {
        super("delete_partner");
      }

      public delete_partner_args getEmptyArgsInstance() {
        return new delete_partner_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delete_partner_result getResult(I iface, delete_partner_args args) throws org.apache.thrift.TException {
        delete_partner_result result = new delete_partner_result();
        result.success = iface.delete_partner(args.partner);
        return result;
      }
    }

    public static class query_partner_user<I extends Iface> extends org.apache.thrift.ProcessFunction<I, query_partner_user_args> {
      public query_partner_user() {
        super("query_partner_user");
      }

      public query_partner_user_args getEmptyArgsInstance() {
        return new query_partner_user_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public query_partner_user_result getResult(I iface, query_partner_user_args args) throws org.apache.thrift.TException {
        query_partner_user_result result = new query_partner_user_result();
        result.success = iface.query_partner_user(args.partner, args.user_name);
        return result;
      }
    }

    public static class query_allocate_device<I extends Iface> extends org.apache.thrift.ProcessFunction<I, query_allocate_device_args> {
      public query_allocate_device() {
        super("query_allocate_device");
      }

      public query_allocate_device_args getEmptyArgsInstance() {
        return new query_allocate_device_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public query_allocate_device_result getResult(I iface, query_allocate_device_args args) throws org.apache.thrift.TException {
        query_allocate_device_result result = new query_allocate_device_result();
        result.success = iface.query_allocate_device(args.partner);
        return result;
      }
    }

    public static class partner_allocate_device<I extends Iface> extends org.apache.thrift.ProcessFunction<I, partner_allocate_device_args> {
      public partner_allocate_device() {
        super("partner_allocate_device");
      }

      public partner_allocate_device_args getEmptyArgsInstance() {
        return new partner_allocate_device_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public partner_allocate_device_result getResult(I iface, partner_allocate_device_args args) throws org.apache.thrift.TException {
        partner_allocate_device_result result = new partner_allocate_device_result();
        result.success = iface.partner_allocate_device(args.f_partner, args.c_partner, args.mac);
        return result;
      }
    }

    public static class Web_mysql_server<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Web_mysql_server_args> {
      public Web_mysql_server() {
        super("Web_mysql_server");
      }

      public Web_mysql_server_args getEmptyArgsInstance() {
        return new Web_mysql_server_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public Web_mysql_server_result getResult(I iface, Web_mysql_server_args args) throws org.apache.thrift.TException {
        Web_mysql_server_result result = new Web_mysql_server_result();
        result.success = iface.Web_mysql_server(args.buf);
        return result;
      }
    }

    public static class partner_recover_device<I extends Iface> extends org.apache.thrift.ProcessFunction<I, partner_recover_device_args> {
      public partner_recover_device() {
        super("partner_recover_device");
      }

      public partner_recover_device_args getEmptyArgsInstance() {
        return new partner_recover_device_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public partner_recover_device_result getResult(I iface, partner_recover_device_args args) throws org.apache.thrift.TException {
        partner_recover_device_result result = new partner_recover_device_result();
        result.success = iface.partner_recover_device(args.f_partner, args.c_partner, args.mac);
        return result;
      }
    }

    public static class set_issue_id<I extends Iface> extends org.apache.thrift.ProcessFunction<I, set_issue_id_args> {
      public set_issue_id() {
        super("set_issue_id");
      }

      public set_issue_id_args getEmptyArgsInstance() {
        return new set_issue_id_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public set_issue_id_result getResult(I iface, set_issue_id_args args) throws org.apache.thrift.TException {
        set_issue_id_result result = new set_issue_id_result();
        result.success = iface.set_issue_id(args.mac, args.state);
        return result;
      }
    }

    public static class query_issue_id<I extends Iface> extends org.apache.thrift.ProcessFunction<I, query_issue_id_args> {
      public query_issue_id() {
        super("query_issue_id");
      }

      public query_issue_id_args getEmptyArgsInstance() {
        return new query_issue_id_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public query_issue_id_result getResult(I iface, query_issue_id_args args) throws org.apache.thrift.TException {
        query_issue_id_result result = new query_issue_id_result();
        result.success = iface.query_issue_id(args.mac);
        return result;
      }
    }

    public static class query_mac_attribute<I extends Iface> extends org.apache.thrift.ProcessFunction<I, query_mac_attribute_args> {
      public query_mac_attribute() {
        super("query_mac_attribute");
      }

      public query_mac_attribute_args getEmptyArgsInstance() {
        return new query_mac_attribute_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public query_mac_attribute_result getResult(I iface, query_mac_attribute_args args) throws org.apache.thrift.TException {
        query_mac_attribute_result result = new query_mac_attribute_result();
        result.success = iface.query_mac_attribute(args.partner, args.type);
        return result;
      }
    }

    public static class send_mail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, send_mail_args> {
      public send_mail() {
        super("send_mail");
      }

      public send_mail_args getEmptyArgsInstance() {
        return new send_mail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public send_mail_result getResult(I iface, send_mail_args args) throws org.apache.thrift.TException {
        send_mail_result result = new send_mail_result();
        result.success = iface.send_mail(args.buf);
        return result;
      }
    }

    public static class update_password<I extends Iface> extends org.apache.thrift.ProcessFunction<I, update_password_args> {
      public update_password() {
        super("update_password");
      }

      public update_password_args getEmptyArgsInstance() {
        return new update_password_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public update_password_result getResult(I iface, update_password_args args) throws org.apache.thrift.TException {
        update_password_result result = new update_password_result();
        result.success = iface.update_password(args.user_name, args.new_pwd);
        return result;
      }
    }

    public static class device_disable<I extends Iface> extends org.apache.thrift.ProcessFunction<I, device_disable_args> {
      public device_disable() {
        super("device_disable");
      }

      public device_disable_args getEmptyArgsInstance() {
        return new device_disable_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public device_disable_result getResult(I iface, device_disable_args args) throws org.apache.thrift.TException {
        device_disable_result result = new device_disable_result();
        result.success = iface.device_disable(args.mac_start, args.mac_end, args.flag);
        return result;
      }
    }

    public static class device_remove_disable<I extends Iface> extends org.apache.thrift.ProcessFunction<I, device_remove_disable_args> {
      public device_remove_disable() {
        super("device_remove_disable");
      }

      public device_remove_disable_args getEmptyArgsInstance() {
        return new device_remove_disable_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public device_remove_disable_result getResult(I iface, device_remove_disable_args args) throws org.apache.thrift.TException {
        device_remove_disable_result result = new device_remove_disable_result();
        result.success = iface.device_remove_disable(args.mac_start, args.mac_end, args.flag);
        return result;
      }
    }

    public static class query_device_IP<I extends Iface> extends org.apache.thrift.ProcessFunction<I, query_device_IP_args> {
      public query_device_IP() {
        super("query_device_IP");
      }

      public query_device_IP_args getEmptyArgsInstance() {
        return new query_device_IP_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public query_device_IP_result getResult(I iface, query_device_IP_args args) throws org.apache.thrift.TException {
        query_device_IP_result result = new query_device_IP_result();
        result.success = iface.query_device_IP(args.device_id);
        return result;
      }
    }

    public static class add_user<I extends Iface> extends org.apache.thrift.ProcessFunction<I, add_user_args> {
      public add_user() {
        super("add_user");
      }

      public add_user_args getEmptyArgsInstance() {
        return new add_user_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public add_user_result getResult(I iface, add_user_args args) throws org.apache.thrift.TException {
        add_user_result result = new add_user_result();
        result.success = iface.add_user(args.user_name, args.passwd, args.company, args.flag);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class register_service<I extends Iface> extends org.apache.thrift.ProcessFunction<I, register_service_args> {
      public register_service() {
        super("register_service");
      }

      public register_service_args getEmptyArgsInstance() {
        return new register_service_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public register_service_result getResult(I iface, register_service_args args) throws org.apache.thrift.TException {
        register_service_result result = new register_service_result();
        result.success = iface.register_service(args.user_name, args.passwd);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class trace_device_update<I extends Iface> extends org.apache.thrift.ProcessFunction<I, trace_device_update_args> {
      public trace_device_update() {
        super("trace_device_update");
      }

      public trace_device_update_args getEmptyArgsInstance() {
        return new trace_device_update_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public trace_device_update_result getResult(I iface, trace_device_update_args args) throws org.apache.thrift.TException {
        trace_device_update_result result = new trace_device_update_result();
        result.success = iface.trace_device_update(args.num, args.device_bagname);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getStudentInfo", new getStudentInfo());
      processMap.put("device_reset_certificate", new device_reset_certificate());
      processMap.put("add_test_account", new add_test_account());
      processMap.put("delete_test_account", new delete_test_account());
      processMap.put("select_condition_account", new select_condition_account());
      processMap.put("select_paging_account", new select_paging_account());
      processMap.put("unbundling_equipment", new unbundling_equipment());
      processMap.put("update_device", new update_device());
      processMap.put("update_random_selection", new update_random_selection());
      processMap.put("update_one_user", new update_one_user());
      processMap.put("statistics_update_user_num", new statistics_update_user_num());
      processMap.put("query_online_user", new query_online_user());
      processMap.put("statistics_data", new statistics_data());
      processMap.put("reset_user_level", new reset_user_level());
      processMap.put("query_issuing_certificate_num", new query_issuing_certificate_num());
      processMap.put("query_device_attribute", new query_device_attribute());
      processMap.put("add_mac_msg", new add_mac_msg());
      processMap.put("update_version", new update_version());
      processMap.put("update_country", new update_country());
      processMap.put("device_type_num", new device_type_num());
      processMap.put("query_country_num", new query_country_num());
      processMap.put("create_user_group", new create_user_group());
      processMap.put("delete_user_group", new delete_user_group());
      processMap.put("change_user_group", new change_user_group());
      processMap.put("move_device_user_group", new move_device_user_group());
      processMap.put("action_user_group", new action_user_group());
      processMap.put("init_user_group", new init_user_group());
      processMap.put("add_camera_type", new add_camera_type());
      processMap.put("delete_camera_type", new delete_camera_type());
      processMap.put("change_camera_type", new change_camera_type());
      processMap.put("query_camera_type", new query_camera_type());
      processMap.put("select_paging_camera_type", new select_paging_camera_type());
      processMap.put("query_partner", new query_partner());
      processMap.put("query_partner_device", new query_partner_device());
      processMap.put("delete_partner", new delete_partner());
      processMap.put("query_partner_user", new query_partner_user());
      processMap.put("query_allocate_device", new query_allocate_device());
      processMap.put("partner_allocate_device", new partner_allocate_device());
      processMap.put("Web_mysql_server", new Web_mysql_server());
      processMap.put("partner_recover_device", new partner_recover_device());
      processMap.put("set_issue_id", new set_issue_id());
      processMap.put("query_issue_id", new query_issue_id());
      processMap.put("query_mac_attribute", new query_mac_attribute());
      processMap.put("send_mail", new send_mail());
      processMap.put("update_password", new update_password());
      processMap.put("device_disable", new device_disable());
      processMap.put("device_remove_disable", new device_remove_disable());
      processMap.put("query_device_IP", new query_device_IP());
      processMap.put("add_user", new add_user());
      processMap.put("register_service", new register_service());
      processMap.put("trace_device_update", new trace_device_update());
      return processMap;
    }

    public static class getStudentInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getStudentInfo_args, Response> {
      public getStudentInfo() {
        super("getStudentInfo");
      }

      public getStudentInfo_args getEmptyArgsInstance() {
        return new getStudentInfo_args();
      }

      public AsyncMethodCallback<Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Response>() { 
          public void onComplete(Response o) {
            getStudentInfo_result result = new getStudentInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getStudentInfo_result result = new getStudentInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getStudentInfo_args args, org.apache.thrift.async.AsyncMethodCallback<Response> resultHandler) throws TException {
        iface.getStudentInfo(args.request,resultHandler);
      }
    }

    public static class device_reset_certificate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, device_reset_certificate_args, Integer> {
      public device_reset_certificate() {
        super("device_reset_certificate");
      }

      public device_reset_certificate_args getEmptyArgsInstance() {
        return new device_reset_certificate_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            device_reset_certificate_result result = new device_reset_certificate_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            device_reset_certificate_result result = new device_reset_certificate_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, device_reset_certificate_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.device_reset_certificate(args.mac,resultHandler);
      }
    }

    public static class add_test_account<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, add_test_account_args, Integer> {
      public add_test_account() {
        super("add_test_account");
      }

      public add_test_account_args getEmptyArgsInstance() {
        return new add_test_account_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            add_test_account_result result = new add_test_account_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            add_test_account_result result = new add_test_account_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, add_test_account_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.add_test_account(args.user_name,resultHandler);
      }
    }

    public static class delete_test_account<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delete_test_account_args, Integer> {
      public delete_test_account() {
        super("delete_test_account");
      }

      public delete_test_account_args getEmptyArgsInstance() {
        return new delete_test_account_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            delete_test_account_result result = new delete_test_account_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delete_test_account_result result = new delete_test_account_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delete_test_account_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.delete_test_account(args.user_name,resultHandler);
      }
    }

    public static class select_condition_account<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, select_condition_account_args, String> {
      public select_condition_account() {
        super("select_condition_account");
      }

      public select_condition_account_args getEmptyArgsInstance() {
        return new select_condition_account_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            select_condition_account_result result = new select_condition_account_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            select_condition_account_result result = new select_condition_account_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, select_condition_account_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.select_condition_account(args.user_name,resultHandler);
      }
    }

    public static class select_paging_account<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, select_paging_account_args, String> {
      public select_paging_account() {
        super("select_paging_account");
      }

      public select_paging_account_args getEmptyArgsInstance() {
        return new select_paging_account_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            select_paging_account_result result = new select_paging_account_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            select_paging_account_result result = new select_paging_account_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, select_paging_account_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.select_paging_account(args.page, args.strip,resultHandler);
      }
    }

    public static class unbundling_equipment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, unbundling_equipment_args, Integer> {
      public unbundling_equipment() {
        super("unbundling_equipment");
      }

      public unbundling_equipment_args getEmptyArgsInstance() {
        return new unbundling_equipment_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            unbundling_equipment_result result = new unbundling_equipment_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            unbundling_equipment_result result = new unbundling_equipment_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, unbundling_equipment_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.unbundling_equipment(args.device_id,resultHandler);
      }
    }

    public static class update_device<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, update_device_args, Integer> {
      public update_device() {
        super("update_device");
      }

      public update_device_args getEmptyArgsInstance() {
        return new update_device_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            update_device_result result = new update_device_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            update_device_result result = new update_device_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, update_device_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.update_device(args.user_type, args.device_bagname, args.update,resultHandler);
      }
    }

    public static class update_random_selection<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, update_random_selection_args, Integer> {
      public update_random_selection() {
        super("update_random_selection");
      }

      public update_random_selection_args getEmptyArgsInstance() {
        return new update_random_selection_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            update_random_selection_result result = new update_random_selection_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            update_random_selection_result result = new update_random_selection_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, update_random_selection_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.update_random_selection(args.num, args.device_bagname, args.mac,resultHandler);
      }
    }

    public static class update_one_user<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, update_one_user_args, Integer> {
      public update_one_user() {
        super("update_one_user");
      }

      public update_one_user_args getEmptyArgsInstance() {
        return new update_one_user_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            update_one_user_result result = new update_one_user_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            update_one_user_result result = new update_one_user_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, update_one_user_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.update_one_user(args.user_name, args.device_bagname,resultHandler);
      }
    }

    public static class statistics_update_user_num<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, statistics_update_user_num_args, String> {
      public statistics_update_user_num() {
        super("statistics_update_user_num");
      }

      public statistics_update_user_num_args getEmptyArgsInstance() {
        return new statistics_update_user_num_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            statistics_update_user_num_result result = new statistics_update_user_num_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            statistics_update_user_num_result result = new statistics_update_user_num_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, statistics_update_user_num_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.statistics_update_user_num(args.device_bagname,resultHandler);
      }
    }

    public static class query_online_user<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, query_online_user_args, String> {
      public query_online_user() {
        super("query_online_user");
      }

      public query_online_user_args getEmptyArgsInstance() {
        return new query_online_user_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            query_online_user_result result = new query_online_user_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            query_online_user_result result = new query_online_user_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, query_online_user_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.query_online_user(args.type, args.m_type,resultHandler);
      }
    }

    public static class statistics_data<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, statistics_data_args, String> {
      public statistics_data() {
        super("statistics_data");
      }

      public statistics_data_args getEmptyArgsInstance() {
        return new statistics_data_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            statistics_data_result result = new statistics_data_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            statistics_data_result result = new statistics_data_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, statistics_data_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.statistics_data(args.device_id,resultHandler);
      }
    }

    public static class reset_user_level<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reset_user_level_args, Integer> {
      public reset_user_level() {
        super("reset_user_level");
      }

      public reset_user_level_args getEmptyArgsInstance() {
        return new reset_user_level_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            reset_user_level_result result = new reset_user_level_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reset_user_level_result result = new reset_user_level_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reset_user_level_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.reset_user_level(args.user_name,resultHandler);
      }
    }

    public static class query_issuing_certificate_num<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, query_issuing_certificate_num_args, String> {
      public query_issuing_certificate_num() {
        super("query_issuing_certificate_num");
      }

      public query_issuing_certificate_num_args getEmptyArgsInstance() {
        return new query_issuing_certificate_num_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            query_issuing_certificate_num_result result = new query_issuing_certificate_num_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            query_issuing_certificate_num_result result = new query_issuing_certificate_num_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, query_issuing_certificate_num_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.query_issuing_certificate_num(args.partner, args.mac, args.state, args.num, args.off,resultHandler);
      }
    }

    public static class query_device_attribute<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, query_device_attribute_args, String> {
      public query_device_attribute() {
        super("query_device_attribute");
      }

      public query_device_attribute_args getEmptyArgsInstance() {
        return new query_device_attribute_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            query_device_attribute_result result = new query_device_attribute_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            query_device_attribute_result result = new query_device_attribute_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, query_device_attribute_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.query_device_attribute(args.device_id,resultHandler);
      }
    }

    public static class add_mac_msg<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, add_mac_msg_args, String> {
      public add_mac_msg() {
        super("add_mac_msg");
      }

      public add_mac_msg_args getEmptyArgsInstance() {
        return new add_mac_msg_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            add_mac_msg_result result = new add_mac_msg_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            add_mac_msg_result result = new add_mac_msg_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, add_mac_msg_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.add_mac_msg(args.msg,resultHandler);
      }
    }

    public static class update_version<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, update_version_args, Integer> {
      public update_version() {
        super("update_version");
      }

      public update_version_args getEmptyArgsInstance() {
        return new update_version_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            update_version_result result = new update_version_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            update_version_result result = new update_version_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, update_version_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.update_version(args.msg,resultHandler);
      }
    }

    public static class update_country<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, update_country_args, Integer> {
      public update_country() {
        super("update_country");
      }

      public update_country_args getEmptyArgsInstance() {
        return new update_country_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            update_country_result result = new update_country_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            update_country_result result = new update_country_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, update_country_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.update_country(args.msg,resultHandler);
      }
    }

    public static class device_type_num<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, device_type_num_args, String> {
      public device_type_num() {
        super("device_type_num");
      }

      public device_type_num_args getEmptyArgsInstance() {
        return new device_type_num_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            device_type_num_result result = new device_type_num_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            device_type_num_result result = new device_type_num_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, device_type_num_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.device_type_num(args.partner,resultHandler);
      }
    }

    public static class query_country_num<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, query_country_num_args, String> {
      public query_country_num() {
        super("query_country_num");
      }

      public query_country_num_args getEmptyArgsInstance() {
        return new query_country_num_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            query_country_num_result result = new query_country_num_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            query_country_num_result result = new query_country_num_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, query_country_num_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.query_country_num(args.partner,resultHandler);
      }
    }

    public static class create_user_group<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, create_user_group_args, String> {
      public create_user_group() {
        super("create_user_group");
      }

      public create_user_group_args getEmptyArgsInstance() {
        return new create_user_group_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            create_user_group_result result = new create_user_group_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            create_user_group_result result = new create_user_group_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, create_user_group_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.create_user_group(args.group_id, args.group_name,resultHandler);
      }
    }

    public static class delete_user_group<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delete_user_group_args, String> {
      public delete_user_group() {
        super("delete_user_group");
      }

      public delete_user_group_args getEmptyArgsInstance() {
        return new delete_user_group_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            delete_user_group_result result = new delete_user_group_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delete_user_group_result result = new delete_user_group_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delete_user_group_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.delete_user_group(args.group_id,resultHandler);
      }
    }

    public static class change_user_group<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, change_user_group_args, String> {
      public change_user_group() {
        super("change_user_group");
      }

      public change_user_group_args getEmptyArgsInstance() {
        return new change_user_group_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            change_user_group_result result = new change_user_group_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            change_user_group_result result = new change_user_group_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, change_user_group_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.change_user_group(args.group_id, args.group_name,resultHandler);
      }
    }

    public static class move_device_user_group<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, move_device_user_group_args, String> {
      public move_device_user_group() {
        super("move_device_user_group");
      }

      public move_device_user_group_args getEmptyArgsInstance() {
        return new move_device_user_group_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            move_device_user_group_result result = new move_device_user_group_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            move_device_user_group_result result = new move_device_user_group_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, move_device_user_group_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.move_device_user_group(args.device_id, args.group_id,resultHandler);
      }
    }

    public static class action_user_group<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, action_user_group_args, String> {
      public action_user_group() {
        super("action_user_group");
      }

      public action_user_group_args getEmptyArgsInstance() {
        return new action_user_group_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            action_user_group_result result = new action_user_group_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            action_user_group_result result = new action_user_group_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, action_user_group_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.action_user_group(args.group_id,resultHandler);
      }
    }

    public static class init_user_group<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, init_user_group_args, String> {
      public init_user_group() {
        super("init_user_group");
      }

      public init_user_group_args getEmptyArgsInstance() {
        return new init_user_group_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            init_user_group_result result = new init_user_group_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            init_user_group_result result = new init_user_group_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, init_user_group_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.init_user_group(args.user_name,resultHandler);
      }
    }

    public static class add_camera_type<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, add_camera_type_args, String> {
      public add_camera_type() {
        super("add_camera_type");
      }

      public add_camera_type_args getEmptyArgsInstance() {
        return new add_camera_type_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            add_camera_type_result result = new add_camera_type_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            add_camera_type_result result = new add_camera_type_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, add_camera_type_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.add_camera_type(args.camera_type, args.PanoTypeEx, args.series, args.PanoTilt, args.PTinfo,resultHandler);
      }
    }

    public static class delete_camera_type<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delete_camera_type_args, String> {
      public delete_camera_type() {
        super("delete_camera_type");
      }

      public delete_camera_type_args getEmptyArgsInstance() {
        return new delete_camera_type_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            delete_camera_type_result result = new delete_camera_type_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delete_camera_type_result result = new delete_camera_type_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delete_camera_type_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.delete_camera_type(args.camera_type,resultHandler);
      }
    }

    public static class change_camera_type<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, change_camera_type_args, String> {
      public change_camera_type() {
        super("change_camera_type");
      }

      public change_camera_type_args getEmptyArgsInstance() {
        return new change_camera_type_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            change_camera_type_result result = new change_camera_type_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            change_camera_type_result result = new change_camera_type_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, change_camera_type_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.change_camera_type(args.camera_type, args.PanoTypeEx, args.series, args.PanoTilt, args.PTinfo,resultHandler);
      }
    }

    public static class query_camera_type<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, query_camera_type_args, String> {
      public query_camera_type() {
        super("query_camera_type");
      }

      public query_camera_type_args getEmptyArgsInstance() {
        return new query_camera_type_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            query_camera_type_result result = new query_camera_type_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            query_camera_type_result result = new query_camera_type_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, query_camera_type_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.query_camera_type(args.camera_type,resultHandler);
      }
    }

    public static class select_paging_camera_type<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, select_paging_camera_type_args, String> {
      public select_paging_camera_type() {
        super("select_paging_camera_type");
      }

      public select_paging_camera_type_args getEmptyArgsInstance() {
        return new select_paging_camera_type_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            select_paging_camera_type_result result = new select_paging_camera_type_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            select_paging_camera_type_result result = new select_paging_camera_type_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, select_paging_camera_type_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.select_paging_camera_type(args.page, args.strip,resultHandler);
      }
    }

    public static class query_partner<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, query_partner_args, String> {
      public query_partner() {
        super("query_partner");
      }

      public query_partner_args getEmptyArgsInstance() {
        return new query_partner_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            query_partner_result result = new query_partner_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            query_partner_result result = new query_partner_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, query_partner_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.query_partner(args.partner,resultHandler);
      }
    }

    public static class query_partner_device<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, query_partner_device_args, String> {
      public query_partner_device() {
        super("query_partner_device");
      }

      public query_partner_device_args getEmptyArgsInstance() {
        return new query_partner_device_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            query_partner_device_result result = new query_partner_device_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            query_partner_device_result result = new query_partner_device_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, query_partner_device_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.query_partner_device(args.partner, args.mac, args.state,resultHandler);
      }
    }

    public static class delete_partner<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delete_partner_args, String> {
      public delete_partner() {
        super("delete_partner");
      }

      public delete_partner_args getEmptyArgsInstance() {
        return new delete_partner_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            delete_partner_result result = new delete_partner_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delete_partner_result result = new delete_partner_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delete_partner_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.delete_partner(args.partner,resultHandler);
      }
    }

    public static class query_partner_user<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, query_partner_user_args, String> {
      public query_partner_user() {
        super("query_partner_user");
      }

      public query_partner_user_args getEmptyArgsInstance() {
        return new query_partner_user_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            query_partner_user_result result = new query_partner_user_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            query_partner_user_result result = new query_partner_user_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, query_partner_user_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.query_partner_user(args.partner, args.user_name,resultHandler);
      }
    }

    public static class query_allocate_device<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, query_allocate_device_args, String> {
      public query_allocate_device() {
        super("query_allocate_device");
      }

      public query_allocate_device_args getEmptyArgsInstance() {
        return new query_allocate_device_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            query_allocate_device_result result = new query_allocate_device_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            query_allocate_device_result result = new query_allocate_device_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, query_allocate_device_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.query_allocate_device(args.partner,resultHandler);
      }
    }

    public static class partner_allocate_device<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, partner_allocate_device_args, String> {
      public partner_allocate_device() {
        super("partner_allocate_device");
      }

      public partner_allocate_device_args getEmptyArgsInstance() {
        return new partner_allocate_device_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            partner_allocate_device_result result = new partner_allocate_device_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            partner_allocate_device_result result = new partner_allocate_device_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, partner_allocate_device_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.partner_allocate_device(args.f_partner, args.c_partner, args.mac,resultHandler);
      }
    }

    public static class Web_mysql_server<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Web_mysql_server_args, String> {
      public Web_mysql_server() {
        super("Web_mysql_server");
      }

      public Web_mysql_server_args getEmptyArgsInstance() {
        return new Web_mysql_server_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            Web_mysql_server_result result = new Web_mysql_server_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            Web_mysql_server_result result = new Web_mysql_server_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Web_mysql_server_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.Web_mysql_server(args.buf,resultHandler);
      }
    }

    public static class partner_recover_device<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, partner_recover_device_args, String> {
      public partner_recover_device() {
        super("partner_recover_device");
      }

      public partner_recover_device_args getEmptyArgsInstance() {
        return new partner_recover_device_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            partner_recover_device_result result = new partner_recover_device_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            partner_recover_device_result result = new partner_recover_device_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, partner_recover_device_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.partner_recover_device(args.f_partner, args.c_partner, args.mac,resultHandler);
      }
    }

    public static class set_issue_id<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, set_issue_id_args, String> {
      public set_issue_id() {
        super("set_issue_id");
      }

      public set_issue_id_args getEmptyArgsInstance() {
        return new set_issue_id_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            set_issue_id_result result = new set_issue_id_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            set_issue_id_result result = new set_issue_id_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, set_issue_id_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.set_issue_id(args.mac, args.state,resultHandler);
      }
    }

    public static class query_issue_id<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, query_issue_id_args, String> {
      public query_issue_id() {
        super("query_issue_id");
      }

      public query_issue_id_args getEmptyArgsInstance() {
        return new query_issue_id_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            query_issue_id_result result = new query_issue_id_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            query_issue_id_result result = new query_issue_id_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, query_issue_id_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.query_issue_id(args.mac,resultHandler);
      }
    }

    public static class query_mac_attribute<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, query_mac_attribute_args, String> {
      public query_mac_attribute() {
        super("query_mac_attribute");
      }

      public query_mac_attribute_args getEmptyArgsInstance() {
        return new query_mac_attribute_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            query_mac_attribute_result result = new query_mac_attribute_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            query_mac_attribute_result result = new query_mac_attribute_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, query_mac_attribute_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.query_mac_attribute(args.partner, args.type,resultHandler);
      }
    }

    public static class send_mail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, send_mail_args, String> {
      public send_mail() {
        super("send_mail");
      }

      public send_mail_args getEmptyArgsInstance() {
        return new send_mail_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            send_mail_result result = new send_mail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            send_mail_result result = new send_mail_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, send_mail_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.send_mail(args.buf,resultHandler);
      }
    }

    public static class update_password<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, update_password_args, String> {
      public update_password() {
        super("update_password");
      }

      public update_password_args getEmptyArgsInstance() {
        return new update_password_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            update_password_result result = new update_password_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            update_password_result result = new update_password_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, update_password_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.update_password(args.user_name, args.new_pwd,resultHandler);
      }
    }

    public static class device_disable<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, device_disable_args, String> {
      public device_disable() {
        super("device_disable");
      }

      public device_disable_args getEmptyArgsInstance() {
        return new device_disable_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            device_disable_result result = new device_disable_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            device_disable_result result = new device_disable_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, device_disable_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.device_disable(args.mac_start, args.mac_end, args.flag,resultHandler);
      }
    }

    public static class device_remove_disable<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, device_remove_disable_args, String> {
      public device_remove_disable() {
        super("device_remove_disable");
      }

      public device_remove_disable_args getEmptyArgsInstance() {
        return new device_remove_disable_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            device_remove_disable_result result = new device_remove_disable_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            device_remove_disable_result result = new device_remove_disable_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, device_remove_disable_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.device_remove_disable(args.mac_start, args.mac_end, args.flag,resultHandler);
      }
    }

    public static class query_device_IP<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, query_device_IP_args, String> {
      public query_device_IP() {
        super("query_device_IP");
      }

      public query_device_IP_args getEmptyArgsInstance() {
        return new query_device_IP_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            query_device_IP_result result = new query_device_IP_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            query_device_IP_result result = new query_device_IP_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, query_device_IP_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.query_device_IP(args.device_id,resultHandler);
      }
    }

    public static class add_user<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, add_user_args, Integer> {
      public add_user() {
        super("add_user");
      }

      public add_user_args getEmptyArgsInstance() {
        return new add_user_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            add_user_result result = new add_user_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            add_user_result result = new add_user_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, add_user_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.add_user(args.user_name, args.passwd, args.company, args.flag,resultHandler);
      }
    }

    public static class register_service<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, register_service_args, Integer> {
      public register_service() {
        super("register_service");
      }

      public register_service_args getEmptyArgsInstance() {
        return new register_service_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            register_service_result result = new register_service_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            register_service_result result = new register_service_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, register_service_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.register_service(args.user_name, args.passwd,resultHandler);
      }
    }

    public static class trace_device_update<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, trace_device_update_args, String> {
      public trace_device_update() {
        super("trace_device_update");
      }

      public trace_device_update_args getEmptyArgsInstance() {
        return new trace_device_update_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            trace_device_update_result result = new trace_device_update_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            trace_device_update_result result = new trace_device_update_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, trace_device_update_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.trace_device_update(args.num, args.device_bagname,resultHandler);
      }
    }

  }

  public static class getStudentInfo_args implements org.apache.thrift.TBase<getStudentInfo_args, getStudentInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getStudentInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStudentInfo_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStudentInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStudentInfo_argsTupleSchemeFactory());
    }

    public Request request; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST((short)1, "request");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST
            return REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Request.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStudentInfo_args.class, metaDataMap);
    }

    public getStudentInfo_args() {
    }

    public getStudentInfo_args(
      Request request)
    {
      this();
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStudentInfo_args(getStudentInfo_args other) {
      if (other.isSetRequest()) {
        this.request = new Request(other.request);
      }
    }

    public getStudentInfo_args deepCopy() {
      return new getStudentInfo_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
    }

    public Request getRequest() {
      return this.request;
    }

    public getStudentInfo_args setRequest(Request request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((Request)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST:
        return getRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST:
        return isSetRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStudentInfo_args)
        return this.equals((getStudentInfo_args)that);
      return false;
    }

    public boolean equals(getStudentInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_request = true && (isSetRequest());
      list.add(present_request);
      if (present_request)
        list.add(request);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStudentInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStudentInfo_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStudentInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getStudentInfo_argsStandardScheme getScheme() {
        return new getStudentInfo_argsStandardScheme();
      }
    }

    private static class getStudentInfo_argsStandardScheme extends StandardScheme<getStudentInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStudentInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new Request();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStudentInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStudentInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getStudentInfo_argsTupleScheme getScheme() {
        return new getStudentInfo_argsTupleScheme();
      }
    }

    private static class getStudentInfo_argsTupleScheme extends TupleScheme<getStudentInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStudentInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStudentInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.request = new Request();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
      }
    }

  }

  public static class getStudentInfo_result implements org.apache.thrift.TBase<getStudentInfo_result, getStudentInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getStudentInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStudentInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStudentInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStudentInfo_resultTupleSchemeFactory());
    }

    public Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStudentInfo_result.class, metaDataMap);
    }

    public getStudentInfo_result() {
    }

    public getStudentInfo_result(
      Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStudentInfo_result(getStudentInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new Response(other.success);
      }
    }

    public getStudentInfo_result deepCopy() {
      return new getStudentInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Response getSuccess() {
      return this.success;
    }

    public getStudentInfo_result setSuccess(Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStudentInfo_result)
        return this.equals((getStudentInfo_result)that);
      return false;
    }

    public boolean equals(getStudentInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStudentInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStudentInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStudentInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getStudentInfo_resultStandardScheme getScheme() {
        return new getStudentInfo_resultStandardScheme();
      }
    }

    private static class getStudentInfo_resultStandardScheme extends StandardScheme<getStudentInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStudentInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStudentInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStudentInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getStudentInfo_resultTupleScheme getScheme() {
        return new getStudentInfo_resultTupleScheme();
      }
    }

    private static class getStudentInfo_resultTupleScheme extends TupleScheme<getStudentInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStudentInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStudentInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class device_reset_certificate_args implements org.apache.thrift.TBase<device_reset_certificate_args, device_reset_certificate_args._Fields>, java.io.Serializable, Cloneable, Comparable<device_reset_certificate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("device_reset_certificate_args");

    private static final org.apache.thrift.protocol.TField MAC_FIELD_DESC = new org.apache.thrift.protocol.TField("mac", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new device_reset_certificate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new device_reset_certificate_argsTupleSchemeFactory());
    }

    public String mac; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MAC((short)1, "mac");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MAC
            return MAC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MAC, new org.apache.thrift.meta_data.FieldMetaData("mac", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(device_reset_certificate_args.class, metaDataMap);
    }

    public device_reset_certificate_args() {
    }

    public device_reset_certificate_args(
      String mac)
    {
      this();
      this.mac = mac;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public device_reset_certificate_args(device_reset_certificate_args other) {
      if (other.isSetMac()) {
        this.mac = other.mac;
      }
    }

    public device_reset_certificate_args deepCopy() {
      return new device_reset_certificate_args(this);
    }

    @Override
    public void clear() {
      this.mac = null;
    }

    public String getMac() {
      return this.mac;
    }

    public device_reset_certificate_args setMac(String mac) {
      this.mac = mac;
      return this;
    }

    public void unsetMac() {
      this.mac = null;
    }

    /** Returns true if field mac is set (has been assigned a value) and false otherwise */
    public boolean isSetMac() {
      return this.mac != null;
    }

    public void setMacIsSet(boolean value) {
      if (!value) {
        this.mac = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MAC:
        if (value == null) {
          unsetMac();
        } else {
          setMac((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MAC:
        return getMac();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MAC:
        return isSetMac();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof device_reset_certificate_args)
        return this.equals((device_reset_certificate_args)that);
      return false;
    }

    public boolean equals(device_reset_certificate_args that) {
      if (that == null)
        return false;

      boolean this_present_mac = true && this.isSetMac();
      boolean that_present_mac = true && that.isSetMac();
      if (this_present_mac || that_present_mac) {
        if (!(this_present_mac && that_present_mac))
          return false;
        if (!this.mac.equals(that.mac))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_mac = true && (isSetMac());
      list.add(present_mac);
      if (present_mac)
        list.add(mac);

      return list.hashCode();
    }

    @Override
    public int compareTo(device_reset_certificate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMac()).compareTo(other.isSetMac());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMac()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mac, other.mac);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("device_reset_certificate_args(");
      boolean first = true;

      sb.append("mac:");
      if (this.mac == null) {
        sb.append("null");
      } else {
        sb.append(this.mac);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class device_reset_certificate_argsStandardSchemeFactory implements SchemeFactory {
      public device_reset_certificate_argsStandardScheme getScheme() {
        return new device_reset_certificate_argsStandardScheme();
      }
    }

    private static class device_reset_certificate_argsStandardScheme extends StandardScheme<device_reset_certificate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, device_reset_certificate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MAC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mac = iprot.readString();
                struct.setMacIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, device_reset_certificate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mac != null) {
          oprot.writeFieldBegin(MAC_FIELD_DESC);
          oprot.writeString(struct.mac);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class device_reset_certificate_argsTupleSchemeFactory implements SchemeFactory {
      public device_reset_certificate_argsTupleScheme getScheme() {
        return new device_reset_certificate_argsTupleScheme();
      }
    }

    private static class device_reset_certificate_argsTupleScheme extends TupleScheme<device_reset_certificate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, device_reset_certificate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMac()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMac()) {
          oprot.writeString(struct.mac);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, device_reset_certificate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.mac = iprot.readString();
          struct.setMacIsSet(true);
        }
      }
    }

  }

  public static class device_reset_certificate_result implements org.apache.thrift.TBase<device_reset_certificate_result, device_reset_certificate_result._Fields>, java.io.Serializable, Cloneable, Comparable<device_reset_certificate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("device_reset_certificate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new device_reset_certificate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new device_reset_certificate_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(device_reset_certificate_result.class, metaDataMap);
    }

    public device_reset_certificate_result() {
    }

    public device_reset_certificate_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public device_reset_certificate_result(device_reset_certificate_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public device_reset_certificate_result deepCopy() {
      return new device_reset_certificate_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public device_reset_certificate_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof device_reset_certificate_result)
        return this.equals((device_reset_certificate_result)that);
      return false;
    }

    public boolean equals(device_reset_certificate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(device_reset_certificate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("device_reset_certificate_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class device_reset_certificate_resultStandardSchemeFactory implements SchemeFactory {
      public device_reset_certificate_resultStandardScheme getScheme() {
        return new device_reset_certificate_resultStandardScheme();
      }
    }

    private static class device_reset_certificate_resultStandardScheme extends StandardScheme<device_reset_certificate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, device_reset_certificate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, device_reset_certificate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class device_reset_certificate_resultTupleSchemeFactory implements SchemeFactory {
      public device_reset_certificate_resultTupleScheme getScheme() {
        return new device_reset_certificate_resultTupleScheme();
      }
    }

    private static class device_reset_certificate_resultTupleScheme extends TupleScheme<device_reset_certificate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, device_reset_certificate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, device_reset_certificate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class add_test_account_args implements org.apache.thrift.TBase<add_test_account_args, add_test_account_args._Fields>, java.io.Serializable, Cloneable, Comparable<add_test_account_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("add_test_account_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new add_test_account_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new add_test_account_argsTupleSchemeFactory());
    }

    public String user_name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(add_test_account_args.class, metaDataMap);
    }

    public add_test_account_args() {
    }

    public add_test_account_args(
      String user_name)
    {
      this();
      this.user_name = user_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public add_test_account_args(add_test_account_args other) {
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
    }

    public add_test_account_args deepCopy() {
      return new add_test_account_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public add_test_account_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof add_test_account_args)
        return this.equals((add_test_account_args)that);
      return false;
    }

    public boolean equals(add_test_account_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_user_name = true && (isSetUser_name());
      list.add(present_user_name);
      if (present_user_name)
        list.add(user_name);

      return list.hashCode();
    }

    @Override
    public int compareTo(add_test_account_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(other.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, other.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("add_test_account_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class add_test_account_argsStandardSchemeFactory implements SchemeFactory {
      public add_test_account_argsStandardScheme getScheme() {
        return new add_test_account_argsStandardScheme();
      }
    }

    private static class add_test_account_argsStandardScheme extends StandardScheme<add_test_account_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, add_test_account_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, add_test_account_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class add_test_account_argsTupleSchemeFactory implements SchemeFactory {
      public add_test_account_argsTupleScheme getScheme() {
        return new add_test_account_argsTupleScheme();
      }
    }

    private static class add_test_account_argsTupleScheme extends TupleScheme<add_test_account_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, add_test_account_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, add_test_account_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
      }
    }

  }

  public static class add_test_account_result implements org.apache.thrift.TBase<add_test_account_result, add_test_account_result._Fields>, java.io.Serializable, Cloneable, Comparable<add_test_account_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("add_test_account_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new add_test_account_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new add_test_account_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(add_test_account_result.class, metaDataMap);
    }

    public add_test_account_result() {
    }

    public add_test_account_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public add_test_account_result(add_test_account_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public add_test_account_result deepCopy() {
      return new add_test_account_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public add_test_account_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof add_test_account_result)
        return this.equals((add_test_account_result)that);
      return false;
    }

    public boolean equals(add_test_account_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(add_test_account_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("add_test_account_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class add_test_account_resultStandardSchemeFactory implements SchemeFactory {
      public add_test_account_resultStandardScheme getScheme() {
        return new add_test_account_resultStandardScheme();
      }
    }

    private static class add_test_account_resultStandardScheme extends StandardScheme<add_test_account_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, add_test_account_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, add_test_account_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class add_test_account_resultTupleSchemeFactory implements SchemeFactory {
      public add_test_account_resultTupleScheme getScheme() {
        return new add_test_account_resultTupleScheme();
      }
    }

    private static class add_test_account_resultTupleScheme extends TupleScheme<add_test_account_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, add_test_account_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, add_test_account_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delete_test_account_args implements org.apache.thrift.TBase<delete_test_account_args, delete_test_account_args._Fields>, java.io.Serializable, Cloneable, Comparable<delete_test_account_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delete_test_account_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delete_test_account_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delete_test_account_argsTupleSchemeFactory());
    }

    public String user_name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delete_test_account_args.class, metaDataMap);
    }

    public delete_test_account_args() {
    }

    public delete_test_account_args(
      String user_name)
    {
      this();
      this.user_name = user_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delete_test_account_args(delete_test_account_args other) {
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
    }

    public delete_test_account_args deepCopy() {
      return new delete_test_account_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public delete_test_account_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delete_test_account_args)
        return this.equals((delete_test_account_args)that);
      return false;
    }

    public boolean equals(delete_test_account_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_user_name = true && (isSetUser_name());
      list.add(present_user_name);
      if (present_user_name)
        list.add(user_name);

      return list.hashCode();
    }

    @Override
    public int compareTo(delete_test_account_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(other.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, other.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delete_test_account_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delete_test_account_argsStandardSchemeFactory implements SchemeFactory {
      public delete_test_account_argsStandardScheme getScheme() {
        return new delete_test_account_argsStandardScheme();
      }
    }

    private static class delete_test_account_argsStandardScheme extends StandardScheme<delete_test_account_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delete_test_account_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delete_test_account_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delete_test_account_argsTupleSchemeFactory implements SchemeFactory {
      public delete_test_account_argsTupleScheme getScheme() {
        return new delete_test_account_argsTupleScheme();
      }
    }

    private static class delete_test_account_argsTupleScheme extends TupleScheme<delete_test_account_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delete_test_account_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delete_test_account_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
      }
    }

  }

  public static class delete_test_account_result implements org.apache.thrift.TBase<delete_test_account_result, delete_test_account_result._Fields>, java.io.Serializable, Cloneable, Comparable<delete_test_account_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delete_test_account_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delete_test_account_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delete_test_account_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delete_test_account_result.class, metaDataMap);
    }

    public delete_test_account_result() {
    }

    public delete_test_account_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delete_test_account_result(delete_test_account_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public delete_test_account_result deepCopy() {
      return new delete_test_account_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public delete_test_account_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delete_test_account_result)
        return this.equals((delete_test_account_result)that);
      return false;
    }

    public boolean equals(delete_test_account_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(delete_test_account_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delete_test_account_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delete_test_account_resultStandardSchemeFactory implements SchemeFactory {
      public delete_test_account_resultStandardScheme getScheme() {
        return new delete_test_account_resultStandardScheme();
      }
    }

    private static class delete_test_account_resultStandardScheme extends StandardScheme<delete_test_account_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delete_test_account_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delete_test_account_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delete_test_account_resultTupleSchemeFactory implements SchemeFactory {
      public delete_test_account_resultTupleScheme getScheme() {
        return new delete_test_account_resultTupleScheme();
      }
    }

    private static class delete_test_account_resultTupleScheme extends TupleScheme<delete_test_account_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delete_test_account_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delete_test_account_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class select_condition_account_args implements org.apache.thrift.TBase<select_condition_account_args, select_condition_account_args._Fields>, java.io.Serializable, Cloneable, Comparable<select_condition_account_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("select_condition_account_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new select_condition_account_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new select_condition_account_argsTupleSchemeFactory());
    }

    public String user_name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(select_condition_account_args.class, metaDataMap);
    }

    public select_condition_account_args() {
    }

    public select_condition_account_args(
      String user_name)
    {
      this();
      this.user_name = user_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public select_condition_account_args(select_condition_account_args other) {
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
    }

    public select_condition_account_args deepCopy() {
      return new select_condition_account_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public select_condition_account_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof select_condition_account_args)
        return this.equals((select_condition_account_args)that);
      return false;
    }

    public boolean equals(select_condition_account_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_user_name = true && (isSetUser_name());
      list.add(present_user_name);
      if (present_user_name)
        list.add(user_name);

      return list.hashCode();
    }

    @Override
    public int compareTo(select_condition_account_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(other.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, other.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("select_condition_account_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class select_condition_account_argsStandardSchemeFactory implements SchemeFactory {
      public select_condition_account_argsStandardScheme getScheme() {
        return new select_condition_account_argsStandardScheme();
      }
    }

    private static class select_condition_account_argsStandardScheme extends StandardScheme<select_condition_account_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, select_condition_account_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, select_condition_account_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class select_condition_account_argsTupleSchemeFactory implements SchemeFactory {
      public select_condition_account_argsTupleScheme getScheme() {
        return new select_condition_account_argsTupleScheme();
      }
    }

    private static class select_condition_account_argsTupleScheme extends TupleScheme<select_condition_account_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, select_condition_account_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, select_condition_account_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
      }
    }

  }

  public static class select_condition_account_result implements org.apache.thrift.TBase<select_condition_account_result, select_condition_account_result._Fields>, java.io.Serializable, Cloneable, Comparable<select_condition_account_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("select_condition_account_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new select_condition_account_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new select_condition_account_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(select_condition_account_result.class, metaDataMap);
    }

    public select_condition_account_result() {
    }

    public select_condition_account_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public select_condition_account_result(select_condition_account_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public select_condition_account_result deepCopy() {
      return new select_condition_account_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public select_condition_account_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof select_condition_account_result)
        return this.equals((select_condition_account_result)that);
      return false;
    }

    public boolean equals(select_condition_account_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(select_condition_account_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("select_condition_account_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class select_condition_account_resultStandardSchemeFactory implements SchemeFactory {
      public select_condition_account_resultStandardScheme getScheme() {
        return new select_condition_account_resultStandardScheme();
      }
    }

    private static class select_condition_account_resultStandardScheme extends StandardScheme<select_condition_account_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, select_condition_account_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, select_condition_account_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class select_condition_account_resultTupleSchemeFactory implements SchemeFactory {
      public select_condition_account_resultTupleScheme getScheme() {
        return new select_condition_account_resultTupleScheme();
      }
    }

    private static class select_condition_account_resultTupleScheme extends TupleScheme<select_condition_account_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, select_condition_account_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, select_condition_account_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class select_paging_account_args implements org.apache.thrift.TBase<select_paging_account_args, select_paging_account_args._Fields>, java.io.Serializable, Cloneable, Comparable<select_paging_account_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("select_paging_account_args");

    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STRIP_FIELD_DESC = new org.apache.thrift.protocol.TField("strip", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new select_paging_account_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new select_paging_account_argsTupleSchemeFactory());
    }

    public int page; // required
    public int strip; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE((short)1, "page"),
      STRIP((short)2, "strip");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE
            return PAGE;
          case 2: // STRIP
            return STRIP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGE_ISSET_ID = 0;
    private static final int __STRIP_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STRIP, new org.apache.thrift.meta_data.FieldMetaData("strip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(select_paging_account_args.class, metaDataMap);
    }

    public select_paging_account_args() {
    }

    public select_paging_account_args(
      int page,
      int strip)
    {
      this();
      this.page = page;
      setPageIsSet(true);
      this.strip = strip;
      setStripIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public select_paging_account_args(select_paging_account_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.page = other.page;
      this.strip = other.strip;
    }

    public select_paging_account_args deepCopy() {
      return new select_paging_account_args(this);
    }

    @Override
    public void clear() {
      setPageIsSet(false);
      this.page = 0;
      setStripIsSet(false);
      this.strip = 0;
    }

    public int getPage() {
      return this.page;
    }

    public select_paging_account_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
    }

    public int getStrip() {
      return this.strip;
    }

    public select_paging_account_args setStrip(int strip) {
      this.strip = strip;
      setStripIsSet(true);
      return this;
    }

    public void unsetStrip() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRIP_ISSET_ID);
    }

    /** Returns true if field strip is set (has been assigned a value) and false otherwise */
    public boolean isSetStrip() {
      return EncodingUtils.testBit(__isset_bitfield, __STRIP_ISSET_ID);
    }

    public void setStripIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRIP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case STRIP:
        if (value == null) {
          unsetStrip();
        } else {
          setStrip((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE:
        return Integer.valueOf(getPage());

      case STRIP:
        return Integer.valueOf(getStrip());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE:
        return isSetPage();
      case STRIP:
        return isSetStrip();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof select_paging_account_args)
        return this.equals((select_paging_account_args)that);
      return false;
    }

    public boolean equals(select_paging_account_args that) {
      if (that == null)
        return false;

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_strip = true;
      boolean that_present_strip = true;
      if (this_present_strip || that_present_strip) {
        if (!(this_present_strip && that_present_strip))
          return false;
        if (this.strip != that.strip)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_page = true;
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_strip = true;
      list.add(present_strip);
      if (present_strip)
        list.add(strip);

      return list.hashCode();
    }

    @Override
    public int compareTo(select_paging_account_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStrip()).compareTo(other.isSetStrip());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrip()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strip, other.strip);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("select_paging_account_args(");
      boolean first = true;

      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("strip:");
      sb.append(this.strip);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class select_paging_account_argsStandardSchemeFactory implements SchemeFactory {
      public select_paging_account_argsStandardScheme getScheme() {
        return new select_paging_account_argsStandardScheme();
      }
    }

    private static class select_paging_account_argsStandardScheme extends StandardScheme<select_paging_account_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, select_paging_account_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page = iprot.readI32();
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STRIP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strip = iprot.readI32();
                struct.setStripIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, select_paging_account_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        oprot.writeI32(struct.page);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(STRIP_FIELD_DESC);
        oprot.writeI32(struct.strip);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class select_paging_account_argsTupleSchemeFactory implements SchemeFactory {
      public select_paging_account_argsTupleScheme getScheme() {
        return new select_paging_account_argsTupleScheme();
      }
    }

    private static class select_paging_account_argsTupleScheme extends TupleScheme<select_paging_account_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, select_paging_account_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPage()) {
          optionals.set(0);
        }
        if (struct.isSetStrip()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPage()) {
          oprot.writeI32(struct.page);
        }
        if (struct.isSetStrip()) {
          oprot.writeI32(struct.strip);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, select_paging_account_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.page = iprot.readI32();
          struct.setPageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.strip = iprot.readI32();
          struct.setStripIsSet(true);
        }
      }
    }

  }

  public static class select_paging_account_result implements org.apache.thrift.TBase<select_paging_account_result, select_paging_account_result._Fields>, java.io.Serializable, Cloneable, Comparable<select_paging_account_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("select_paging_account_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new select_paging_account_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new select_paging_account_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(select_paging_account_result.class, metaDataMap);
    }

    public select_paging_account_result() {
    }

    public select_paging_account_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public select_paging_account_result(select_paging_account_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public select_paging_account_result deepCopy() {
      return new select_paging_account_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public select_paging_account_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof select_paging_account_result)
        return this.equals((select_paging_account_result)that);
      return false;
    }

    public boolean equals(select_paging_account_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(select_paging_account_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("select_paging_account_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class select_paging_account_resultStandardSchemeFactory implements SchemeFactory {
      public select_paging_account_resultStandardScheme getScheme() {
        return new select_paging_account_resultStandardScheme();
      }
    }

    private static class select_paging_account_resultStandardScheme extends StandardScheme<select_paging_account_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, select_paging_account_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, select_paging_account_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class select_paging_account_resultTupleSchemeFactory implements SchemeFactory {
      public select_paging_account_resultTupleScheme getScheme() {
        return new select_paging_account_resultTupleScheme();
      }
    }

    private static class select_paging_account_resultTupleScheme extends TupleScheme<select_paging_account_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, select_paging_account_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, select_paging_account_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class unbundling_equipment_args implements org.apache.thrift.TBase<unbundling_equipment_args, unbundling_equipment_args._Fields>, java.io.Serializable, Cloneable, Comparable<unbundling_equipment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unbundling_equipment_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("device_id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unbundling_equipment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unbundling_equipment_argsTupleSchemeFactory());
    }

    public String device_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "device_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("device_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unbundling_equipment_args.class, metaDataMap);
    }

    public unbundling_equipment_args() {
    }

    public unbundling_equipment_args(
      String device_id)
    {
      this();
      this.device_id = device_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unbundling_equipment_args(unbundling_equipment_args other) {
      if (other.isSetDevice_id()) {
        this.device_id = other.device_id;
      }
    }

    public unbundling_equipment_args deepCopy() {
      return new unbundling_equipment_args(this);
    }

    @Override
    public void clear() {
      this.device_id = null;
    }

    public String getDevice_id() {
      return this.device_id;
    }

    public unbundling_equipment_args setDevice_id(String device_id) {
      this.device_id = device_id;
      return this;
    }

    public void unsetDevice_id() {
      this.device_id = null;
    }

    /** Returns true if field device_id is set (has been assigned a value) and false otherwise */
    public boolean isSetDevice_id() {
      return this.device_id != null;
    }

    public void setDevice_idIsSet(boolean value) {
      if (!value) {
        this.device_id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDevice_id();
        } else {
          setDevice_id((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return getDevice_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDevice_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unbundling_equipment_args)
        return this.equals((unbundling_equipment_args)that);
      return false;
    }

    public boolean equals(unbundling_equipment_args that) {
      if (that == null)
        return false;

      boolean this_present_device_id = true && this.isSetDevice_id();
      boolean that_present_device_id = true && that.isSetDevice_id();
      if (this_present_device_id || that_present_device_id) {
        if (!(this_present_device_id && that_present_device_id))
          return false;
        if (!this.device_id.equals(that.device_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_device_id = true && (isSetDevice_id());
      list.add(present_device_id);
      if (present_device_id)
        list.add(device_id);

      return list.hashCode();
    }

    @Override
    public int compareTo(unbundling_equipment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDevice_id()).compareTo(other.isSetDevice_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDevice_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device_id, other.device_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unbundling_equipment_args(");
      boolean first = true;

      sb.append("device_id:");
      if (this.device_id == null) {
        sb.append("null");
      } else {
        sb.append(this.device_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unbundling_equipment_argsStandardSchemeFactory implements SchemeFactory {
      public unbundling_equipment_argsStandardScheme getScheme() {
        return new unbundling_equipment_argsStandardScheme();
      }
    }

    private static class unbundling_equipment_argsStandardScheme extends StandardScheme<unbundling_equipment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unbundling_equipment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.device_id = iprot.readString();
                struct.setDevice_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unbundling_equipment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.device_id != null) {
          oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.device_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unbundling_equipment_argsTupleSchemeFactory implements SchemeFactory {
      public unbundling_equipment_argsTupleScheme getScheme() {
        return new unbundling_equipment_argsTupleScheme();
      }
    }

    private static class unbundling_equipment_argsTupleScheme extends TupleScheme<unbundling_equipment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unbundling_equipment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDevice_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDevice_id()) {
          oprot.writeString(struct.device_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unbundling_equipment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.device_id = iprot.readString();
          struct.setDevice_idIsSet(true);
        }
      }
    }

  }

  public static class unbundling_equipment_result implements org.apache.thrift.TBase<unbundling_equipment_result, unbundling_equipment_result._Fields>, java.io.Serializable, Cloneable, Comparable<unbundling_equipment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unbundling_equipment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unbundling_equipment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unbundling_equipment_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unbundling_equipment_result.class, metaDataMap);
    }

    public unbundling_equipment_result() {
    }

    public unbundling_equipment_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unbundling_equipment_result(unbundling_equipment_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public unbundling_equipment_result deepCopy() {
      return new unbundling_equipment_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public unbundling_equipment_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unbundling_equipment_result)
        return this.equals((unbundling_equipment_result)that);
      return false;
    }

    public boolean equals(unbundling_equipment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(unbundling_equipment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unbundling_equipment_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unbundling_equipment_resultStandardSchemeFactory implements SchemeFactory {
      public unbundling_equipment_resultStandardScheme getScheme() {
        return new unbundling_equipment_resultStandardScheme();
      }
    }

    private static class unbundling_equipment_resultStandardScheme extends StandardScheme<unbundling_equipment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unbundling_equipment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unbundling_equipment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unbundling_equipment_resultTupleSchemeFactory implements SchemeFactory {
      public unbundling_equipment_resultTupleScheme getScheme() {
        return new unbundling_equipment_resultTupleScheme();
      }
    }

    private static class unbundling_equipment_resultTupleScheme extends TupleScheme<unbundling_equipment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unbundling_equipment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unbundling_equipment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class update_device_args implements org.apache.thrift.TBase<update_device_args, update_device_args._Fields>, java.io.Serializable, Cloneable, Comparable<update_device_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("update_device_args");

    private static final org.apache.thrift.protocol.TField USER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("user_type", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField DEVICE_BAGNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("device_bagname", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField UPDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("update", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new update_device_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new update_device_argsTupleSchemeFactory());
    }

    public int user_type; // required
    public String device_bagname; // required
    public int update; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_TYPE((short)1, "user_type"),
      DEVICE_BAGNAME((short)2, "device_bagname"),
      UPDATE((short)3, "update");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_TYPE
            return USER_TYPE;
          case 2: // DEVICE_BAGNAME
            return DEVICE_BAGNAME;
          case 3: // UPDATE
            return UPDATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USER_TYPE_ISSET_ID = 0;
    private static final int __UPDATE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("user_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DEVICE_BAGNAME, new org.apache.thrift.meta_data.FieldMetaData("device_bagname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UPDATE, new org.apache.thrift.meta_data.FieldMetaData("update", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_device_args.class, metaDataMap);
    }

    public update_device_args() {
    }

    public update_device_args(
      int user_type,
      String device_bagname,
      int update)
    {
      this();
      this.user_type = user_type;
      setUser_typeIsSet(true);
      this.device_bagname = device_bagname;
      this.update = update;
      setUpdateIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public update_device_args(update_device_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.user_type = other.user_type;
      if (other.isSetDevice_bagname()) {
        this.device_bagname = other.device_bagname;
      }
      this.update = other.update;
    }

    public update_device_args deepCopy() {
      return new update_device_args(this);
    }

    @Override
    public void clear() {
      setUser_typeIsSet(false);
      this.user_type = 0;
      this.device_bagname = null;
      setUpdateIsSet(false);
      this.update = 0;
    }

    public int getUser_type() {
      return this.user_type;
    }

    public update_device_args setUser_type(int user_type) {
      this.user_type = user_type;
      setUser_typeIsSet(true);
      return this;
    }

    public void unsetUser_type() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USER_TYPE_ISSET_ID);
    }

    /** Returns true if field user_type is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_type() {
      return EncodingUtils.testBit(__isset_bitfield, __USER_TYPE_ISSET_ID);
    }

    public void setUser_typeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USER_TYPE_ISSET_ID, value);
    }

    public String getDevice_bagname() {
      return this.device_bagname;
    }

    public update_device_args setDevice_bagname(String device_bagname) {
      this.device_bagname = device_bagname;
      return this;
    }

    public void unsetDevice_bagname() {
      this.device_bagname = null;
    }

    /** Returns true if field device_bagname is set (has been assigned a value) and false otherwise */
    public boolean isSetDevice_bagname() {
      return this.device_bagname != null;
    }

    public void setDevice_bagnameIsSet(boolean value) {
      if (!value) {
        this.device_bagname = null;
      }
    }

    public int getUpdate() {
      return this.update;
    }

    public update_device_args setUpdate(int update) {
      this.update = update;
      setUpdateIsSet(true);
      return this;
    }

    public void unsetUpdate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATE_ISSET_ID);
    }

    /** Returns true if field update is set (has been assigned a value) and false otherwise */
    public boolean isSetUpdate() {
      return EncodingUtils.testBit(__isset_bitfield, __UPDATE_ISSET_ID);
    }

    public void setUpdateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_TYPE:
        if (value == null) {
          unsetUser_type();
        } else {
          setUser_type((Integer)value);
        }
        break;

      case DEVICE_BAGNAME:
        if (value == null) {
          unsetDevice_bagname();
        } else {
          setDevice_bagname((String)value);
        }
        break;

      case UPDATE:
        if (value == null) {
          unsetUpdate();
        } else {
          setUpdate((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_TYPE:
        return Integer.valueOf(getUser_type());

      case DEVICE_BAGNAME:
        return getDevice_bagname();

      case UPDATE:
        return Integer.valueOf(getUpdate());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_TYPE:
        return isSetUser_type();
      case DEVICE_BAGNAME:
        return isSetDevice_bagname();
      case UPDATE:
        return isSetUpdate();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof update_device_args)
        return this.equals((update_device_args)that);
      return false;
    }

    public boolean equals(update_device_args that) {
      if (that == null)
        return false;

      boolean this_present_user_type = true;
      boolean that_present_user_type = true;
      if (this_present_user_type || that_present_user_type) {
        if (!(this_present_user_type && that_present_user_type))
          return false;
        if (this.user_type != that.user_type)
          return false;
      }

      boolean this_present_device_bagname = true && this.isSetDevice_bagname();
      boolean that_present_device_bagname = true && that.isSetDevice_bagname();
      if (this_present_device_bagname || that_present_device_bagname) {
        if (!(this_present_device_bagname && that_present_device_bagname))
          return false;
        if (!this.device_bagname.equals(that.device_bagname))
          return false;
      }

      boolean this_present_update = true;
      boolean that_present_update = true;
      if (this_present_update || that_present_update) {
        if (!(this_present_update && that_present_update))
          return false;
        if (this.update != that.update)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_user_type = true;
      list.add(present_user_type);
      if (present_user_type)
        list.add(user_type);

      boolean present_device_bagname = true && (isSetDevice_bagname());
      list.add(present_device_bagname);
      if (present_device_bagname)
        list.add(device_bagname);

      boolean present_update = true;
      list.add(present_update);
      if (present_update)
        list.add(update);

      return list.hashCode();
    }

    @Override
    public int compareTo(update_device_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUser_type()).compareTo(other.isSetUser_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_type, other.user_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDevice_bagname()).compareTo(other.isSetDevice_bagname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDevice_bagname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device_bagname, other.device_bagname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUpdate()).compareTo(other.isSetUpdate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUpdate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.update, other.update);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("update_device_args(");
      boolean first = true;

      sb.append("user_type:");
      sb.append(this.user_type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("device_bagname:");
      if (this.device_bagname == null) {
        sb.append("null");
      } else {
        sb.append(this.device_bagname);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("update:");
      sb.append(this.update);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class update_device_argsStandardSchemeFactory implements SchemeFactory {
      public update_device_argsStandardScheme getScheme() {
        return new update_device_argsStandardScheme();
      }
    }

    private static class update_device_argsStandardScheme extends StandardScheme<update_device_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, update_device_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.user_type = iprot.readI32();
                struct.setUser_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEVICE_BAGNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.device_bagname = iprot.readString();
                struct.setDevice_bagnameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // UPDATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.update = iprot.readI32();
                struct.setUpdateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, update_device_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_TYPE_FIELD_DESC);
        oprot.writeI32(struct.user_type);
        oprot.writeFieldEnd();
        if (struct.device_bagname != null) {
          oprot.writeFieldBegin(DEVICE_BAGNAME_FIELD_DESC);
          oprot.writeString(struct.device_bagname);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(UPDATE_FIELD_DESC);
        oprot.writeI32(struct.update);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class update_device_argsTupleSchemeFactory implements SchemeFactory {
      public update_device_argsTupleScheme getScheme() {
        return new update_device_argsTupleScheme();
      }
    }

    private static class update_device_argsTupleScheme extends TupleScheme<update_device_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, update_device_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_type()) {
          optionals.set(0);
        }
        if (struct.isSetDevice_bagname()) {
          optionals.set(1);
        }
        if (struct.isSetUpdate()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUser_type()) {
          oprot.writeI32(struct.user_type);
        }
        if (struct.isSetDevice_bagname()) {
          oprot.writeString(struct.device_bagname);
        }
        if (struct.isSetUpdate()) {
          oprot.writeI32(struct.update);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, update_device_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.user_type = iprot.readI32();
          struct.setUser_typeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.device_bagname = iprot.readString();
          struct.setDevice_bagnameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.update = iprot.readI32();
          struct.setUpdateIsSet(true);
        }
      }
    }

  }

  public static class update_device_result implements org.apache.thrift.TBase<update_device_result, update_device_result._Fields>, java.io.Serializable, Cloneable, Comparable<update_device_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("update_device_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new update_device_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new update_device_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_device_result.class, metaDataMap);
    }

    public update_device_result() {
    }

    public update_device_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public update_device_result(update_device_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public update_device_result deepCopy() {
      return new update_device_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public update_device_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof update_device_result)
        return this.equals((update_device_result)that);
      return false;
    }

    public boolean equals(update_device_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(update_device_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("update_device_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class update_device_resultStandardSchemeFactory implements SchemeFactory {
      public update_device_resultStandardScheme getScheme() {
        return new update_device_resultStandardScheme();
      }
    }

    private static class update_device_resultStandardScheme extends StandardScheme<update_device_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, update_device_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, update_device_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class update_device_resultTupleSchemeFactory implements SchemeFactory {
      public update_device_resultTupleScheme getScheme() {
        return new update_device_resultTupleScheme();
      }
    }

    private static class update_device_resultTupleScheme extends TupleScheme<update_device_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, update_device_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, update_device_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class update_random_selection_args implements org.apache.thrift.TBase<update_random_selection_args, update_random_selection_args._Fields>, java.io.Serializable, Cloneable, Comparable<update_random_selection_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("update_random_selection_args");

    private static final org.apache.thrift.protocol.TField NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("num", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField DEVICE_BAGNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("device_bagname", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MAC_FIELD_DESC = new org.apache.thrift.protocol.TField("mac", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new update_random_selection_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new update_random_selection_argsTupleSchemeFactory());
    }

    public int num; // required
    public String device_bagname; // required
    public String mac; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NUM((short)1, "num"),
      DEVICE_BAGNAME((short)2, "device_bagname"),
      MAC((short)3, "mac");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NUM
            return NUM;
          case 2: // DEVICE_BAGNAME
            return DEVICE_BAGNAME;
          case 3: // MAC
            return MAC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NUM, new org.apache.thrift.meta_data.FieldMetaData("num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DEVICE_BAGNAME, new org.apache.thrift.meta_data.FieldMetaData("device_bagname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MAC, new org.apache.thrift.meta_data.FieldMetaData("mac", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_random_selection_args.class, metaDataMap);
    }

    public update_random_selection_args() {
    }

    public update_random_selection_args(
      int num,
      String device_bagname,
      String mac)
    {
      this();
      this.num = num;
      setNumIsSet(true);
      this.device_bagname = device_bagname;
      this.mac = mac;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public update_random_selection_args(update_random_selection_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.num = other.num;
      if (other.isSetDevice_bagname()) {
        this.device_bagname = other.device_bagname;
      }
      if (other.isSetMac()) {
        this.mac = other.mac;
      }
    }

    public update_random_selection_args deepCopy() {
      return new update_random_selection_args(this);
    }

    @Override
    public void clear() {
      setNumIsSet(false);
      this.num = 0;
      this.device_bagname = null;
      this.mac = null;
    }

    public int getNum() {
      return this.num;
    }

    public update_random_selection_args setNum(int num) {
      this.num = num;
      setNumIsSet(true);
      return this;
    }

    public void unsetNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_ISSET_ID);
    }

    /** Returns true if field num is set (has been assigned a value) and false otherwise */
    public boolean isSetNum() {
      return EncodingUtils.testBit(__isset_bitfield, __NUM_ISSET_ID);
    }

    public void setNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_ISSET_ID, value);
    }

    public String getDevice_bagname() {
      return this.device_bagname;
    }

    public update_random_selection_args setDevice_bagname(String device_bagname) {
      this.device_bagname = device_bagname;
      return this;
    }

    public void unsetDevice_bagname() {
      this.device_bagname = null;
    }

    /** Returns true if field device_bagname is set (has been assigned a value) and false otherwise */
    public boolean isSetDevice_bagname() {
      return this.device_bagname != null;
    }

    public void setDevice_bagnameIsSet(boolean value) {
      if (!value) {
        this.device_bagname = null;
      }
    }

    public String getMac() {
      return this.mac;
    }

    public update_random_selection_args setMac(String mac) {
      this.mac = mac;
      return this;
    }

    public void unsetMac() {
      this.mac = null;
    }

    /** Returns true if field mac is set (has been assigned a value) and false otherwise */
    public boolean isSetMac() {
      return this.mac != null;
    }

    public void setMacIsSet(boolean value) {
      if (!value) {
        this.mac = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NUM:
        if (value == null) {
          unsetNum();
        } else {
          setNum((Integer)value);
        }
        break;

      case DEVICE_BAGNAME:
        if (value == null) {
          unsetDevice_bagname();
        } else {
          setDevice_bagname((String)value);
        }
        break;

      case MAC:
        if (value == null) {
          unsetMac();
        } else {
          setMac((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NUM:
        return Integer.valueOf(getNum());

      case DEVICE_BAGNAME:
        return getDevice_bagname();

      case MAC:
        return getMac();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NUM:
        return isSetNum();
      case DEVICE_BAGNAME:
        return isSetDevice_bagname();
      case MAC:
        return isSetMac();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof update_random_selection_args)
        return this.equals((update_random_selection_args)that);
      return false;
    }

    public boolean equals(update_random_selection_args that) {
      if (that == null)
        return false;

      boolean this_present_num = true;
      boolean that_present_num = true;
      if (this_present_num || that_present_num) {
        if (!(this_present_num && that_present_num))
          return false;
        if (this.num != that.num)
          return false;
      }

      boolean this_present_device_bagname = true && this.isSetDevice_bagname();
      boolean that_present_device_bagname = true && that.isSetDevice_bagname();
      if (this_present_device_bagname || that_present_device_bagname) {
        if (!(this_present_device_bagname && that_present_device_bagname))
          return false;
        if (!this.device_bagname.equals(that.device_bagname))
          return false;
      }

      boolean this_present_mac = true && this.isSetMac();
      boolean that_present_mac = true && that.isSetMac();
      if (this_present_mac || that_present_mac) {
        if (!(this_present_mac && that_present_mac))
          return false;
        if (!this.mac.equals(that.mac))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_num = true;
      list.add(present_num);
      if (present_num)
        list.add(num);

      boolean present_device_bagname = true && (isSetDevice_bagname());
      list.add(present_device_bagname);
      if (present_device_bagname)
        list.add(device_bagname);

      boolean present_mac = true && (isSetMac());
      list.add(present_mac);
      if (present_mac)
        list.add(mac);

      return list.hashCode();
    }

    @Override
    public int compareTo(update_random_selection_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNum()).compareTo(other.isSetNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num, other.num);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDevice_bagname()).compareTo(other.isSetDevice_bagname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDevice_bagname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device_bagname, other.device_bagname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMac()).compareTo(other.isSetMac());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMac()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mac, other.mac);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("update_random_selection_args(");
      boolean first = true;

      sb.append("num:");
      sb.append(this.num);
      first = false;
      if (!first) sb.append(", ");
      sb.append("device_bagname:");
      if (this.device_bagname == null) {
        sb.append("null");
      } else {
        sb.append(this.device_bagname);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mac:");
      if (this.mac == null) {
        sb.append("null");
      } else {
        sb.append(this.mac);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class update_random_selection_argsStandardSchemeFactory implements SchemeFactory {
      public update_random_selection_argsStandardScheme getScheme() {
        return new update_random_selection_argsStandardScheme();
      }
    }

    private static class update_random_selection_argsStandardScheme extends StandardScheme<update_random_selection_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, update_random_selection_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.num = iprot.readI32();
                struct.setNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEVICE_BAGNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.device_bagname = iprot.readString();
                struct.setDevice_bagnameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MAC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mac = iprot.readString();
                struct.setMacIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, update_random_selection_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NUM_FIELD_DESC);
        oprot.writeI32(struct.num);
        oprot.writeFieldEnd();
        if (struct.device_bagname != null) {
          oprot.writeFieldBegin(DEVICE_BAGNAME_FIELD_DESC);
          oprot.writeString(struct.device_bagname);
          oprot.writeFieldEnd();
        }
        if (struct.mac != null) {
          oprot.writeFieldBegin(MAC_FIELD_DESC);
          oprot.writeString(struct.mac);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class update_random_selection_argsTupleSchemeFactory implements SchemeFactory {
      public update_random_selection_argsTupleScheme getScheme() {
        return new update_random_selection_argsTupleScheme();
      }
    }

    private static class update_random_selection_argsTupleScheme extends TupleScheme<update_random_selection_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, update_random_selection_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNum()) {
          optionals.set(0);
        }
        if (struct.isSetDevice_bagname()) {
          optionals.set(1);
        }
        if (struct.isSetMac()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetNum()) {
          oprot.writeI32(struct.num);
        }
        if (struct.isSetDevice_bagname()) {
          oprot.writeString(struct.device_bagname);
        }
        if (struct.isSetMac()) {
          oprot.writeString(struct.mac);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, update_random_selection_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.num = iprot.readI32();
          struct.setNumIsSet(true);
        }
        if (incoming.get(1)) {
          struct.device_bagname = iprot.readString();
          struct.setDevice_bagnameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.mac = iprot.readString();
          struct.setMacIsSet(true);
        }
      }
    }

  }

  public static class update_random_selection_result implements org.apache.thrift.TBase<update_random_selection_result, update_random_selection_result._Fields>, java.io.Serializable, Cloneable, Comparable<update_random_selection_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("update_random_selection_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new update_random_selection_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new update_random_selection_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_random_selection_result.class, metaDataMap);
    }

    public update_random_selection_result() {
    }

    public update_random_selection_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public update_random_selection_result(update_random_selection_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public update_random_selection_result deepCopy() {
      return new update_random_selection_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public update_random_selection_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof update_random_selection_result)
        return this.equals((update_random_selection_result)that);
      return false;
    }

    public boolean equals(update_random_selection_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(update_random_selection_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("update_random_selection_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class update_random_selection_resultStandardSchemeFactory implements SchemeFactory {
      public update_random_selection_resultStandardScheme getScheme() {
        return new update_random_selection_resultStandardScheme();
      }
    }

    private static class update_random_selection_resultStandardScheme extends StandardScheme<update_random_selection_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, update_random_selection_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, update_random_selection_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class update_random_selection_resultTupleSchemeFactory implements SchemeFactory {
      public update_random_selection_resultTupleScheme getScheme() {
        return new update_random_selection_resultTupleScheme();
      }
    }

    private static class update_random_selection_resultTupleScheme extends TupleScheme<update_random_selection_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, update_random_selection_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, update_random_selection_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class update_one_user_args implements org.apache.thrift.TBase<update_one_user_args, update_one_user_args._Fields>, java.io.Serializable, Cloneable, Comparable<update_one_user_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("update_one_user_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DEVICE_BAGNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("device_bagname", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new update_one_user_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new update_one_user_argsTupleSchemeFactory());
    }

    public String user_name; // required
    public String device_bagname; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name"),
      DEVICE_BAGNAME((short)2, "device_bagname");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // DEVICE_BAGNAME
            return DEVICE_BAGNAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DEVICE_BAGNAME, new org.apache.thrift.meta_data.FieldMetaData("device_bagname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_one_user_args.class, metaDataMap);
    }

    public update_one_user_args() {
    }

    public update_one_user_args(
      String user_name,
      String device_bagname)
    {
      this();
      this.user_name = user_name;
      this.device_bagname = device_bagname;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public update_one_user_args(update_one_user_args other) {
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetDevice_bagname()) {
        this.device_bagname = other.device_bagname;
      }
    }

    public update_one_user_args deepCopy() {
      return new update_one_user_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
      this.device_bagname = null;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public update_one_user_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getDevice_bagname() {
      return this.device_bagname;
    }

    public update_one_user_args setDevice_bagname(String device_bagname) {
      this.device_bagname = device_bagname;
      return this;
    }

    public void unsetDevice_bagname() {
      this.device_bagname = null;
    }

    /** Returns true if field device_bagname is set (has been assigned a value) and false otherwise */
    public boolean isSetDevice_bagname() {
      return this.device_bagname != null;
    }

    public void setDevice_bagnameIsSet(boolean value) {
      if (!value) {
        this.device_bagname = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case DEVICE_BAGNAME:
        if (value == null) {
          unsetDevice_bagname();
        } else {
          setDevice_bagname((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      case DEVICE_BAGNAME:
        return getDevice_bagname();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      case DEVICE_BAGNAME:
        return isSetDevice_bagname();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof update_one_user_args)
        return this.equals((update_one_user_args)that);
      return false;
    }

    public boolean equals(update_one_user_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_device_bagname = true && this.isSetDevice_bagname();
      boolean that_present_device_bagname = true && that.isSetDevice_bagname();
      if (this_present_device_bagname || that_present_device_bagname) {
        if (!(this_present_device_bagname && that_present_device_bagname))
          return false;
        if (!this.device_bagname.equals(that.device_bagname))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_user_name = true && (isSetUser_name());
      list.add(present_user_name);
      if (present_user_name)
        list.add(user_name);

      boolean present_device_bagname = true && (isSetDevice_bagname());
      list.add(present_device_bagname);
      if (present_device_bagname)
        list.add(device_bagname);

      return list.hashCode();
    }

    @Override
    public int compareTo(update_one_user_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(other.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, other.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDevice_bagname()).compareTo(other.isSetDevice_bagname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDevice_bagname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device_bagname, other.device_bagname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("update_one_user_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("device_bagname:");
      if (this.device_bagname == null) {
        sb.append("null");
      } else {
        sb.append(this.device_bagname);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class update_one_user_argsStandardSchemeFactory implements SchemeFactory {
      public update_one_user_argsStandardScheme getScheme() {
        return new update_one_user_argsStandardScheme();
      }
    }

    private static class update_one_user_argsStandardScheme extends StandardScheme<update_one_user_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, update_one_user_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEVICE_BAGNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.device_bagname = iprot.readString();
                struct.setDevice_bagnameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, update_one_user_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.device_bagname != null) {
          oprot.writeFieldBegin(DEVICE_BAGNAME_FIELD_DESC);
          oprot.writeString(struct.device_bagname);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class update_one_user_argsTupleSchemeFactory implements SchemeFactory {
      public update_one_user_argsTupleScheme getScheme() {
        return new update_one_user_argsTupleScheme();
      }
    }

    private static class update_one_user_argsTupleScheme extends TupleScheme<update_one_user_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, update_one_user_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        if (struct.isSetDevice_bagname()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetDevice_bagname()) {
          oprot.writeString(struct.device_bagname);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, update_one_user_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.device_bagname = iprot.readString();
          struct.setDevice_bagnameIsSet(true);
        }
      }
    }

  }

  public static class update_one_user_result implements org.apache.thrift.TBase<update_one_user_result, update_one_user_result._Fields>, java.io.Serializable, Cloneable, Comparable<update_one_user_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("update_one_user_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new update_one_user_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new update_one_user_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_one_user_result.class, metaDataMap);
    }

    public update_one_user_result() {
    }

    public update_one_user_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public update_one_user_result(update_one_user_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public update_one_user_result deepCopy() {
      return new update_one_user_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public update_one_user_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof update_one_user_result)
        return this.equals((update_one_user_result)that);
      return false;
    }

    public boolean equals(update_one_user_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(update_one_user_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("update_one_user_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class update_one_user_resultStandardSchemeFactory implements SchemeFactory {
      public update_one_user_resultStandardScheme getScheme() {
        return new update_one_user_resultStandardScheme();
      }
    }

    private static class update_one_user_resultStandardScheme extends StandardScheme<update_one_user_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, update_one_user_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, update_one_user_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class update_one_user_resultTupleSchemeFactory implements SchemeFactory {
      public update_one_user_resultTupleScheme getScheme() {
        return new update_one_user_resultTupleScheme();
      }
    }

    private static class update_one_user_resultTupleScheme extends TupleScheme<update_one_user_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, update_one_user_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, update_one_user_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class statistics_update_user_num_args implements org.apache.thrift.TBase<statistics_update_user_num_args, statistics_update_user_num_args._Fields>, java.io.Serializable, Cloneable, Comparable<statistics_update_user_num_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("statistics_update_user_num_args");

    private static final org.apache.thrift.protocol.TField DEVICE_BAGNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("device_bagname", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new statistics_update_user_num_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new statistics_update_user_num_argsTupleSchemeFactory());
    }

    public String device_bagname; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_BAGNAME((short)1, "device_bagname");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_BAGNAME
            return DEVICE_BAGNAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_BAGNAME, new org.apache.thrift.meta_data.FieldMetaData("device_bagname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(statistics_update_user_num_args.class, metaDataMap);
    }

    public statistics_update_user_num_args() {
    }

    public statistics_update_user_num_args(
      String device_bagname)
    {
      this();
      this.device_bagname = device_bagname;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public statistics_update_user_num_args(statistics_update_user_num_args other) {
      if (other.isSetDevice_bagname()) {
        this.device_bagname = other.device_bagname;
      }
    }

    public statistics_update_user_num_args deepCopy() {
      return new statistics_update_user_num_args(this);
    }

    @Override
    public void clear() {
      this.device_bagname = null;
    }

    public String getDevice_bagname() {
      return this.device_bagname;
    }

    public statistics_update_user_num_args setDevice_bagname(String device_bagname) {
      this.device_bagname = device_bagname;
      return this;
    }

    public void unsetDevice_bagname() {
      this.device_bagname = null;
    }

    /** Returns true if field device_bagname is set (has been assigned a value) and false otherwise */
    public boolean isSetDevice_bagname() {
      return this.device_bagname != null;
    }

    public void setDevice_bagnameIsSet(boolean value) {
      if (!value) {
        this.device_bagname = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_BAGNAME:
        if (value == null) {
          unsetDevice_bagname();
        } else {
          setDevice_bagname((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_BAGNAME:
        return getDevice_bagname();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_BAGNAME:
        return isSetDevice_bagname();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof statistics_update_user_num_args)
        return this.equals((statistics_update_user_num_args)that);
      return false;
    }

    public boolean equals(statistics_update_user_num_args that) {
      if (that == null)
        return false;

      boolean this_present_device_bagname = true && this.isSetDevice_bagname();
      boolean that_present_device_bagname = true && that.isSetDevice_bagname();
      if (this_present_device_bagname || that_present_device_bagname) {
        if (!(this_present_device_bagname && that_present_device_bagname))
          return false;
        if (!this.device_bagname.equals(that.device_bagname))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_device_bagname = true && (isSetDevice_bagname());
      list.add(present_device_bagname);
      if (present_device_bagname)
        list.add(device_bagname);

      return list.hashCode();
    }

    @Override
    public int compareTo(statistics_update_user_num_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDevice_bagname()).compareTo(other.isSetDevice_bagname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDevice_bagname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device_bagname, other.device_bagname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("statistics_update_user_num_args(");
      boolean first = true;

      sb.append("device_bagname:");
      if (this.device_bagname == null) {
        sb.append("null");
      } else {
        sb.append(this.device_bagname);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class statistics_update_user_num_argsStandardSchemeFactory implements SchemeFactory {
      public statistics_update_user_num_argsStandardScheme getScheme() {
        return new statistics_update_user_num_argsStandardScheme();
      }
    }

    private static class statistics_update_user_num_argsStandardScheme extends StandardScheme<statistics_update_user_num_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, statistics_update_user_num_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_BAGNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.device_bagname = iprot.readString();
                struct.setDevice_bagnameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, statistics_update_user_num_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.device_bagname != null) {
          oprot.writeFieldBegin(DEVICE_BAGNAME_FIELD_DESC);
          oprot.writeString(struct.device_bagname);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class statistics_update_user_num_argsTupleSchemeFactory implements SchemeFactory {
      public statistics_update_user_num_argsTupleScheme getScheme() {
        return new statistics_update_user_num_argsTupleScheme();
      }
    }

    private static class statistics_update_user_num_argsTupleScheme extends TupleScheme<statistics_update_user_num_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, statistics_update_user_num_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDevice_bagname()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDevice_bagname()) {
          oprot.writeString(struct.device_bagname);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, statistics_update_user_num_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.device_bagname = iprot.readString();
          struct.setDevice_bagnameIsSet(true);
        }
      }
    }

  }

  public static class statistics_update_user_num_result implements org.apache.thrift.TBase<statistics_update_user_num_result, statistics_update_user_num_result._Fields>, java.io.Serializable, Cloneable, Comparable<statistics_update_user_num_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("statistics_update_user_num_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new statistics_update_user_num_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new statistics_update_user_num_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(statistics_update_user_num_result.class, metaDataMap);
    }

    public statistics_update_user_num_result() {
    }

    public statistics_update_user_num_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public statistics_update_user_num_result(statistics_update_user_num_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public statistics_update_user_num_result deepCopy() {
      return new statistics_update_user_num_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public statistics_update_user_num_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof statistics_update_user_num_result)
        return this.equals((statistics_update_user_num_result)that);
      return false;
    }

    public boolean equals(statistics_update_user_num_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(statistics_update_user_num_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("statistics_update_user_num_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class statistics_update_user_num_resultStandardSchemeFactory implements SchemeFactory {
      public statistics_update_user_num_resultStandardScheme getScheme() {
        return new statistics_update_user_num_resultStandardScheme();
      }
    }

    private static class statistics_update_user_num_resultStandardScheme extends StandardScheme<statistics_update_user_num_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, statistics_update_user_num_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, statistics_update_user_num_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class statistics_update_user_num_resultTupleSchemeFactory implements SchemeFactory {
      public statistics_update_user_num_resultTupleScheme getScheme() {
        return new statistics_update_user_num_resultTupleScheme();
      }
    }

    private static class statistics_update_user_num_resultTupleScheme extends TupleScheme<statistics_update_user_num_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, statistics_update_user_num_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, statistics_update_user_num_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class query_online_user_args implements org.apache.thrift.TBase<query_online_user_args, query_online_user_args._Fields>, java.io.Serializable, Cloneable, Comparable<query_online_user_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_online_user_args");

    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField M_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("m_type", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_online_user_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_online_user_argsTupleSchemeFactory());
    }

    public String type; // required
    public String m_type; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TYPE((short)1, "type"),
      M_TYPE((short)2, "m_type");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TYPE
            return TYPE;
          case 2: // M_TYPE
            return M_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.M_TYPE, new org.apache.thrift.meta_data.FieldMetaData("m_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_online_user_args.class, metaDataMap);
    }

    public query_online_user_args() {
    }

    public query_online_user_args(
      String type,
      String m_type)
    {
      this();
      this.type = type;
      this.m_type = m_type;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_online_user_args(query_online_user_args other) {
      if (other.isSetType()) {
        this.type = other.type;
      }
      if (other.isSetM_type()) {
        this.m_type = other.m_type;
      }
    }

    public query_online_user_args deepCopy() {
      return new query_online_user_args(this);
    }

    @Override
    public void clear() {
      this.type = null;
      this.m_type = null;
    }

    public String getType() {
      return this.type;
    }

    public query_online_user_args setType(String type) {
      this.type = type;
      return this;
    }

    public void unsetType() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    public String getM_type() {
      return this.m_type;
    }

    public query_online_user_args setM_type(String m_type) {
      this.m_type = m_type;
      return this;
    }

    public void unsetM_type() {
      this.m_type = null;
    }

    /** Returns true if field m_type is set (has been assigned a value) and false otherwise */
    public boolean isSetM_type() {
      return this.m_type != null;
    }

    public void setM_typeIsSet(boolean value) {
      if (!value) {
        this.m_type = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((String)value);
        }
        break;

      case M_TYPE:
        if (value == null) {
          unsetM_type();
        } else {
          setM_type((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TYPE:
        return getType();

      case M_TYPE:
        return getM_type();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TYPE:
        return isSetType();
      case M_TYPE:
        return isSetM_type();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_online_user_args)
        return this.equals((query_online_user_args)that);
      return false;
    }

    public boolean equals(query_online_user_args that) {
      if (that == null)
        return false;

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      boolean this_present_m_type = true && this.isSetM_type();
      boolean that_present_m_type = true && that.isSetM_type();
      if (this_present_m_type || that_present_m_type) {
        if (!(this_present_m_type && that_present_m_type))
          return false;
        if (!this.m_type.equals(that.m_type))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_type = true && (isSetType());
      list.add(present_type);
      if (present_type)
        list.add(type);

      boolean present_m_type = true && (isSetM_type());
      list.add(present_m_type);
      if (present_m_type)
        list.add(m_type);

      return list.hashCode();
    }

    @Override
    public int compareTo(query_online_user_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetM_type()).compareTo(other.isSetM_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetM_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.m_type, other.m_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_online_user_args(");
      boolean first = true;

      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("m_type:");
      if (this.m_type == null) {
        sb.append("null");
      } else {
        sb.append(this.m_type);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_online_user_argsStandardSchemeFactory implements SchemeFactory {
      public query_online_user_argsStandardScheme getScheme() {
        return new query_online_user_argsStandardScheme();
      }
    }

    private static class query_online_user_argsStandardScheme extends StandardScheme<query_online_user_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_online_user_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.type = iprot.readString();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // M_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.m_type = iprot.readString();
                struct.setM_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_online_user_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.type != null) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
        if (struct.m_type != null) {
          oprot.writeFieldBegin(M_TYPE_FIELD_DESC);
          oprot.writeString(struct.m_type);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_online_user_argsTupleSchemeFactory implements SchemeFactory {
      public query_online_user_argsTupleScheme getScheme() {
        return new query_online_user_argsTupleScheme();
      }
    }

    private static class query_online_user_argsTupleScheme extends TupleScheme<query_online_user_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, query_online_user_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetType()) {
          optionals.set(0);
        }
        if (struct.isSetM_type()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetType()) {
          oprot.writeString(struct.type);
        }
        if (struct.isSetM_type()) {
          oprot.writeString(struct.m_type);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, query_online_user_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.type = iprot.readString();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.m_type = iprot.readString();
          struct.setM_typeIsSet(true);
        }
      }
    }

  }

  public static class query_online_user_result implements org.apache.thrift.TBase<query_online_user_result, query_online_user_result._Fields>, java.io.Serializable, Cloneable, Comparable<query_online_user_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_online_user_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_online_user_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_online_user_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_online_user_result.class, metaDataMap);
    }

    public query_online_user_result() {
    }

    public query_online_user_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_online_user_result(query_online_user_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public query_online_user_result deepCopy() {
      return new query_online_user_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public query_online_user_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_online_user_result)
        return this.equals((query_online_user_result)that);
      return false;
    }

    public boolean equals(query_online_user_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(query_online_user_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_online_user_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_online_user_resultStandardSchemeFactory implements SchemeFactory {
      public query_online_user_resultStandardScheme getScheme() {
        return new query_online_user_resultStandardScheme();
      }
    }

    private static class query_online_user_resultStandardScheme extends StandardScheme<query_online_user_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_online_user_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_online_user_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_online_user_resultTupleSchemeFactory implements SchemeFactory {
      public query_online_user_resultTupleScheme getScheme() {
        return new query_online_user_resultTupleScheme();
      }
    }

    private static class query_online_user_resultTupleScheme extends TupleScheme<query_online_user_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, query_online_user_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, query_online_user_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class statistics_data_args implements org.apache.thrift.TBase<statistics_data_args, statistics_data_args._Fields>, java.io.Serializable, Cloneable, Comparable<statistics_data_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("statistics_data_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("device_id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new statistics_data_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new statistics_data_argsTupleSchemeFactory());
    }

    public String device_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "device_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("device_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(statistics_data_args.class, metaDataMap);
    }

    public statistics_data_args() {
    }

    public statistics_data_args(
      String device_id)
    {
      this();
      this.device_id = device_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public statistics_data_args(statistics_data_args other) {
      if (other.isSetDevice_id()) {
        this.device_id = other.device_id;
      }
    }

    public statistics_data_args deepCopy() {
      return new statistics_data_args(this);
    }

    @Override
    public void clear() {
      this.device_id = null;
    }

    public String getDevice_id() {
      return this.device_id;
    }

    public statistics_data_args setDevice_id(String device_id) {
      this.device_id = device_id;
      return this;
    }

    public void unsetDevice_id() {
      this.device_id = null;
    }

    /** Returns true if field device_id is set (has been assigned a value) and false otherwise */
    public boolean isSetDevice_id() {
      return this.device_id != null;
    }

    public void setDevice_idIsSet(boolean value) {
      if (!value) {
        this.device_id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDevice_id();
        } else {
          setDevice_id((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return getDevice_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDevice_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof statistics_data_args)
        return this.equals((statistics_data_args)that);
      return false;
    }

    public boolean equals(statistics_data_args that) {
      if (that == null)
        return false;

      boolean this_present_device_id = true && this.isSetDevice_id();
      boolean that_present_device_id = true && that.isSetDevice_id();
      if (this_present_device_id || that_present_device_id) {
        if (!(this_present_device_id && that_present_device_id))
          return false;
        if (!this.device_id.equals(that.device_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_device_id = true && (isSetDevice_id());
      list.add(present_device_id);
      if (present_device_id)
        list.add(device_id);

      return list.hashCode();
    }

    @Override
    public int compareTo(statistics_data_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDevice_id()).compareTo(other.isSetDevice_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDevice_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device_id, other.device_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("statistics_data_args(");
      boolean first = true;

      sb.append("device_id:");
      if (this.device_id == null) {
        sb.append("null");
      } else {
        sb.append(this.device_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class statistics_data_argsStandardSchemeFactory implements SchemeFactory {
      public statistics_data_argsStandardScheme getScheme() {
        return new statistics_data_argsStandardScheme();
      }
    }

    private static class statistics_data_argsStandardScheme extends StandardScheme<statistics_data_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, statistics_data_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.device_id = iprot.readString();
                struct.setDevice_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, statistics_data_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.device_id != null) {
          oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.device_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class statistics_data_argsTupleSchemeFactory implements SchemeFactory {
      public statistics_data_argsTupleScheme getScheme() {
        return new statistics_data_argsTupleScheme();
      }
    }

    private static class statistics_data_argsTupleScheme extends TupleScheme<statistics_data_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, statistics_data_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDevice_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDevice_id()) {
          oprot.writeString(struct.device_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, statistics_data_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.device_id = iprot.readString();
          struct.setDevice_idIsSet(true);
        }
      }
    }

  }

  public static class statistics_data_result implements org.apache.thrift.TBase<statistics_data_result, statistics_data_result._Fields>, java.io.Serializable, Cloneable, Comparable<statistics_data_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("statistics_data_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new statistics_data_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new statistics_data_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(statistics_data_result.class, metaDataMap);
    }

    public statistics_data_result() {
    }

    public statistics_data_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public statistics_data_result(statistics_data_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public statistics_data_result deepCopy() {
      return new statistics_data_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public statistics_data_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof statistics_data_result)
        return this.equals((statistics_data_result)that);
      return false;
    }

    public boolean equals(statistics_data_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(statistics_data_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("statistics_data_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class statistics_data_resultStandardSchemeFactory implements SchemeFactory {
      public statistics_data_resultStandardScheme getScheme() {
        return new statistics_data_resultStandardScheme();
      }
    }

    private static class statistics_data_resultStandardScheme extends StandardScheme<statistics_data_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, statistics_data_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, statistics_data_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class statistics_data_resultTupleSchemeFactory implements SchemeFactory {
      public statistics_data_resultTupleScheme getScheme() {
        return new statistics_data_resultTupleScheme();
      }
    }

    private static class statistics_data_resultTupleScheme extends TupleScheme<statistics_data_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, statistics_data_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, statistics_data_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reset_user_level_args implements org.apache.thrift.TBase<reset_user_level_args, reset_user_level_args._Fields>, java.io.Serializable, Cloneable, Comparable<reset_user_level_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reset_user_level_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reset_user_level_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reset_user_level_argsTupleSchemeFactory());
    }

    public String user_name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reset_user_level_args.class, metaDataMap);
    }

    public reset_user_level_args() {
    }

    public reset_user_level_args(
      String user_name)
    {
      this();
      this.user_name = user_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reset_user_level_args(reset_user_level_args other) {
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
    }

    public reset_user_level_args deepCopy() {
      return new reset_user_level_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public reset_user_level_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reset_user_level_args)
        return this.equals((reset_user_level_args)that);
      return false;
    }

    public boolean equals(reset_user_level_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_user_name = true && (isSetUser_name());
      list.add(present_user_name);
      if (present_user_name)
        list.add(user_name);

      return list.hashCode();
    }

    @Override
    public int compareTo(reset_user_level_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(other.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, other.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reset_user_level_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reset_user_level_argsStandardSchemeFactory implements SchemeFactory {
      public reset_user_level_argsStandardScheme getScheme() {
        return new reset_user_level_argsStandardScheme();
      }
    }

    private static class reset_user_level_argsStandardScheme extends StandardScheme<reset_user_level_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reset_user_level_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reset_user_level_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reset_user_level_argsTupleSchemeFactory implements SchemeFactory {
      public reset_user_level_argsTupleScheme getScheme() {
        return new reset_user_level_argsTupleScheme();
      }
    }

    private static class reset_user_level_argsTupleScheme extends TupleScheme<reset_user_level_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reset_user_level_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reset_user_level_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
      }
    }

  }

  public static class reset_user_level_result implements org.apache.thrift.TBase<reset_user_level_result, reset_user_level_result._Fields>, java.io.Serializable, Cloneable, Comparable<reset_user_level_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reset_user_level_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reset_user_level_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reset_user_level_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reset_user_level_result.class, metaDataMap);
    }

    public reset_user_level_result() {
    }

    public reset_user_level_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reset_user_level_result(reset_user_level_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reset_user_level_result deepCopy() {
      return new reset_user_level_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public reset_user_level_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reset_user_level_result)
        return this.equals((reset_user_level_result)that);
      return false;
    }

    public boolean equals(reset_user_level_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(reset_user_level_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reset_user_level_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reset_user_level_resultStandardSchemeFactory implements SchemeFactory {
      public reset_user_level_resultStandardScheme getScheme() {
        return new reset_user_level_resultStandardScheme();
      }
    }

    private static class reset_user_level_resultStandardScheme extends StandardScheme<reset_user_level_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reset_user_level_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reset_user_level_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reset_user_level_resultTupleSchemeFactory implements SchemeFactory {
      public reset_user_level_resultTupleScheme getScheme() {
        return new reset_user_level_resultTupleScheme();
      }
    }

    private static class reset_user_level_resultTupleScheme extends TupleScheme<reset_user_level_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reset_user_level_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reset_user_level_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class query_issuing_certificate_num_args implements org.apache.thrift.TBase<query_issuing_certificate_num_args, query_issuing_certificate_num_args._Fields>, java.io.Serializable, Cloneable, Comparable<query_issuing_certificate_num_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_issuing_certificate_num_args");

    private static final org.apache.thrift.protocol.TField PARTNER_FIELD_DESC = new org.apache.thrift.protocol.TField("partner", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MAC_FIELD_DESC = new org.apache.thrift.protocol.TField("mac", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("num", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField OFF_FIELD_DESC = new org.apache.thrift.protocol.TField("off", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_issuing_certificate_num_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_issuing_certificate_num_argsTupleSchemeFactory());
    }

    public String partner; // required
    public String mac; // required
    public int state; // required
    public int num; // required
    public int off; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARTNER((short)1, "partner"),
      MAC((short)2, "mac"),
      STATE((short)3, "state"),
      NUM((short)4, "num"),
      OFF((short)5, "off");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARTNER
            return PARTNER;
          case 2: // MAC
            return MAC;
          case 3: // STATE
            return STATE;
          case 4: // NUM
            return NUM;
          case 5: // OFF
            return OFF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STATE_ISSET_ID = 0;
    private static final int __NUM_ISSET_ID = 1;
    private static final int __OFF_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARTNER, new org.apache.thrift.meta_data.FieldMetaData("partner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MAC, new org.apache.thrift.meta_data.FieldMetaData("mac", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NUM, new org.apache.thrift.meta_data.FieldMetaData("num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.OFF, new org.apache.thrift.meta_data.FieldMetaData("off", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_issuing_certificate_num_args.class, metaDataMap);
    }

    public query_issuing_certificate_num_args() {
    }

    public query_issuing_certificate_num_args(
      String partner,
      String mac,
      int state,
      int num,
      int off)
    {
      this();
      this.partner = partner;
      this.mac = mac;
      this.state = state;
      setStateIsSet(true);
      this.num = num;
      setNumIsSet(true);
      this.off = off;
      setOffIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_issuing_certificate_num_args(query_issuing_certificate_num_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPartner()) {
        this.partner = other.partner;
      }
      if (other.isSetMac()) {
        this.mac = other.mac;
      }
      this.state = other.state;
      this.num = other.num;
      this.off = other.off;
    }

    public query_issuing_certificate_num_args deepCopy() {
      return new query_issuing_certificate_num_args(this);
    }

    @Override
    public void clear() {
      this.partner = null;
      this.mac = null;
      setStateIsSet(false);
      this.state = 0;
      setNumIsSet(false);
      this.num = 0;
      setOffIsSet(false);
      this.off = 0;
    }

    public String getPartner() {
      return this.partner;
    }

    public query_issuing_certificate_num_args setPartner(String partner) {
      this.partner = partner;
      return this;
    }

    public void unsetPartner() {
      this.partner = null;
    }

    /** Returns true if field partner is set (has been assigned a value) and false otherwise */
    public boolean isSetPartner() {
      return this.partner != null;
    }

    public void setPartnerIsSet(boolean value) {
      if (!value) {
        this.partner = null;
      }
    }

    public String getMac() {
      return this.mac;
    }

    public query_issuing_certificate_num_args setMac(String mac) {
      this.mac = mac;
      return this;
    }

    public void unsetMac() {
      this.mac = null;
    }

    /** Returns true if field mac is set (has been assigned a value) and false otherwise */
    public boolean isSetMac() {
      return this.mac != null;
    }

    public void setMacIsSet(boolean value) {
      if (!value) {
        this.mac = null;
      }
    }

    public int getState() {
      return this.state;
    }

    public query_issuing_certificate_num_args setState(int state) {
      this.state = state;
      setStateIsSet(true);
      return this;
    }

    public void unsetState() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
    }

    /** Returns true if field state is set (has been assigned a value) and false otherwise */
    public boolean isSetState() {
      return EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
    }

    public void setStateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
    }

    public int getNum() {
      return this.num;
    }

    public query_issuing_certificate_num_args setNum(int num) {
      this.num = num;
      setNumIsSet(true);
      return this;
    }

    public void unsetNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_ISSET_ID);
    }

    /** Returns true if field num is set (has been assigned a value) and false otherwise */
    public boolean isSetNum() {
      return EncodingUtils.testBit(__isset_bitfield, __NUM_ISSET_ID);
    }

    public void setNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_ISSET_ID, value);
    }

    public int getOff() {
      return this.off;
    }

    public query_issuing_certificate_num_args setOff(int off) {
      this.off = off;
      setOffIsSet(true);
      return this;
    }

    public void unsetOff() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFF_ISSET_ID);
    }

    /** Returns true if field off is set (has been assigned a value) and false otherwise */
    public boolean isSetOff() {
      return EncodingUtils.testBit(__isset_bitfield, __OFF_ISSET_ID);
    }

    public void setOffIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFF_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARTNER:
        if (value == null) {
          unsetPartner();
        } else {
          setPartner((String)value);
        }
        break;

      case MAC:
        if (value == null) {
          unsetMac();
        } else {
          setMac((String)value);
        }
        break;

      case STATE:
        if (value == null) {
          unsetState();
        } else {
          setState((Integer)value);
        }
        break;

      case NUM:
        if (value == null) {
          unsetNum();
        } else {
          setNum((Integer)value);
        }
        break;

      case OFF:
        if (value == null) {
          unsetOff();
        } else {
          setOff((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARTNER:
        return getPartner();

      case MAC:
        return getMac();

      case STATE:
        return Integer.valueOf(getState());

      case NUM:
        return Integer.valueOf(getNum());

      case OFF:
        return Integer.valueOf(getOff());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARTNER:
        return isSetPartner();
      case MAC:
        return isSetMac();
      case STATE:
        return isSetState();
      case NUM:
        return isSetNum();
      case OFF:
        return isSetOff();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_issuing_certificate_num_args)
        return this.equals((query_issuing_certificate_num_args)that);
      return false;
    }

    public boolean equals(query_issuing_certificate_num_args that) {
      if (that == null)
        return false;

      boolean this_present_partner = true && this.isSetPartner();
      boolean that_present_partner = true && that.isSetPartner();
      if (this_present_partner || that_present_partner) {
        if (!(this_present_partner && that_present_partner))
          return false;
        if (!this.partner.equals(that.partner))
          return false;
      }

      boolean this_present_mac = true && this.isSetMac();
      boolean that_present_mac = true && that.isSetMac();
      if (this_present_mac || that_present_mac) {
        if (!(this_present_mac && that_present_mac))
          return false;
        if (!this.mac.equals(that.mac))
          return false;
      }

      boolean this_present_state = true;
      boolean that_present_state = true;
      if (this_present_state || that_present_state) {
        if (!(this_present_state && that_present_state))
          return false;
        if (this.state != that.state)
          return false;
      }

      boolean this_present_num = true;
      boolean that_present_num = true;
      if (this_present_num || that_present_num) {
        if (!(this_present_num && that_present_num))
          return false;
        if (this.num != that.num)
          return false;
      }

      boolean this_present_off = true;
      boolean that_present_off = true;
      if (this_present_off || that_present_off) {
        if (!(this_present_off && that_present_off))
          return false;
        if (this.off != that.off)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_partner = true && (isSetPartner());
      list.add(present_partner);
      if (present_partner)
        list.add(partner);

      boolean present_mac = true && (isSetMac());
      list.add(present_mac);
      if (present_mac)
        list.add(mac);

      boolean present_state = true;
      list.add(present_state);
      if (present_state)
        list.add(state);

      boolean present_num = true;
      list.add(present_num);
      if (present_num)
        list.add(num);

      boolean present_off = true;
      list.add(present_off);
      if (present_off)
        list.add(off);

      return list.hashCode();
    }

    @Override
    public int compareTo(query_issuing_certificate_num_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPartner()).compareTo(other.isSetPartner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partner, other.partner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMac()).compareTo(other.isSetMac());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMac()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mac, other.mac);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetState()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNum()).compareTo(other.isSetNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num, other.num);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOff()).compareTo(other.isSetOff());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOff()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.off, other.off);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_issuing_certificate_num_args(");
      boolean first = true;

      sb.append("partner:");
      if (this.partner == null) {
        sb.append("null");
      } else {
        sb.append(this.partner);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mac:");
      if (this.mac == null) {
        sb.append("null");
      } else {
        sb.append(this.mac);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("state:");
      sb.append(this.state);
      first = false;
      if (!first) sb.append(", ");
      sb.append("num:");
      sb.append(this.num);
      first = false;
      if (!first) sb.append(", ");
      sb.append("off:");
      sb.append(this.off);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_issuing_certificate_num_argsStandardSchemeFactory implements SchemeFactory {
      public query_issuing_certificate_num_argsStandardScheme getScheme() {
        return new query_issuing_certificate_num_argsStandardScheme();
      }
    }

    private static class query_issuing_certificate_num_argsStandardScheme extends StandardScheme<query_issuing_certificate_num_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_issuing_certificate_num_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARTNER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.partner = iprot.readString();
                struct.setPartnerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MAC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mac = iprot.readString();
                struct.setMacIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.state = iprot.readI32();
                struct.setStateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.num = iprot.readI32();
                struct.setNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // OFF
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.off = iprot.readI32();
                struct.setOffIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_issuing_certificate_num_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.partner != null) {
          oprot.writeFieldBegin(PARTNER_FIELD_DESC);
          oprot.writeString(struct.partner);
          oprot.writeFieldEnd();
        }
        if (struct.mac != null) {
          oprot.writeFieldBegin(MAC_FIELD_DESC);
          oprot.writeString(struct.mac);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeI32(struct.state);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUM_FIELD_DESC);
        oprot.writeI32(struct.num);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OFF_FIELD_DESC);
        oprot.writeI32(struct.off);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_issuing_certificate_num_argsTupleSchemeFactory implements SchemeFactory {
      public query_issuing_certificate_num_argsTupleScheme getScheme() {
        return new query_issuing_certificate_num_argsTupleScheme();
      }
    }

    private static class query_issuing_certificate_num_argsTupleScheme extends TupleScheme<query_issuing_certificate_num_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, query_issuing_certificate_num_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPartner()) {
          optionals.set(0);
        }
        if (struct.isSetMac()) {
          optionals.set(1);
        }
        if (struct.isSetState()) {
          optionals.set(2);
        }
        if (struct.isSetNum()) {
          optionals.set(3);
        }
        if (struct.isSetOff()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetPartner()) {
          oprot.writeString(struct.partner);
        }
        if (struct.isSetMac()) {
          oprot.writeString(struct.mac);
        }
        if (struct.isSetState()) {
          oprot.writeI32(struct.state);
        }
        if (struct.isSetNum()) {
          oprot.writeI32(struct.num);
        }
        if (struct.isSetOff()) {
          oprot.writeI32(struct.off);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, query_issuing_certificate_num_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.partner = iprot.readString();
          struct.setPartnerIsSet(true);
        }
        if (incoming.get(1)) {
          struct.mac = iprot.readString();
          struct.setMacIsSet(true);
        }
        if (incoming.get(2)) {
          struct.state = iprot.readI32();
          struct.setStateIsSet(true);
        }
        if (incoming.get(3)) {
          struct.num = iprot.readI32();
          struct.setNumIsSet(true);
        }
        if (incoming.get(4)) {
          struct.off = iprot.readI32();
          struct.setOffIsSet(true);
        }
      }
    }

  }

  public static class query_issuing_certificate_num_result implements org.apache.thrift.TBase<query_issuing_certificate_num_result, query_issuing_certificate_num_result._Fields>, java.io.Serializable, Cloneable, Comparable<query_issuing_certificate_num_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_issuing_certificate_num_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_issuing_certificate_num_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_issuing_certificate_num_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_issuing_certificate_num_result.class, metaDataMap);
    }

    public query_issuing_certificate_num_result() {
    }

    public query_issuing_certificate_num_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_issuing_certificate_num_result(query_issuing_certificate_num_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public query_issuing_certificate_num_result deepCopy() {
      return new query_issuing_certificate_num_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public query_issuing_certificate_num_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_issuing_certificate_num_result)
        return this.equals((query_issuing_certificate_num_result)that);
      return false;
    }

    public boolean equals(query_issuing_certificate_num_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(query_issuing_certificate_num_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_issuing_certificate_num_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_issuing_certificate_num_resultStandardSchemeFactory implements SchemeFactory {
      public query_issuing_certificate_num_resultStandardScheme getScheme() {
        return new query_issuing_certificate_num_resultStandardScheme();
      }
    }

    private static class query_issuing_certificate_num_resultStandardScheme extends StandardScheme<query_issuing_certificate_num_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_issuing_certificate_num_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_issuing_certificate_num_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_issuing_certificate_num_resultTupleSchemeFactory implements SchemeFactory {
      public query_issuing_certificate_num_resultTupleScheme getScheme() {
        return new query_issuing_certificate_num_resultTupleScheme();
      }
    }

    private static class query_issuing_certificate_num_resultTupleScheme extends TupleScheme<query_issuing_certificate_num_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, query_issuing_certificate_num_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, query_issuing_certificate_num_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class query_device_attribute_args implements org.apache.thrift.TBase<query_device_attribute_args, query_device_attribute_args._Fields>, java.io.Serializable, Cloneable, Comparable<query_device_attribute_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_device_attribute_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("device_id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_device_attribute_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_device_attribute_argsTupleSchemeFactory());
    }

    public String device_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "device_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("device_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_device_attribute_args.class, metaDataMap);
    }

    public query_device_attribute_args() {
    }

    public query_device_attribute_args(
      String device_id)
    {
      this();
      this.device_id = device_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_device_attribute_args(query_device_attribute_args other) {
      if (other.isSetDevice_id()) {
        this.device_id = other.device_id;
      }
    }

    public query_device_attribute_args deepCopy() {
      return new query_device_attribute_args(this);
    }

    @Override
    public void clear() {
      this.device_id = null;
    }

    public String getDevice_id() {
      return this.device_id;
    }

    public query_device_attribute_args setDevice_id(String device_id) {
      this.device_id = device_id;
      return this;
    }

    public void unsetDevice_id() {
      this.device_id = null;
    }

    /** Returns true if field device_id is set (has been assigned a value) and false otherwise */
    public boolean isSetDevice_id() {
      return this.device_id != null;
    }

    public void setDevice_idIsSet(boolean value) {
      if (!value) {
        this.device_id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDevice_id();
        } else {
          setDevice_id((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return getDevice_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDevice_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_device_attribute_args)
        return this.equals((query_device_attribute_args)that);
      return false;
    }

    public boolean equals(query_device_attribute_args that) {
      if (that == null)
        return false;

      boolean this_present_device_id = true && this.isSetDevice_id();
      boolean that_present_device_id = true && that.isSetDevice_id();
      if (this_present_device_id || that_present_device_id) {
        if (!(this_present_device_id && that_present_device_id))
          return false;
        if (!this.device_id.equals(that.device_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_device_id = true && (isSetDevice_id());
      list.add(present_device_id);
      if (present_device_id)
        list.add(device_id);

      return list.hashCode();
    }

    @Override
    public int compareTo(query_device_attribute_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDevice_id()).compareTo(other.isSetDevice_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDevice_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device_id, other.device_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_device_attribute_args(");
      boolean first = true;

      sb.append("device_id:");
      if (this.device_id == null) {
        sb.append("null");
      } else {
        sb.append(this.device_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_device_attribute_argsStandardSchemeFactory implements SchemeFactory {
      public query_device_attribute_argsStandardScheme getScheme() {
        return new query_device_attribute_argsStandardScheme();
      }
    }

    private static class query_device_attribute_argsStandardScheme extends StandardScheme<query_device_attribute_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_device_attribute_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.device_id = iprot.readString();
                struct.setDevice_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_device_attribute_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.device_id != null) {
          oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.device_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_device_attribute_argsTupleSchemeFactory implements SchemeFactory {
      public query_device_attribute_argsTupleScheme getScheme() {
        return new query_device_attribute_argsTupleScheme();
      }
    }

    private static class query_device_attribute_argsTupleScheme extends TupleScheme<query_device_attribute_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, query_device_attribute_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDevice_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDevice_id()) {
          oprot.writeString(struct.device_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, query_device_attribute_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.device_id = iprot.readString();
          struct.setDevice_idIsSet(true);
        }
      }
    }

  }

  public static class query_device_attribute_result implements org.apache.thrift.TBase<query_device_attribute_result, query_device_attribute_result._Fields>, java.io.Serializable, Cloneable, Comparable<query_device_attribute_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_device_attribute_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_device_attribute_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_device_attribute_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_device_attribute_result.class, metaDataMap);
    }

    public query_device_attribute_result() {
    }

    public query_device_attribute_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_device_attribute_result(query_device_attribute_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public query_device_attribute_result deepCopy() {
      return new query_device_attribute_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public query_device_attribute_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_device_attribute_result)
        return this.equals((query_device_attribute_result)that);
      return false;
    }

    public boolean equals(query_device_attribute_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(query_device_attribute_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_device_attribute_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_device_attribute_resultStandardSchemeFactory implements SchemeFactory {
      public query_device_attribute_resultStandardScheme getScheme() {
        return new query_device_attribute_resultStandardScheme();
      }
    }

    private static class query_device_attribute_resultStandardScheme extends StandardScheme<query_device_attribute_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_device_attribute_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_device_attribute_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_device_attribute_resultTupleSchemeFactory implements SchemeFactory {
      public query_device_attribute_resultTupleScheme getScheme() {
        return new query_device_attribute_resultTupleScheme();
      }
    }

    private static class query_device_attribute_resultTupleScheme extends TupleScheme<query_device_attribute_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, query_device_attribute_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, query_device_attribute_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class add_mac_msg_args implements org.apache.thrift.TBase<add_mac_msg_args, add_mac_msg_args._Fields>, java.io.Serializable, Cloneable, Comparable<add_mac_msg_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("add_mac_msg_args");

    private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new add_mac_msg_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new add_mac_msg_argsTupleSchemeFactory());
    }

    public String msg; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MSG((short)1, "msg");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MSG
            return MSG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(add_mac_msg_args.class, metaDataMap);
    }

    public add_mac_msg_args() {
    }

    public add_mac_msg_args(
      String msg)
    {
      this();
      this.msg = msg;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public add_mac_msg_args(add_mac_msg_args other) {
      if (other.isSetMsg()) {
        this.msg = other.msg;
      }
    }

    public add_mac_msg_args deepCopy() {
      return new add_mac_msg_args(this);
    }

    @Override
    public void clear() {
      this.msg = null;
    }

    public String getMsg() {
      return this.msg;
    }

    public add_mac_msg_args setMsg(String msg) {
      this.msg = msg;
      return this;
    }

    public void unsetMsg() {
      this.msg = null;
    }

    /** Returns true if field msg is set (has been assigned a value) and false otherwise */
    public boolean isSetMsg() {
      return this.msg != null;
    }

    public void setMsgIsSet(boolean value) {
      if (!value) {
        this.msg = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MSG:
        if (value == null) {
          unsetMsg();
        } else {
          setMsg((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MSG:
        return getMsg();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MSG:
        return isSetMsg();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof add_mac_msg_args)
        return this.equals((add_mac_msg_args)that);
      return false;
    }

    public boolean equals(add_mac_msg_args that) {
      if (that == null)
        return false;

      boolean this_present_msg = true && this.isSetMsg();
      boolean that_present_msg = true && that.isSetMsg();
      if (this_present_msg || that_present_msg) {
        if (!(this_present_msg && that_present_msg))
          return false;
        if (!this.msg.equals(that.msg))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_msg = true && (isSetMsg());
      list.add(present_msg);
      if (present_msg)
        list.add(msg);

      return list.hashCode();
    }

    @Override
    public int compareTo(add_mac_msg_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMsg()).compareTo(other.isSetMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("add_mac_msg_args(");
      boolean first = true;

      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class add_mac_msg_argsStandardSchemeFactory implements SchemeFactory {
      public add_mac_msg_argsStandardScheme getScheme() {
        return new add_mac_msg_argsStandardScheme();
      }
    }

    private static class add_mac_msg_argsStandardScheme extends StandardScheme<add_mac_msg_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, add_mac_msg_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MSG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.msg = iprot.readString();
                struct.setMsgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, add_mac_msg_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.msg != null) {
          oprot.writeFieldBegin(MSG_FIELD_DESC);
          oprot.writeString(struct.msg);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class add_mac_msg_argsTupleSchemeFactory implements SchemeFactory {
      public add_mac_msg_argsTupleScheme getScheme() {
        return new add_mac_msg_argsTupleScheme();
      }
    }

    private static class add_mac_msg_argsTupleScheme extends TupleScheme<add_mac_msg_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, add_mac_msg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMsg()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMsg()) {
          oprot.writeString(struct.msg);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, add_mac_msg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.msg = iprot.readString();
          struct.setMsgIsSet(true);
        }
      }
    }

  }

  public static class add_mac_msg_result implements org.apache.thrift.TBase<add_mac_msg_result, add_mac_msg_result._Fields>, java.io.Serializable, Cloneable, Comparable<add_mac_msg_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("add_mac_msg_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new add_mac_msg_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new add_mac_msg_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(add_mac_msg_result.class, metaDataMap);
    }

    public add_mac_msg_result() {
    }

    public add_mac_msg_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public add_mac_msg_result(add_mac_msg_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public add_mac_msg_result deepCopy() {
      return new add_mac_msg_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public add_mac_msg_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof add_mac_msg_result)
        return this.equals((add_mac_msg_result)that);
      return false;
    }

    public boolean equals(add_mac_msg_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(add_mac_msg_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("add_mac_msg_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class add_mac_msg_resultStandardSchemeFactory implements SchemeFactory {
      public add_mac_msg_resultStandardScheme getScheme() {
        return new add_mac_msg_resultStandardScheme();
      }
    }

    private static class add_mac_msg_resultStandardScheme extends StandardScheme<add_mac_msg_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, add_mac_msg_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, add_mac_msg_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class add_mac_msg_resultTupleSchemeFactory implements SchemeFactory {
      public add_mac_msg_resultTupleScheme getScheme() {
        return new add_mac_msg_resultTupleScheme();
      }
    }

    private static class add_mac_msg_resultTupleScheme extends TupleScheme<add_mac_msg_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, add_mac_msg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, add_mac_msg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class update_version_args implements org.apache.thrift.TBase<update_version_args, update_version_args._Fields>, java.io.Serializable, Cloneable, Comparable<update_version_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("update_version_args");

    private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new update_version_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new update_version_argsTupleSchemeFactory());
    }

    public String msg; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MSG((short)1, "msg");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MSG
            return MSG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_version_args.class, metaDataMap);
    }

    public update_version_args() {
    }

    public update_version_args(
      String msg)
    {
      this();
      this.msg = msg;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public update_version_args(update_version_args other) {
      if (other.isSetMsg()) {
        this.msg = other.msg;
      }
    }

    public update_version_args deepCopy() {
      return new update_version_args(this);
    }

    @Override
    public void clear() {
      this.msg = null;
    }

    public String getMsg() {
      return this.msg;
    }

    public update_version_args setMsg(String msg) {
      this.msg = msg;
      return this;
    }

    public void unsetMsg() {
      this.msg = null;
    }

    /** Returns true if field msg is set (has been assigned a value) and false otherwise */
    public boolean isSetMsg() {
      return this.msg != null;
    }

    public void setMsgIsSet(boolean value) {
      if (!value) {
        this.msg = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MSG:
        if (value == null) {
          unsetMsg();
        } else {
          setMsg((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MSG:
        return getMsg();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MSG:
        return isSetMsg();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof update_version_args)
        return this.equals((update_version_args)that);
      return false;
    }

    public boolean equals(update_version_args that) {
      if (that == null)
        return false;

      boolean this_present_msg = true && this.isSetMsg();
      boolean that_present_msg = true && that.isSetMsg();
      if (this_present_msg || that_present_msg) {
        if (!(this_present_msg && that_present_msg))
          return false;
        if (!this.msg.equals(that.msg))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_msg = true && (isSetMsg());
      list.add(present_msg);
      if (present_msg)
        list.add(msg);

      return list.hashCode();
    }

    @Override
    public int compareTo(update_version_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMsg()).compareTo(other.isSetMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("update_version_args(");
      boolean first = true;

      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class update_version_argsStandardSchemeFactory implements SchemeFactory {
      public update_version_argsStandardScheme getScheme() {
        return new update_version_argsStandardScheme();
      }
    }

    private static class update_version_argsStandardScheme extends StandardScheme<update_version_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, update_version_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MSG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.msg = iprot.readString();
                struct.setMsgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, update_version_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.msg != null) {
          oprot.writeFieldBegin(MSG_FIELD_DESC);
          oprot.writeString(struct.msg);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class update_version_argsTupleSchemeFactory implements SchemeFactory {
      public update_version_argsTupleScheme getScheme() {
        return new update_version_argsTupleScheme();
      }
    }

    private static class update_version_argsTupleScheme extends TupleScheme<update_version_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, update_version_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMsg()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMsg()) {
          oprot.writeString(struct.msg);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, update_version_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.msg = iprot.readString();
          struct.setMsgIsSet(true);
        }
      }
    }

  }

  public static class update_version_result implements org.apache.thrift.TBase<update_version_result, update_version_result._Fields>, java.io.Serializable, Cloneable, Comparable<update_version_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("update_version_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new update_version_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new update_version_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_version_result.class, metaDataMap);
    }

    public update_version_result() {
    }

    public update_version_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public update_version_result(update_version_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public update_version_result deepCopy() {
      return new update_version_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public update_version_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof update_version_result)
        return this.equals((update_version_result)that);
      return false;
    }

    public boolean equals(update_version_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(update_version_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("update_version_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class update_version_resultStandardSchemeFactory implements SchemeFactory {
      public update_version_resultStandardScheme getScheme() {
        return new update_version_resultStandardScheme();
      }
    }

    private static class update_version_resultStandardScheme extends StandardScheme<update_version_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, update_version_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, update_version_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class update_version_resultTupleSchemeFactory implements SchemeFactory {
      public update_version_resultTupleScheme getScheme() {
        return new update_version_resultTupleScheme();
      }
    }

    private static class update_version_resultTupleScheme extends TupleScheme<update_version_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, update_version_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, update_version_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class update_country_args implements org.apache.thrift.TBase<update_country_args, update_country_args._Fields>, java.io.Serializable, Cloneable, Comparable<update_country_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("update_country_args");

    private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new update_country_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new update_country_argsTupleSchemeFactory());
    }

    public String msg; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MSG((short)1, "msg");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MSG
            return MSG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_country_args.class, metaDataMap);
    }

    public update_country_args() {
    }

    public update_country_args(
      String msg)
    {
      this();
      this.msg = msg;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public update_country_args(update_country_args other) {
      if (other.isSetMsg()) {
        this.msg = other.msg;
      }
    }

    public update_country_args deepCopy() {
      return new update_country_args(this);
    }

    @Override
    public void clear() {
      this.msg = null;
    }

    public String getMsg() {
      return this.msg;
    }

    public update_country_args setMsg(String msg) {
      this.msg = msg;
      return this;
    }

    public void unsetMsg() {
      this.msg = null;
    }

    /** Returns true if field msg is set (has been assigned a value) and false otherwise */
    public boolean isSetMsg() {
      return this.msg != null;
    }

    public void setMsgIsSet(boolean value) {
      if (!value) {
        this.msg = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MSG:
        if (value == null) {
          unsetMsg();
        } else {
          setMsg((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MSG:
        return getMsg();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MSG:
        return isSetMsg();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof update_country_args)
        return this.equals((update_country_args)that);
      return false;
    }

    public boolean equals(update_country_args that) {
      if (that == null)
        return false;

      boolean this_present_msg = true && this.isSetMsg();
      boolean that_present_msg = true && that.isSetMsg();
      if (this_present_msg || that_present_msg) {
        if (!(this_present_msg && that_present_msg))
          return false;
        if (!this.msg.equals(that.msg))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_msg = true && (isSetMsg());
      list.add(present_msg);
      if (present_msg)
        list.add(msg);

      return list.hashCode();
    }

    @Override
    public int compareTo(update_country_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMsg()).compareTo(other.isSetMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("update_country_args(");
      boolean first = true;

      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class update_country_argsStandardSchemeFactory implements SchemeFactory {
      public update_country_argsStandardScheme getScheme() {
        return new update_country_argsStandardScheme();
      }
    }

    private static class update_country_argsStandardScheme extends StandardScheme<update_country_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, update_country_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MSG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.msg = iprot.readString();
                struct.setMsgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, update_country_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.msg != null) {
          oprot.writeFieldBegin(MSG_FIELD_DESC);
          oprot.writeString(struct.msg);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class update_country_argsTupleSchemeFactory implements SchemeFactory {
      public update_country_argsTupleScheme getScheme() {
        return new update_country_argsTupleScheme();
      }
    }

    private static class update_country_argsTupleScheme extends TupleScheme<update_country_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, update_country_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMsg()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMsg()) {
          oprot.writeString(struct.msg);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, update_country_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.msg = iprot.readString();
          struct.setMsgIsSet(true);
        }
      }
    }

  }

  public static class update_country_result implements org.apache.thrift.TBase<update_country_result, update_country_result._Fields>, java.io.Serializable, Cloneable, Comparable<update_country_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("update_country_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new update_country_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new update_country_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_country_result.class, metaDataMap);
    }

    public update_country_result() {
    }

    public update_country_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public update_country_result(update_country_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public update_country_result deepCopy() {
      return new update_country_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public update_country_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof update_country_result)
        return this.equals((update_country_result)that);
      return false;
    }

    public boolean equals(update_country_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(update_country_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("update_country_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class update_country_resultStandardSchemeFactory implements SchemeFactory {
      public update_country_resultStandardScheme getScheme() {
        return new update_country_resultStandardScheme();
      }
    }

    private static class update_country_resultStandardScheme extends StandardScheme<update_country_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, update_country_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, update_country_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class update_country_resultTupleSchemeFactory implements SchemeFactory {
      public update_country_resultTupleScheme getScheme() {
        return new update_country_resultTupleScheme();
      }
    }

    private static class update_country_resultTupleScheme extends TupleScheme<update_country_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, update_country_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, update_country_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class device_type_num_args implements org.apache.thrift.TBase<device_type_num_args, device_type_num_args._Fields>, java.io.Serializable, Cloneable, Comparable<device_type_num_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("device_type_num_args");

    private static final org.apache.thrift.protocol.TField PARTNER_FIELD_DESC = new org.apache.thrift.protocol.TField("partner", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new device_type_num_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new device_type_num_argsTupleSchemeFactory());
    }

    public String partner; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARTNER((short)1, "partner");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARTNER
            return PARTNER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARTNER, new org.apache.thrift.meta_data.FieldMetaData("partner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(device_type_num_args.class, metaDataMap);
    }

    public device_type_num_args() {
    }

    public device_type_num_args(
      String partner)
    {
      this();
      this.partner = partner;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public device_type_num_args(device_type_num_args other) {
      if (other.isSetPartner()) {
        this.partner = other.partner;
      }
    }

    public device_type_num_args deepCopy() {
      return new device_type_num_args(this);
    }

    @Override
    public void clear() {
      this.partner = null;
    }

    public String getPartner() {
      return this.partner;
    }

    public device_type_num_args setPartner(String partner) {
      this.partner = partner;
      return this;
    }

    public void unsetPartner() {
      this.partner = null;
    }

    /** Returns true if field partner is set (has been assigned a value) and false otherwise */
    public boolean isSetPartner() {
      return this.partner != null;
    }

    public void setPartnerIsSet(boolean value) {
      if (!value) {
        this.partner = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARTNER:
        if (value == null) {
          unsetPartner();
        } else {
          setPartner((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARTNER:
        return getPartner();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARTNER:
        return isSetPartner();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof device_type_num_args)
        return this.equals((device_type_num_args)that);
      return false;
    }

    public boolean equals(device_type_num_args that) {
      if (that == null)
        return false;

      boolean this_present_partner = true && this.isSetPartner();
      boolean that_present_partner = true && that.isSetPartner();
      if (this_present_partner || that_present_partner) {
        if (!(this_present_partner && that_present_partner))
          return false;
        if (!this.partner.equals(that.partner))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_partner = true && (isSetPartner());
      list.add(present_partner);
      if (present_partner)
        list.add(partner);

      return list.hashCode();
    }

    @Override
    public int compareTo(device_type_num_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPartner()).compareTo(other.isSetPartner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partner, other.partner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("device_type_num_args(");
      boolean first = true;

      sb.append("partner:");
      if (this.partner == null) {
        sb.append("null");
      } else {
        sb.append(this.partner);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class device_type_num_argsStandardSchemeFactory implements SchemeFactory {
      public device_type_num_argsStandardScheme getScheme() {
        return new device_type_num_argsStandardScheme();
      }
    }

    private static class device_type_num_argsStandardScheme extends StandardScheme<device_type_num_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, device_type_num_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARTNER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.partner = iprot.readString();
                struct.setPartnerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, device_type_num_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.partner != null) {
          oprot.writeFieldBegin(PARTNER_FIELD_DESC);
          oprot.writeString(struct.partner);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class device_type_num_argsTupleSchemeFactory implements SchemeFactory {
      public device_type_num_argsTupleScheme getScheme() {
        return new device_type_num_argsTupleScheme();
      }
    }

    private static class device_type_num_argsTupleScheme extends TupleScheme<device_type_num_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, device_type_num_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPartner()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPartner()) {
          oprot.writeString(struct.partner);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, device_type_num_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.partner = iprot.readString();
          struct.setPartnerIsSet(true);
        }
      }
    }

  }

  public static class device_type_num_result implements org.apache.thrift.TBase<device_type_num_result, device_type_num_result._Fields>, java.io.Serializable, Cloneable, Comparable<device_type_num_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("device_type_num_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new device_type_num_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new device_type_num_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(device_type_num_result.class, metaDataMap);
    }

    public device_type_num_result() {
    }

    public device_type_num_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public device_type_num_result(device_type_num_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public device_type_num_result deepCopy() {
      return new device_type_num_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public device_type_num_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof device_type_num_result)
        return this.equals((device_type_num_result)that);
      return false;
    }

    public boolean equals(device_type_num_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(device_type_num_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("device_type_num_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class device_type_num_resultStandardSchemeFactory implements SchemeFactory {
      public device_type_num_resultStandardScheme getScheme() {
        return new device_type_num_resultStandardScheme();
      }
    }

    private static class device_type_num_resultStandardScheme extends StandardScheme<device_type_num_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, device_type_num_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, device_type_num_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class device_type_num_resultTupleSchemeFactory implements SchemeFactory {
      public device_type_num_resultTupleScheme getScheme() {
        return new device_type_num_resultTupleScheme();
      }
    }

    private static class device_type_num_resultTupleScheme extends TupleScheme<device_type_num_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, device_type_num_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, device_type_num_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class query_country_num_args implements org.apache.thrift.TBase<query_country_num_args, query_country_num_args._Fields>, java.io.Serializable, Cloneable, Comparable<query_country_num_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_country_num_args");

    private static final org.apache.thrift.protocol.TField PARTNER_FIELD_DESC = new org.apache.thrift.protocol.TField("partner", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_country_num_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_country_num_argsTupleSchemeFactory());
    }

    public String partner; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARTNER((short)1, "partner");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARTNER
            return PARTNER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARTNER, new org.apache.thrift.meta_data.FieldMetaData("partner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_country_num_args.class, metaDataMap);
    }

    public query_country_num_args() {
    }

    public query_country_num_args(
      String partner)
    {
      this();
      this.partner = partner;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_country_num_args(query_country_num_args other) {
      if (other.isSetPartner()) {
        this.partner = other.partner;
      }
    }

    public query_country_num_args deepCopy() {
      return new query_country_num_args(this);
    }

    @Override
    public void clear() {
      this.partner = null;
    }

    public String getPartner() {
      return this.partner;
    }

    public query_country_num_args setPartner(String partner) {
      this.partner = partner;
      return this;
    }

    public void unsetPartner() {
      this.partner = null;
    }

    /** Returns true if field partner is set (has been assigned a value) and false otherwise */
    public boolean isSetPartner() {
      return this.partner != null;
    }

    public void setPartnerIsSet(boolean value) {
      if (!value) {
        this.partner = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARTNER:
        if (value == null) {
          unsetPartner();
        } else {
          setPartner((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARTNER:
        return getPartner();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARTNER:
        return isSetPartner();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_country_num_args)
        return this.equals((query_country_num_args)that);
      return false;
    }

    public boolean equals(query_country_num_args that) {
      if (that == null)
        return false;

      boolean this_present_partner = true && this.isSetPartner();
      boolean that_present_partner = true && that.isSetPartner();
      if (this_present_partner || that_present_partner) {
        if (!(this_present_partner && that_present_partner))
          return false;
        if (!this.partner.equals(that.partner))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_partner = true && (isSetPartner());
      list.add(present_partner);
      if (present_partner)
        list.add(partner);

      return list.hashCode();
    }

    @Override
    public int compareTo(query_country_num_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPartner()).compareTo(other.isSetPartner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partner, other.partner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_country_num_args(");
      boolean first = true;

      sb.append("partner:");
      if (this.partner == null) {
        sb.append("null");
      } else {
        sb.append(this.partner);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_country_num_argsStandardSchemeFactory implements SchemeFactory {
      public query_country_num_argsStandardScheme getScheme() {
        return new query_country_num_argsStandardScheme();
      }
    }

    private static class query_country_num_argsStandardScheme extends StandardScheme<query_country_num_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_country_num_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARTNER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.partner = iprot.readString();
                struct.setPartnerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_country_num_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.partner != null) {
          oprot.writeFieldBegin(PARTNER_FIELD_DESC);
          oprot.writeString(struct.partner);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_country_num_argsTupleSchemeFactory implements SchemeFactory {
      public query_country_num_argsTupleScheme getScheme() {
        return new query_country_num_argsTupleScheme();
      }
    }

    private static class query_country_num_argsTupleScheme extends TupleScheme<query_country_num_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, query_country_num_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPartner()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPartner()) {
          oprot.writeString(struct.partner);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, query_country_num_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.partner = iprot.readString();
          struct.setPartnerIsSet(true);
        }
      }
    }

  }

  public static class query_country_num_result implements org.apache.thrift.TBase<query_country_num_result, query_country_num_result._Fields>, java.io.Serializable, Cloneable, Comparable<query_country_num_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_country_num_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_country_num_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_country_num_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_country_num_result.class, metaDataMap);
    }

    public query_country_num_result() {
    }

    public query_country_num_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_country_num_result(query_country_num_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public query_country_num_result deepCopy() {
      return new query_country_num_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public query_country_num_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_country_num_result)
        return this.equals((query_country_num_result)that);
      return false;
    }

    public boolean equals(query_country_num_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(query_country_num_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_country_num_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_country_num_resultStandardSchemeFactory implements SchemeFactory {
      public query_country_num_resultStandardScheme getScheme() {
        return new query_country_num_resultStandardScheme();
      }
    }

    private static class query_country_num_resultStandardScheme extends StandardScheme<query_country_num_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_country_num_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_country_num_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_country_num_resultTupleSchemeFactory implements SchemeFactory {
      public query_country_num_resultTupleScheme getScheme() {
        return new query_country_num_resultTupleScheme();
      }
    }

    private static class query_country_num_resultTupleScheme extends TupleScheme<query_country_num_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, query_country_num_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, query_country_num_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class create_user_group_args implements org.apache.thrift.TBase<create_user_group_args, create_user_group_args._Fields>, java.io.Serializable, Cloneable, Comparable<create_user_group_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_user_group_args");

    private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("group_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField GROUP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("group_name", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_user_group_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new create_user_group_argsTupleSchemeFactory());
    }

    public int group_id; // required
    public String group_name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GROUP_ID((short)1, "group_id"),
      GROUP_NAME((short)2, "group_name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GROUP_ID
            return GROUP_ID;
          case 2: // GROUP_NAME
            return GROUP_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __GROUP_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("group_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.GROUP_NAME, new org.apache.thrift.meta_data.FieldMetaData("group_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_user_group_args.class, metaDataMap);
    }

    public create_user_group_args() {
    }

    public create_user_group_args(
      int group_id,
      String group_name)
    {
      this();
      this.group_id = group_id;
      setGroup_idIsSet(true);
      this.group_name = group_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_user_group_args(create_user_group_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.group_id = other.group_id;
      if (other.isSetGroup_name()) {
        this.group_name = other.group_name;
      }
    }

    public create_user_group_args deepCopy() {
      return new create_user_group_args(this);
    }

    @Override
    public void clear() {
      setGroup_idIsSet(false);
      this.group_id = 0;
      this.group_name = null;
    }

    public int getGroup_id() {
      return this.group_id;
    }

    public create_user_group_args setGroup_id(int group_id) {
      this.group_id = group_id;
      setGroup_idIsSet(true);
      return this;
    }

    public void unsetGroup_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUP_ID_ISSET_ID);
    }

    /** Returns true if field group_id is set (has been assigned a value) and false otherwise */
    public boolean isSetGroup_id() {
      return EncodingUtils.testBit(__isset_bitfield, __GROUP_ID_ISSET_ID);
    }

    public void setGroup_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUP_ID_ISSET_ID, value);
    }

    public String getGroup_name() {
      return this.group_name;
    }

    public create_user_group_args setGroup_name(String group_name) {
      this.group_name = group_name;
      return this;
    }

    public void unsetGroup_name() {
      this.group_name = null;
    }

    /** Returns true if field group_name is set (has been assigned a value) and false otherwise */
    public boolean isSetGroup_name() {
      return this.group_name != null;
    }

    public void setGroup_nameIsSet(boolean value) {
      if (!value) {
        this.group_name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GROUP_ID:
        if (value == null) {
          unsetGroup_id();
        } else {
          setGroup_id((Integer)value);
        }
        break;

      case GROUP_NAME:
        if (value == null) {
          unsetGroup_name();
        } else {
          setGroup_name((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GROUP_ID:
        return Integer.valueOf(getGroup_id());

      case GROUP_NAME:
        return getGroup_name();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GROUP_ID:
        return isSetGroup_id();
      case GROUP_NAME:
        return isSetGroup_name();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_user_group_args)
        return this.equals((create_user_group_args)that);
      return false;
    }

    public boolean equals(create_user_group_args that) {
      if (that == null)
        return false;

      boolean this_present_group_id = true;
      boolean that_present_group_id = true;
      if (this_present_group_id || that_present_group_id) {
        if (!(this_present_group_id && that_present_group_id))
          return false;
        if (this.group_id != that.group_id)
          return false;
      }

      boolean this_present_group_name = true && this.isSetGroup_name();
      boolean that_present_group_name = true && that.isSetGroup_name();
      if (this_present_group_name || that_present_group_name) {
        if (!(this_present_group_name && that_present_group_name))
          return false;
        if (!this.group_name.equals(that.group_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_group_id = true;
      list.add(present_group_id);
      if (present_group_id)
        list.add(group_id);

      boolean present_group_name = true && (isSetGroup_name());
      list.add(present_group_name);
      if (present_group_name)
        list.add(group_name);

      return list.hashCode();
    }

    @Override
    public int compareTo(create_user_group_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGroup_id()).compareTo(other.isSetGroup_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroup_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group_id, other.group_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGroup_name()).compareTo(other.isSetGroup_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroup_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group_name, other.group_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_user_group_args(");
      boolean first = true;

      sb.append("group_id:");
      sb.append(this.group_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("group_name:");
      if (this.group_name == null) {
        sb.append("null");
      } else {
        sb.append(this.group_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_user_group_argsStandardSchemeFactory implements SchemeFactory {
      public create_user_group_argsStandardScheme getScheme() {
        return new create_user_group_argsStandardScheme();
      }
    }

    private static class create_user_group_argsStandardScheme extends StandardScheme<create_user_group_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_user_group_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.group_id = iprot.readI32();
                struct.setGroup_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // GROUP_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.group_name = iprot.readString();
                struct.setGroup_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_user_group_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeI32(struct.group_id);
        oprot.writeFieldEnd();
        if (struct.group_name != null) {
          oprot.writeFieldBegin(GROUP_NAME_FIELD_DESC);
          oprot.writeString(struct.group_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_user_group_argsTupleSchemeFactory implements SchemeFactory {
      public create_user_group_argsTupleScheme getScheme() {
        return new create_user_group_argsTupleScheme();
      }
    }

    private static class create_user_group_argsTupleScheme extends TupleScheme<create_user_group_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_user_group_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGroup_id()) {
          optionals.set(0);
        }
        if (struct.isSetGroup_name()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetGroup_id()) {
          oprot.writeI32(struct.group_id);
        }
        if (struct.isSetGroup_name()) {
          oprot.writeString(struct.group_name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_user_group_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.group_id = iprot.readI32();
          struct.setGroup_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.group_name = iprot.readString();
          struct.setGroup_nameIsSet(true);
        }
      }
    }

  }

  public static class create_user_group_result implements org.apache.thrift.TBase<create_user_group_result, create_user_group_result._Fields>, java.io.Serializable, Cloneable, Comparable<create_user_group_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_user_group_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_user_group_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new create_user_group_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_user_group_result.class, metaDataMap);
    }

    public create_user_group_result() {
    }

    public create_user_group_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_user_group_result(create_user_group_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public create_user_group_result deepCopy() {
      return new create_user_group_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public create_user_group_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_user_group_result)
        return this.equals((create_user_group_result)that);
      return false;
    }

    public boolean equals(create_user_group_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(create_user_group_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_user_group_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_user_group_resultStandardSchemeFactory implements SchemeFactory {
      public create_user_group_resultStandardScheme getScheme() {
        return new create_user_group_resultStandardScheme();
      }
    }

    private static class create_user_group_resultStandardScheme extends StandardScheme<create_user_group_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_user_group_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_user_group_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_user_group_resultTupleSchemeFactory implements SchemeFactory {
      public create_user_group_resultTupleScheme getScheme() {
        return new create_user_group_resultTupleScheme();
      }
    }

    private static class create_user_group_resultTupleScheme extends TupleScheme<create_user_group_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_user_group_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_user_group_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delete_user_group_args implements org.apache.thrift.TBase<delete_user_group_args, delete_user_group_args._Fields>, java.io.Serializable, Cloneable, Comparable<delete_user_group_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delete_user_group_args");

    private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("group_id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delete_user_group_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delete_user_group_argsTupleSchemeFactory());
    }

    public int group_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GROUP_ID((short)1, "group_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GROUP_ID
            return GROUP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __GROUP_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("group_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delete_user_group_args.class, metaDataMap);
    }

    public delete_user_group_args() {
    }

    public delete_user_group_args(
      int group_id)
    {
      this();
      this.group_id = group_id;
      setGroup_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delete_user_group_args(delete_user_group_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.group_id = other.group_id;
    }

    public delete_user_group_args deepCopy() {
      return new delete_user_group_args(this);
    }

    @Override
    public void clear() {
      setGroup_idIsSet(false);
      this.group_id = 0;
    }

    public int getGroup_id() {
      return this.group_id;
    }

    public delete_user_group_args setGroup_id(int group_id) {
      this.group_id = group_id;
      setGroup_idIsSet(true);
      return this;
    }

    public void unsetGroup_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUP_ID_ISSET_ID);
    }

    /** Returns true if field group_id is set (has been assigned a value) and false otherwise */
    public boolean isSetGroup_id() {
      return EncodingUtils.testBit(__isset_bitfield, __GROUP_ID_ISSET_ID);
    }

    public void setGroup_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUP_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GROUP_ID:
        if (value == null) {
          unsetGroup_id();
        } else {
          setGroup_id((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GROUP_ID:
        return Integer.valueOf(getGroup_id());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GROUP_ID:
        return isSetGroup_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delete_user_group_args)
        return this.equals((delete_user_group_args)that);
      return false;
    }

    public boolean equals(delete_user_group_args that) {
      if (that == null)
        return false;

      boolean this_present_group_id = true;
      boolean that_present_group_id = true;
      if (this_present_group_id || that_present_group_id) {
        if (!(this_present_group_id && that_present_group_id))
          return false;
        if (this.group_id != that.group_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_group_id = true;
      list.add(present_group_id);
      if (present_group_id)
        list.add(group_id);

      return list.hashCode();
    }

    @Override
    public int compareTo(delete_user_group_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGroup_id()).compareTo(other.isSetGroup_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroup_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group_id, other.group_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delete_user_group_args(");
      boolean first = true;

      sb.append("group_id:");
      sb.append(this.group_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delete_user_group_argsStandardSchemeFactory implements SchemeFactory {
      public delete_user_group_argsStandardScheme getScheme() {
        return new delete_user_group_argsStandardScheme();
      }
    }

    private static class delete_user_group_argsStandardScheme extends StandardScheme<delete_user_group_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delete_user_group_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.group_id = iprot.readI32();
                struct.setGroup_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delete_user_group_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeI32(struct.group_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delete_user_group_argsTupleSchemeFactory implements SchemeFactory {
      public delete_user_group_argsTupleScheme getScheme() {
        return new delete_user_group_argsTupleScheme();
      }
    }

    private static class delete_user_group_argsTupleScheme extends TupleScheme<delete_user_group_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delete_user_group_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGroup_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGroup_id()) {
          oprot.writeI32(struct.group_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delete_user_group_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.group_id = iprot.readI32();
          struct.setGroup_idIsSet(true);
        }
      }
    }

  }

  public static class delete_user_group_result implements org.apache.thrift.TBase<delete_user_group_result, delete_user_group_result._Fields>, java.io.Serializable, Cloneable, Comparable<delete_user_group_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delete_user_group_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delete_user_group_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delete_user_group_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delete_user_group_result.class, metaDataMap);
    }

    public delete_user_group_result() {
    }

    public delete_user_group_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delete_user_group_result(delete_user_group_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public delete_user_group_result deepCopy() {
      return new delete_user_group_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public delete_user_group_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delete_user_group_result)
        return this.equals((delete_user_group_result)that);
      return false;
    }

    public boolean equals(delete_user_group_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(delete_user_group_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delete_user_group_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delete_user_group_resultStandardSchemeFactory implements SchemeFactory {
      public delete_user_group_resultStandardScheme getScheme() {
        return new delete_user_group_resultStandardScheme();
      }
    }

    private static class delete_user_group_resultStandardScheme extends StandardScheme<delete_user_group_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delete_user_group_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delete_user_group_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delete_user_group_resultTupleSchemeFactory implements SchemeFactory {
      public delete_user_group_resultTupleScheme getScheme() {
        return new delete_user_group_resultTupleScheme();
      }
    }

    private static class delete_user_group_resultTupleScheme extends TupleScheme<delete_user_group_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delete_user_group_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delete_user_group_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class change_user_group_args implements org.apache.thrift.TBase<change_user_group_args, change_user_group_args._Fields>, java.io.Serializable, Cloneable, Comparable<change_user_group_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("change_user_group_args");

    private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("group_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField GROUP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("group_name", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new change_user_group_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new change_user_group_argsTupleSchemeFactory());
    }

    public int group_id; // required
    public String group_name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GROUP_ID((short)1, "group_id"),
      GROUP_NAME((short)2, "group_name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GROUP_ID
            return GROUP_ID;
          case 2: // GROUP_NAME
            return GROUP_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __GROUP_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("group_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.GROUP_NAME, new org.apache.thrift.meta_data.FieldMetaData("group_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(change_user_group_args.class, metaDataMap);
    }

    public change_user_group_args() {
    }

    public change_user_group_args(
      int group_id,
      String group_name)
    {
      this();
      this.group_id = group_id;
      setGroup_idIsSet(true);
      this.group_name = group_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public change_user_group_args(change_user_group_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.group_id = other.group_id;
      if (other.isSetGroup_name()) {
        this.group_name = other.group_name;
      }
    }

    public change_user_group_args deepCopy() {
      return new change_user_group_args(this);
    }

    @Override
    public void clear() {
      setGroup_idIsSet(false);
      this.group_id = 0;
      this.group_name = null;
    }

    public int getGroup_id() {
      return this.group_id;
    }

    public change_user_group_args setGroup_id(int group_id) {
      this.group_id = group_id;
      setGroup_idIsSet(true);
      return this;
    }

    public void unsetGroup_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUP_ID_ISSET_ID);
    }

    /** Returns true if field group_id is set (has been assigned a value) and false otherwise */
    public boolean isSetGroup_id() {
      return EncodingUtils.testBit(__isset_bitfield, __GROUP_ID_ISSET_ID);
    }

    public void setGroup_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUP_ID_ISSET_ID, value);
    }

    public String getGroup_name() {
      return this.group_name;
    }

    public change_user_group_args setGroup_name(String group_name) {
      this.group_name = group_name;
      return this;
    }

    public void unsetGroup_name() {
      this.group_name = null;
    }

    /** Returns true if field group_name is set (has been assigned a value) and false otherwise */
    public boolean isSetGroup_name() {
      return this.group_name != null;
    }

    public void setGroup_nameIsSet(boolean value) {
      if (!value) {
        this.group_name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GROUP_ID:
        if (value == null) {
          unsetGroup_id();
        } else {
          setGroup_id((Integer)value);
        }
        break;

      case GROUP_NAME:
        if (value == null) {
          unsetGroup_name();
        } else {
          setGroup_name((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GROUP_ID:
        return Integer.valueOf(getGroup_id());

      case GROUP_NAME:
        return getGroup_name();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GROUP_ID:
        return isSetGroup_id();
      case GROUP_NAME:
        return isSetGroup_name();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof change_user_group_args)
        return this.equals((change_user_group_args)that);
      return false;
    }

    public boolean equals(change_user_group_args that) {
      if (that == null)
        return false;

      boolean this_present_group_id = true;
      boolean that_present_group_id = true;
      if (this_present_group_id || that_present_group_id) {
        if (!(this_present_group_id && that_present_group_id))
          return false;
        if (this.group_id != that.group_id)
          return false;
      }

      boolean this_present_group_name = true && this.isSetGroup_name();
      boolean that_present_group_name = true && that.isSetGroup_name();
      if (this_present_group_name || that_present_group_name) {
        if (!(this_present_group_name && that_present_group_name))
          return false;
        if (!this.group_name.equals(that.group_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_group_id = true;
      list.add(present_group_id);
      if (present_group_id)
        list.add(group_id);

      boolean present_group_name = true && (isSetGroup_name());
      list.add(present_group_name);
      if (present_group_name)
        list.add(group_name);

      return list.hashCode();
    }

    @Override
    public int compareTo(change_user_group_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGroup_id()).compareTo(other.isSetGroup_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroup_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group_id, other.group_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGroup_name()).compareTo(other.isSetGroup_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroup_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group_name, other.group_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("change_user_group_args(");
      boolean first = true;

      sb.append("group_id:");
      sb.append(this.group_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("group_name:");
      if (this.group_name == null) {
        sb.append("null");
      } else {
        sb.append(this.group_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class change_user_group_argsStandardSchemeFactory implements SchemeFactory {
      public change_user_group_argsStandardScheme getScheme() {
        return new change_user_group_argsStandardScheme();
      }
    }

    private static class change_user_group_argsStandardScheme extends StandardScheme<change_user_group_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, change_user_group_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.group_id = iprot.readI32();
                struct.setGroup_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // GROUP_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.group_name = iprot.readString();
                struct.setGroup_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, change_user_group_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeI32(struct.group_id);
        oprot.writeFieldEnd();
        if (struct.group_name != null) {
          oprot.writeFieldBegin(GROUP_NAME_FIELD_DESC);
          oprot.writeString(struct.group_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class change_user_group_argsTupleSchemeFactory implements SchemeFactory {
      public change_user_group_argsTupleScheme getScheme() {
        return new change_user_group_argsTupleScheme();
      }
    }

    private static class change_user_group_argsTupleScheme extends TupleScheme<change_user_group_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, change_user_group_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGroup_id()) {
          optionals.set(0);
        }
        if (struct.isSetGroup_name()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetGroup_id()) {
          oprot.writeI32(struct.group_id);
        }
        if (struct.isSetGroup_name()) {
          oprot.writeString(struct.group_name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, change_user_group_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.group_id = iprot.readI32();
          struct.setGroup_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.group_name = iprot.readString();
          struct.setGroup_nameIsSet(true);
        }
      }
    }

  }

  public static class change_user_group_result implements org.apache.thrift.TBase<change_user_group_result, change_user_group_result._Fields>, java.io.Serializable, Cloneable, Comparable<change_user_group_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("change_user_group_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new change_user_group_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new change_user_group_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(change_user_group_result.class, metaDataMap);
    }

    public change_user_group_result() {
    }

    public change_user_group_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public change_user_group_result(change_user_group_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public change_user_group_result deepCopy() {
      return new change_user_group_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public change_user_group_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof change_user_group_result)
        return this.equals((change_user_group_result)that);
      return false;
    }

    public boolean equals(change_user_group_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(change_user_group_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("change_user_group_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class change_user_group_resultStandardSchemeFactory implements SchemeFactory {
      public change_user_group_resultStandardScheme getScheme() {
        return new change_user_group_resultStandardScheme();
      }
    }

    private static class change_user_group_resultStandardScheme extends StandardScheme<change_user_group_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, change_user_group_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, change_user_group_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class change_user_group_resultTupleSchemeFactory implements SchemeFactory {
      public change_user_group_resultTupleScheme getScheme() {
        return new change_user_group_resultTupleScheme();
      }
    }

    private static class change_user_group_resultTupleScheme extends TupleScheme<change_user_group_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, change_user_group_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, change_user_group_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class move_device_user_group_args implements org.apache.thrift.TBase<move_device_user_group_args, move_device_user_group_args._Fields>, java.io.Serializable, Cloneable, Comparable<move_device_user_group_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("move_device_user_group_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("device_id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("group_id", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new move_device_user_group_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new move_device_user_group_argsTupleSchemeFactory());
    }

    public String device_id; // required
    public int group_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "device_id"),
      GROUP_ID((short)2, "group_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          case 2: // GROUP_ID
            return GROUP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __GROUP_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("device_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("group_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(move_device_user_group_args.class, metaDataMap);
    }

    public move_device_user_group_args() {
    }

    public move_device_user_group_args(
      String device_id,
      int group_id)
    {
      this();
      this.device_id = device_id;
      this.group_id = group_id;
      setGroup_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public move_device_user_group_args(move_device_user_group_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetDevice_id()) {
        this.device_id = other.device_id;
      }
      this.group_id = other.group_id;
    }

    public move_device_user_group_args deepCopy() {
      return new move_device_user_group_args(this);
    }

    @Override
    public void clear() {
      this.device_id = null;
      setGroup_idIsSet(false);
      this.group_id = 0;
    }

    public String getDevice_id() {
      return this.device_id;
    }

    public move_device_user_group_args setDevice_id(String device_id) {
      this.device_id = device_id;
      return this;
    }

    public void unsetDevice_id() {
      this.device_id = null;
    }

    /** Returns true if field device_id is set (has been assigned a value) and false otherwise */
    public boolean isSetDevice_id() {
      return this.device_id != null;
    }

    public void setDevice_idIsSet(boolean value) {
      if (!value) {
        this.device_id = null;
      }
    }

    public int getGroup_id() {
      return this.group_id;
    }

    public move_device_user_group_args setGroup_id(int group_id) {
      this.group_id = group_id;
      setGroup_idIsSet(true);
      return this;
    }

    public void unsetGroup_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUP_ID_ISSET_ID);
    }

    /** Returns true if field group_id is set (has been assigned a value) and false otherwise */
    public boolean isSetGroup_id() {
      return EncodingUtils.testBit(__isset_bitfield, __GROUP_ID_ISSET_ID);
    }

    public void setGroup_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUP_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDevice_id();
        } else {
          setDevice_id((String)value);
        }
        break;

      case GROUP_ID:
        if (value == null) {
          unsetGroup_id();
        } else {
          setGroup_id((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return getDevice_id();

      case GROUP_ID:
        return Integer.valueOf(getGroup_id());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDevice_id();
      case GROUP_ID:
        return isSetGroup_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof move_device_user_group_args)
        return this.equals((move_device_user_group_args)that);
      return false;
    }

    public boolean equals(move_device_user_group_args that) {
      if (that == null)
        return false;

      boolean this_present_device_id = true && this.isSetDevice_id();
      boolean that_present_device_id = true && that.isSetDevice_id();
      if (this_present_device_id || that_present_device_id) {
        if (!(this_present_device_id && that_present_device_id))
          return false;
        if (!this.device_id.equals(that.device_id))
          return false;
      }

      boolean this_present_group_id = true;
      boolean that_present_group_id = true;
      if (this_present_group_id || that_present_group_id) {
        if (!(this_present_group_id && that_present_group_id))
          return false;
        if (this.group_id != that.group_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_device_id = true && (isSetDevice_id());
      list.add(present_device_id);
      if (present_device_id)
        list.add(device_id);

      boolean present_group_id = true;
      list.add(present_group_id);
      if (present_group_id)
        list.add(group_id);

      return list.hashCode();
    }

    @Override
    public int compareTo(move_device_user_group_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDevice_id()).compareTo(other.isSetDevice_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDevice_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device_id, other.device_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGroup_id()).compareTo(other.isSetGroup_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroup_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group_id, other.group_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("move_device_user_group_args(");
      boolean first = true;

      sb.append("device_id:");
      if (this.device_id == null) {
        sb.append("null");
      } else {
        sb.append(this.device_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("group_id:");
      sb.append(this.group_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class move_device_user_group_argsStandardSchemeFactory implements SchemeFactory {
      public move_device_user_group_argsStandardScheme getScheme() {
        return new move_device_user_group_argsStandardScheme();
      }
    }

    private static class move_device_user_group_argsStandardScheme extends StandardScheme<move_device_user_group_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, move_device_user_group_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.device_id = iprot.readString();
                struct.setDevice_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.group_id = iprot.readI32();
                struct.setGroup_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, move_device_user_group_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.device_id != null) {
          oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.device_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeI32(struct.group_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class move_device_user_group_argsTupleSchemeFactory implements SchemeFactory {
      public move_device_user_group_argsTupleScheme getScheme() {
        return new move_device_user_group_argsTupleScheme();
      }
    }

    private static class move_device_user_group_argsTupleScheme extends TupleScheme<move_device_user_group_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, move_device_user_group_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDevice_id()) {
          optionals.set(0);
        }
        if (struct.isSetGroup_id()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDevice_id()) {
          oprot.writeString(struct.device_id);
        }
        if (struct.isSetGroup_id()) {
          oprot.writeI32(struct.group_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, move_device_user_group_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.device_id = iprot.readString();
          struct.setDevice_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.group_id = iprot.readI32();
          struct.setGroup_idIsSet(true);
        }
      }
    }

  }

  public static class move_device_user_group_result implements org.apache.thrift.TBase<move_device_user_group_result, move_device_user_group_result._Fields>, java.io.Serializable, Cloneable, Comparable<move_device_user_group_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("move_device_user_group_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new move_device_user_group_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new move_device_user_group_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(move_device_user_group_result.class, metaDataMap);
    }

    public move_device_user_group_result() {
    }

    public move_device_user_group_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public move_device_user_group_result(move_device_user_group_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public move_device_user_group_result deepCopy() {
      return new move_device_user_group_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public move_device_user_group_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof move_device_user_group_result)
        return this.equals((move_device_user_group_result)that);
      return false;
    }

    public boolean equals(move_device_user_group_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(move_device_user_group_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("move_device_user_group_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class move_device_user_group_resultStandardSchemeFactory implements SchemeFactory {
      public move_device_user_group_resultStandardScheme getScheme() {
        return new move_device_user_group_resultStandardScheme();
      }
    }

    private static class move_device_user_group_resultStandardScheme extends StandardScheme<move_device_user_group_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, move_device_user_group_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, move_device_user_group_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class move_device_user_group_resultTupleSchemeFactory implements SchemeFactory {
      public move_device_user_group_resultTupleScheme getScheme() {
        return new move_device_user_group_resultTupleScheme();
      }
    }

    private static class move_device_user_group_resultTupleScheme extends TupleScheme<move_device_user_group_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, move_device_user_group_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, move_device_user_group_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class action_user_group_args implements org.apache.thrift.TBase<action_user_group_args, action_user_group_args._Fields>, java.io.Serializable, Cloneable, Comparable<action_user_group_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("action_user_group_args");

    private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("group_id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new action_user_group_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new action_user_group_argsTupleSchemeFactory());
    }

    public int group_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GROUP_ID((short)1, "group_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GROUP_ID
            return GROUP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __GROUP_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("group_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(action_user_group_args.class, metaDataMap);
    }

    public action_user_group_args() {
    }

    public action_user_group_args(
      int group_id)
    {
      this();
      this.group_id = group_id;
      setGroup_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public action_user_group_args(action_user_group_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.group_id = other.group_id;
    }

    public action_user_group_args deepCopy() {
      return new action_user_group_args(this);
    }

    @Override
    public void clear() {
      setGroup_idIsSet(false);
      this.group_id = 0;
    }

    public int getGroup_id() {
      return this.group_id;
    }

    public action_user_group_args setGroup_id(int group_id) {
      this.group_id = group_id;
      setGroup_idIsSet(true);
      return this;
    }

    public void unsetGroup_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUP_ID_ISSET_ID);
    }

    /** Returns true if field group_id is set (has been assigned a value) and false otherwise */
    public boolean isSetGroup_id() {
      return EncodingUtils.testBit(__isset_bitfield, __GROUP_ID_ISSET_ID);
    }

    public void setGroup_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUP_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GROUP_ID:
        if (value == null) {
          unsetGroup_id();
        } else {
          setGroup_id((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GROUP_ID:
        return Integer.valueOf(getGroup_id());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GROUP_ID:
        return isSetGroup_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof action_user_group_args)
        return this.equals((action_user_group_args)that);
      return false;
    }

    public boolean equals(action_user_group_args that) {
      if (that == null)
        return false;

      boolean this_present_group_id = true;
      boolean that_present_group_id = true;
      if (this_present_group_id || that_present_group_id) {
        if (!(this_present_group_id && that_present_group_id))
          return false;
        if (this.group_id != that.group_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_group_id = true;
      list.add(present_group_id);
      if (present_group_id)
        list.add(group_id);

      return list.hashCode();
    }

    @Override
    public int compareTo(action_user_group_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGroup_id()).compareTo(other.isSetGroup_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroup_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group_id, other.group_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("action_user_group_args(");
      boolean first = true;

      sb.append("group_id:");
      sb.append(this.group_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class action_user_group_argsStandardSchemeFactory implements SchemeFactory {
      public action_user_group_argsStandardScheme getScheme() {
        return new action_user_group_argsStandardScheme();
      }
    }

    private static class action_user_group_argsStandardScheme extends StandardScheme<action_user_group_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, action_user_group_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.group_id = iprot.readI32();
                struct.setGroup_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, action_user_group_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeI32(struct.group_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class action_user_group_argsTupleSchemeFactory implements SchemeFactory {
      public action_user_group_argsTupleScheme getScheme() {
        return new action_user_group_argsTupleScheme();
      }
    }

    private static class action_user_group_argsTupleScheme extends TupleScheme<action_user_group_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, action_user_group_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGroup_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGroup_id()) {
          oprot.writeI32(struct.group_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, action_user_group_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.group_id = iprot.readI32();
          struct.setGroup_idIsSet(true);
        }
      }
    }

  }

  public static class action_user_group_result implements org.apache.thrift.TBase<action_user_group_result, action_user_group_result._Fields>, java.io.Serializable, Cloneable, Comparable<action_user_group_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("action_user_group_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new action_user_group_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new action_user_group_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(action_user_group_result.class, metaDataMap);
    }

    public action_user_group_result() {
    }

    public action_user_group_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public action_user_group_result(action_user_group_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public action_user_group_result deepCopy() {
      return new action_user_group_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public action_user_group_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof action_user_group_result)
        return this.equals((action_user_group_result)that);
      return false;
    }

    public boolean equals(action_user_group_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(action_user_group_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("action_user_group_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class action_user_group_resultStandardSchemeFactory implements SchemeFactory {
      public action_user_group_resultStandardScheme getScheme() {
        return new action_user_group_resultStandardScheme();
      }
    }

    private static class action_user_group_resultStandardScheme extends StandardScheme<action_user_group_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, action_user_group_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, action_user_group_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class action_user_group_resultTupleSchemeFactory implements SchemeFactory {
      public action_user_group_resultTupleScheme getScheme() {
        return new action_user_group_resultTupleScheme();
      }
    }

    private static class action_user_group_resultTupleScheme extends TupleScheme<action_user_group_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, action_user_group_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, action_user_group_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class init_user_group_args implements org.apache.thrift.TBase<init_user_group_args, init_user_group_args._Fields>, java.io.Serializable, Cloneable, Comparable<init_user_group_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("init_user_group_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new init_user_group_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new init_user_group_argsTupleSchemeFactory());
    }

    public String user_name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(init_user_group_args.class, metaDataMap);
    }

    public init_user_group_args() {
    }

    public init_user_group_args(
      String user_name)
    {
      this();
      this.user_name = user_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public init_user_group_args(init_user_group_args other) {
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
    }

    public init_user_group_args deepCopy() {
      return new init_user_group_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public init_user_group_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof init_user_group_args)
        return this.equals((init_user_group_args)that);
      return false;
    }

    public boolean equals(init_user_group_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_user_name = true && (isSetUser_name());
      list.add(present_user_name);
      if (present_user_name)
        list.add(user_name);

      return list.hashCode();
    }

    @Override
    public int compareTo(init_user_group_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(other.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, other.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("init_user_group_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class init_user_group_argsStandardSchemeFactory implements SchemeFactory {
      public init_user_group_argsStandardScheme getScheme() {
        return new init_user_group_argsStandardScheme();
      }
    }

    private static class init_user_group_argsStandardScheme extends StandardScheme<init_user_group_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, init_user_group_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, init_user_group_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class init_user_group_argsTupleSchemeFactory implements SchemeFactory {
      public init_user_group_argsTupleScheme getScheme() {
        return new init_user_group_argsTupleScheme();
      }
    }

    private static class init_user_group_argsTupleScheme extends TupleScheme<init_user_group_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, init_user_group_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, init_user_group_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
      }
    }

  }

  public static class init_user_group_result implements org.apache.thrift.TBase<init_user_group_result, init_user_group_result._Fields>, java.io.Serializable, Cloneable, Comparable<init_user_group_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("init_user_group_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new init_user_group_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new init_user_group_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(init_user_group_result.class, metaDataMap);
    }

    public init_user_group_result() {
    }

    public init_user_group_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public init_user_group_result(init_user_group_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public init_user_group_result deepCopy() {
      return new init_user_group_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public init_user_group_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof init_user_group_result)
        return this.equals((init_user_group_result)that);
      return false;
    }

    public boolean equals(init_user_group_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(init_user_group_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("init_user_group_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class init_user_group_resultStandardSchemeFactory implements SchemeFactory {
      public init_user_group_resultStandardScheme getScheme() {
        return new init_user_group_resultStandardScheme();
      }
    }

    private static class init_user_group_resultStandardScheme extends StandardScheme<init_user_group_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, init_user_group_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, init_user_group_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class init_user_group_resultTupleSchemeFactory implements SchemeFactory {
      public init_user_group_resultTupleScheme getScheme() {
        return new init_user_group_resultTupleScheme();
      }
    }

    private static class init_user_group_resultTupleScheme extends TupleScheme<init_user_group_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, init_user_group_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, init_user_group_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class add_camera_type_args implements org.apache.thrift.TBase<add_camera_type_args, add_camera_type_args._Fields>, java.io.Serializable, Cloneable, Comparable<add_camera_type_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("add_camera_type_args");

    private static final org.apache.thrift.protocol.TField CAMERA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("camera_type", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PANO_TYPE_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("PanoTypeEx", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SERIES_FIELD_DESC = new org.apache.thrift.protocol.TField("series", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PANO_TILT_FIELD_DESC = new org.apache.thrift.protocol.TField("PanoTilt", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField PTINFO_FIELD_DESC = new org.apache.thrift.protocol.TField("PTinfo", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new add_camera_type_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new add_camera_type_argsTupleSchemeFactory());
    }

    public String camera_type; // required
    public String PanoTypeEx; // required
    public int series; // required
    public String PanoTilt; // required
    public String PTinfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CAMERA_TYPE((short)1, "camera_type"),
      PANO_TYPE_EX((short)2, "PanoTypeEx"),
      SERIES((short)3, "series"),
      PANO_TILT((short)4, "PanoTilt"),
      PTINFO((short)5, "PTinfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CAMERA_TYPE
            return CAMERA_TYPE;
          case 2: // PANO_TYPE_EX
            return PANO_TYPE_EX;
          case 3: // SERIES
            return SERIES;
          case 4: // PANO_TILT
            return PANO_TILT;
          case 5: // PTINFO
            return PTINFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SERIES_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CAMERA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("camera_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PANO_TYPE_EX, new org.apache.thrift.meta_data.FieldMetaData("PanoTypeEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SERIES, new org.apache.thrift.meta_data.FieldMetaData("series", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PANO_TILT, new org.apache.thrift.meta_data.FieldMetaData("PanoTilt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PTINFO, new org.apache.thrift.meta_data.FieldMetaData("PTinfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(add_camera_type_args.class, metaDataMap);
    }

    public add_camera_type_args() {
    }

    public add_camera_type_args(
      String camera_type,
      String PanoTypeEx,
      int series,
      String PanoTilt,
      String PTinfo)
    {
      this();
      this.camera_type = camera_type;
      this.PanoTypeEx = PanoTypeEx;
      this.series = series;
      setSeriesIsSet(true);
      this.PanoTilt = PanoTilt;
      this.PTinfo = PTinfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public add_camera_type_args(add_camera_type_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetCamera_type()) {
        this.camera_type = other.camera_type;
      }
      if (other.isSetPanoTypeEx()) {
        this.PanoTypeEx = other.PanoTypeEx;
      }
      this.series = other.series;
      if (other.isSetPanoTilt()) {
        this.PanoTilt = other.PanoTilt;
      }
      if (other.isSetPTinfo()) {
        this.PTinfo = other.PTinfo;
      }
    }

    public add_camera_type_args deepCopy() {
      return new add_camera_type_args(this);
    }

    @Override
    public void clear() {
      this.camera_type = null;
      this.PanoTypeEx = null;
      setSeriesIsSet(false);
      this.series = 0;
      this.PanoTilt = null;
      this.PTinfo = null;
    }

    public String getCamera_type() {
      return this.camera_type;
    }

    public add_camera_type_args setCamera_type(String camera_type) {
      this.camera_type = camera_type;
      return this;
    }

    public void unsetCamera_type() {
      this.camera_type = null;
    }

    /** Returns true if field camera_type is set (has been assigned a value) and false otherwise */
    public boolean isSetCamera_type() {
      return this.camera_type != null;
    }

    public void setCamera_typeIsSet(boolean value) {
      if (!value) {
        this.camera_type = null;
      }
    }

    public String getPanoTypeEx() {
      return this.PanoTypeEx;
    }

    public add_camera_type_args setPanoTypeEx(String PanoTypeEx) {
      this.PanoTypeEx = PanoTypeEx;
      return this;
    }

    public void unsetPanoTypeEx() {
      this.PanoTypeEx = null;
    }

    /** Returns true if field PanoTypeEx is set (has been assigned a value) and false otherwise */
    public boolean isSetPanoTypeEx() {
      return this.PanoTypeEx != null;
    }

    public void setPanoTypeExIsSet(boolean value) {
      if (!value) {
        this.PanoTypeEx = null;
      }
    }

    public int getSeries() {
      return this.series;
    }

    public add_camera_type_args setSeries(int series) {
      this.series = series;
      setSeriesIsSet(true);
      return this;
    }

    public void unsetSeries() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERIES_ISSET_ID);
    }

    /** Returns true if field series is set (has been assigned a value) and false otherwise */
    public boolean isSetSeries() {
      return EncodingUtils.testBit(__isset_bitfield, __SERIES_ISSET_ID);
    }

    public void setSeriesIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERIES_ISSET_ID, value);
    }

    public String getPanoTilt() {
      return this.PanoTilt;
    }

    public add_camera_type_args setPanoTilt(String PanoTilt) {
      this.PanoTilt = PanoTilt;
      return this;
    }

    public void unsetPanoTilt() {
      this.PanoTilt = null;
    }

    /** Returns true if field PanoTilt is set (has been assigned a value) and false otherwise */
    public boolean isSetPanoTilt() {
      return this.PanoTilt != null;
    }

    public void setPanoTiltIsSet(boolean value) {
      if (!value) {
        this.PanoTilt = null;
      }
    }

    public String getPTinfo() {
      return this.PTinfo;
    }

    public add_camera_type_args setPTinfo(String PTinfo) {
      this.PTinfo = PTinfo;
      return this;
    }

    public void unsetPTinfo() {
      this.PTinfo = null;
    }

    /** Returns true if field PTinfo is set (has been assigned a value) and false otherwise */
    public boolean isSetPTinfo() {
      return this.PTinfo != null;
    }

    public void setPTinfoIsSet(boolean value) {
      if (!value) {
        this.PTinfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CAMERA_TYPE:
        if (value == null) {
          unsetCamera_type();
        } else {
          setCamera_type((String)value);
        }
        break;

      case PANO_TYPE_EX:
        if (value == null) {
          unsetPanoTypeEx();
        } else {
          setPanoTypeEx((String)value);
        }
        break;

      case SERIES:
        if (value == null) {
          unsetSeries();
        } else {
          setSeries((Integer)value);
        }
        break;

      case PANO_TILT:
        if (value == null) {
          unsetPanoTilt();
        } else {
          setPanoTilt((String)value);
        }
        break;

      case PTINFO:
        if (value == null) {
          unsetPTinfo();
        } else {
          setPTinfo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CAMERA_TYPE:
        return getCamera_type();

      case PANO_TYPE_EX:
        return getPanoTypeEx();

      case SERIES:
        return Integer.valueOf(getSeries());

      case PANO_TILT:
        return getPanoTilt();

      case PTINFO:
        return getPTinfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CAMERA_TYPE:
        return isSetCamera_type();
      case PANO_TYPE_EX:
        return isSetPanoTypeEx();
      case SERIES:
        return isSetSeries();
      case PANO_TILT:
        return isSetPanoTilt();
      case PTINFO:
        return isSetPTinfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof add_camera_type_args)
        return this.equals((add_camera_type_args)that);
      return false;
    }

    public boolean equals(add_camera_type_args that) {
      if (that == null)
        return false;

      boolean this_present_camera_type = true && this.isSetCamera_type();
      boolean that_present_camera_type = true && that.isSetCamera_type();
      if (this_present_camera_type || that_present_camera_type) {
        if (!(this_present_camera_type && that_present_camera_type))
          return false;
        if (!this.camera_type.equals(that.camera_type))
          return false;
      }

      boolean this_present_PanoTypeEx = true && this.isSetPanoTypeEx();
      boolean that_present_PanoTypeEx = true && that.isSetPanoTypeEx();
      if (this_present_PanoTypeEx || that_present_PanoTypeEx) {
        if (!(this_present_PanoTypeEx && that_present_PanoTypeEx))
          return false;
        if (!this.PanoTypeEx.equals(that.PanoTypeEx))
          return false;
      }

      boolean this_present_series = true;
      boolean that_present_series = true;
      if (this_present_series || that_present_series) {
        if (!(this_present_series && that_present_series))
          return false;
        if (this.series != that.series)
          return false;
      }

      boolean this_present_PanoTilt = true && this.isSetPanoTilt();
      boolean that_present_PanoTilt = true && that.isSetPanoTilt();
      if (this_present_PanoTilt || that_present_PanoTilt) {
        if (!(this_present_PanoTilt && that_present_PanoTilt))
          return false;
        if (!this.PanoTilt.equals(that.PanoTilt))
          return false;
      }

      boolean this_present_PTinfo = true && this.isSetPTinfo();
      boolean that_present_PTinfo = true && that.isSetPTinfo();
      if (this_present_PTinfo || that_present_PTinfo) {
        if (!(this_present_PTinfo && that_present_PTinfo))
          return false;
        if (!this.PTinfo.equals(that.PTinfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_camera_type = true && (isSetCamera_type());
      list.add(present_camera_type);
      if (present_camera_type)
        list.add(camera_type);

      boolean present_PanoTypeEx = true && (isSetPanoTypeEx());
      list.add(present_PanoTypeEx);
      if (present_PanoTypeEx)
        list.add(PanoTypeEx);

      boolean present_series = true;
      list.add(present_series);
      if (present_series)
        list.add(series);

      boolean present_PanoTilt = true && (isSetPanoTilt());
      list.add(present_PanoTilt);
      if (present_PanoTilt)
        list.add(PanoTilt);

      boolean present_PTinfo = true && (isSetPTinfo());
      list.add(present_PTinfo);
      if (present_PTinfo)
        list.add(PTinfo);

      return list.hashCode();
    }

    @Override
    public int compareTo(add_camera_type_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCamera_type()).compareTo(other.isSetCamera_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCamera_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.camera_type, other.camera_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPanoTypeEx()).compareTo(other.isSetPanoTypeEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPanoTypeEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PanoTypeEx, other.PanoTypeEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSeries()).compareTo(other.isSetSeries());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeries()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.series, other.series);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPanoTilt()).compareTo(other.isSetPanoTilt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPanoTilt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PanoTilt, other.PanoTilt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPTinfo()).compareTo(other.isSetPTinfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPTinfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PTinfo, other.PTinfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("add_camera_type_args(");
      boolean first = true;

      sb.append("camera_type:");
      if (this.camera_type == null) {
        sb.append("null");
      } else {
        sb.append(this.camera_type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("PanoTypeEx:");
      if (this.PanoTypeEx == null) {
        sb.append("null");
      } else {
        sb.append(this.PanoTypeEx);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("series:");
      sb.append(this.series);
      first = false;
      if (!first) sb.append(", ");
      sb.append("PanoTilt:");
      if (this.PanoTilt == null) {
        sb.append("null");
      } else {
        sb.append(this.PanoTilt);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("PTinfo:");
      if (this.PTinfo == null) {
        sb.append("null");
      } else {
        sb.append(this.PTinfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class add_camera_type_argsStandardSchemeFactory implements SchemeFactory {
      public add_camera_type_argsStandardScheme getScheme() {
        return new add_camera_type_argsStandardScheme();
      }
    }

    private static class add_camera_type_argsStandardScheme extends StandardScheme<add_camera_type_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, add_camera_type_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CAMERA_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.camera_type = iprot.readString();
                struct.setCamera_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PANO_TYPE_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.PanoTypeEx = iprot.readString();
                struct.setPanoTypeExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SERIES
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.series = iprot.readI32();
                struct.setSeriesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PANO_TILT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.PanoTilt = iprot.readString();
                struct.setPanoTiltIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PTINFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.PTinfo = iprot.readString();
                struct.setPTinfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, add_camera_type_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.camera_type != null) {
          oprot.writeFieldBegin(CAMERA_TYPE_FIELD_DESC);
          oprot.writeString(struct.camera_type);
          oprot.writeFieldEnd();
        }
        if (struct.PanoTypeEx != null) {
          oprot.writeFieldBegin(PANO_TYPE_EX_FIELD_DESC);
          oprot.writeString(struct.PanoTypeEx);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SERIES_FIELD_DESC);
        oprot.writeI32(struct.series);
        oprot.writeFieldEnd();
        if (struct.PanoTilt != null) {
          oprot.writeFieldBegin(PANO_TILT_FIELD_DESC);
          oprot.writeString(struct.PanoTilt);
          oprot.writeFieldEnd();
        }
        if (struct.PTinfo != null) {
          oprot.writeFieldBegin(PTINFO_FIELD_DESC);
          oprot.writeString(struct.PTinfo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class add_camera_type_argsTupleSchemeFactory implements SchemeFactory {
      public add_camera_type_argsTupleScheme getScheme() {
        return new add_camera_type_argsTupleScheme();
      }
    }

    private static class add_camera_type_argsTupleScheme extends TupleScheme<add_camera_type_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, add_camera_type_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCamera_type()) {
          optionals.set(0);
        }
        if (struct.isSetPanoTypeEx()) {
          optionals.set(1);
        }
        if (struct.isSetSeries()) {
          optionals.set(2);
        }
        if (struct.isSetPanoTilt()) {
          optionals.set(3);
        }
        if (struct.isSetPTinfo()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetCamera_type()) {
          oprot.writeString(struct.camera_type);
        }
        if (struct.isSetPanoTypeEx()) {
          oprot.writeString(struct.PanoTypeEx);
        }
        if (struct.isSetSeries()) {
          oprot.writeI32(struct.series);
        }
        if (struct.isSetPanoTilt()) {
          oprot.writeString(struct.PanoTilt);
        }
        if (struct.isSetPTinfo()) {
          oprot.writeString(struct.PTinfo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, add_camera_type_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.camera_type = iprot.readString();
          struct.setCamera_typeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.PanoTypeEx = iprot.readString();
          struct.setPanoTypeExIsSet(true);
        }
        if (incoming.get(2)) {
          struct.series = iprot.readI32();
          struct.setSeriesIsSet(true);
        }
        if (incoming.get(3)) {
          struct.PanoTilt = iprot.readString();
          struct.setPanoTiltIsSet(true);
        }
        if (incoming.get(4)) {
          struct.PTinfo = iprot.readString();
          struct.setPTinfoIsSet(true);
        }
      }
    }

  }

  public static class add_camera_type_result implements org.apache.thrift.TBase<add_camera_type_result, add_camera_type_result._Fields>, java.io.Serializable, Cloneable, Comparable<add_camera_type_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("add_camera_type_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new add_camera_type_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new add_camera_type_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(add_camera_type_result.class, metaDataMap);
    }

    public add_camera_type_result() {
    }

    public add_camera_type_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public add_camera_type_result(add_camera_type_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public add_camera_type_result deepCopy() {
      return new add_camera_type_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public add_camera_type_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof add_camera_type_result)
        return this.equals((add_camera_type_result)that);
      return false;
    }

    public boolean equals(add_camera_type_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(add_camera_type_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("add_camera_type_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class add_camera_type_resultStandardSchemeFactory implements SchemeFactory {
      public add_camera_type_resultStandardScheme getScheme() {
        return new add_camera_type_resultStandardScheme();
      }
    }

    private static class add_camera_type_resultStandardScheme extends StandardScheme<add_camera_type_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, add_camera_type_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, add_camera_type_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class add_camera_type_resultTupleSchemeFactory implements SchemeFactory {
      public add_camera_type_resultTupleScheme getScheme() {
        return new add_camera_type_resultTupleScheme();
      }
    }

    private static class add_camera_type_resultTupleScheme extends TupleScheme<add_camera_type_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, add_camera_type_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, add_camera_type_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delete_camera_type_args implements org.apache.thrift.TBase<delete_camera_type_args, delete_camera_type_args._Fields>, java.io.Serializable, Cloneable, Comparable<delete_camera_type_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delete_camera_type_args");

    private static final org.apache.thrift.protocol.TField CAMERA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("camera_type", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delete_camera_type_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delete_camera_type_argsTupleSchemeFactory());
    }

    public String camera_type; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CAMERA_TYPE((short)1, "camera_type");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CAMERA_TYPE
            return CAMERA_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CAMERA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("camera_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delete_camera_type_args.class, metaDataMap);
    }

    public delete_camera_type_args() {
    }

    public delete_camera_type_args(
      String camera_type)
    {
      this();
      this.camera_type = camera_type;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delete_camera_type_args(delete_camera_type_args other) {
      if (other.isSetCamera_type()) {
        this.camera_type = other.camera_type;
      }
    }

    public delete_camera_type_args deepCopy() {
      return new delete_camera_type_args(this);
    }

    @Override
    public void clear() {
      this.camera_type = null;
    }

    public String getCamera_type() {
      return this.camera_type;
    }

    public delete_camera_type_args setCamera_type(String camera_type) {
      this.camera_type = camera_type;
      return this;
    }

    public void unsetCamera_type() {
      this.camera_type = null;
    }

    /** Returns true if field camera_type is set (has been assigned a value) and false otherwise */
    public boolean isSetCamera_type() {
      return this.camera_type != null;
    }

    public void setCamera_typeIsSet(boolean value) {
      if (!value) {
        this.camera_type = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CAMERA_TYPE:
        if (value == null) {
          unsetCamera_type();
        } else {
          setCamera_type((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CAMERA_TYPE:
        return getCamera_type();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CAMERA_TYPE:
        return isSetCamera_type();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delete_camera_type_args)
        return this.equals((delete_camera_type_args)that);
      return false;
    }

    public boolean equals(delete_camera_type_args that) {
      if (that == null)
        return false;

      boolean this_present_camera_type = true && this.isSetCamera_type();
      boolean that_present_camera_type = true && that.isSetCamera_type();
      if (this_present_camera_type || that_present_camera_type) {
        if (!(this_present_camera_type && that_present_camera_type))
          return false;
        if (!this.camera_type.equals(that.camera_type))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_camera_type = true && (isSetCamera_type());
      list.add(present_camera_type);
      if (present_camera_type)
        list.add(camera_type);

      return list.hashCode();
    }

    @Override
    public int compareTo(delete_camera_type_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCamera_type()).compareTo(other.isSetCamera_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCamera_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.camera_type, other.camera_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delete_camera_type_args(");
      boolean first = true;

      sb.append("camera_type:");
      if (this.camera_type == null) {
        sb.append("null");
      } else {
        sb.append(this.camera_type);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delete_camera_type_argsStandardSchemeFactory implements SchemeFactory {
      public delete_camera_type_argsStandardScheme getScheme() {
        return new delete_camera_type_argsStandardScheme();
      }
    }

    private static class delete_camera_type_argsStandardScheme extends StandardScheme<delete_camera_type_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delete_camera_type_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CAMERA_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.camera_type = iprot.readString();
                struct.setCamera_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delete_camera_type_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.camera_type != null) {
          oprot.writeFieldBegin(CAMERA_TYPE_FIELD_DESC);
          oprot.writeString(struct.camera_type);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delete_camera_type_argsTupleSchemeFactory implements SchemeFactory {
      public delete_camera_type_argsTupleScheme getScheme() {
        return new delete_camera_type_argsTupleScheme();
      }
    }

    private static class delete_camera_type_argsTupleScheme extends TupleScheme<delete_camera_type_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delete_camera_type_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCamera_type()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCamera_type()) {
          oprot.writeString(struct.camera_type);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delete_camera_type_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.camera_type = iprot.readString();
          struct.setCamera_typeIsSet(true);
        }
      }
    }

  }

  public static class delete_camera_type_result implements org.apache.thrift.TBase<delete_camera_type_result, delete_camera_type_result._Fields>, java.io.Serializable, Cloneable, Comparable<delete_camera_type_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delete_camera_type_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delete_camera_type_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delete_camera_type_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delete_camera_type_result.class, metaDataMap);
    }

    public delete_camera_type_result() {
    }

    public delete_camera_type_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delete_camera_type_result(delete_camera_type_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public delete_camera_type_result deepCopy() {
      return new delete_camera_type_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public delete_camera_type_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delete_camera_type_result)
        return this.equals((delete_camera_type_result)that);
      return false;
    }

    public boolean equals(delete_camera_type_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(delete_camera_type_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delete_camera_type_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delete_camera_type_resultStandardSchemeFactory implements SchemeFactory {
      public delete_camera_type_resultStandardScheme getScheme() {
        return new delete_camera_type_resultStandardScheme();
      }
    }

    private static class delete_camera_type_resultStandardScheme extends StandardScheme<delete_camera_type_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delete_camera_type_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delete_camera_type_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delete_camera_type_resultTupleSchemeFactory implements SchemeFactory {
      public delete_camera_type_resultTupleScheme getScheme() {
        return new delete_camera_type_resultTupleScheme();
      }
    }

    private static class delete_camera_type_resultTupleScheme extends TupleScheme<delete_camera_type_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delete_camera_type_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delete_camera_type_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class change_camera_type_args implements org.apache.thrift.TBase<change_camera_type_args, change_camera_type_args._Fields>, java.io.Serializable, Cloneable, Comparable<change_camera_type_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("change_camera_type_args");

    private static final org.apache.thrift.protocol.TField CAMERA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("camera_type", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PANO_TYPE_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("PanoTypeEx", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SERIES_FIELD_DESC = new org.apache.thrift.protocol.TField("series", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PANO_TILT_FIELD_DESC = new org.apache.thrift.protocol.TField("PanoTilt", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField PTINFO_FIELD_DESC = new org.apache.thrift.protocol.TField("PTinfo", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new change_camera_type_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new change_camera_type_argsTupleSchemeFactory());
    }

    public String camera_type; // required
    public String PanoTypeEx; // required
    public int series; // required
    public String PanoTilt; // required
    public String PTinfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CAMERA_TYPE((short)1, "camera_type"),
      PANO_TYPE_EX((short)2, "PanoTypeEx"),
      SERIES((short)3, "series"),
      PANO_TILT((short)4, "PanoTilt"),
      PTINFO((short)5, "PTinfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CAMERA_TYPE
            return CAMERA_TYPE;
          case 2: // PANO_TYPE_EX
            return PANO_TYPE_EX;
          case 3: // SERIES
            return SERIES;
          case 4: // PANO_TILT
            return PANO_TILT;
          case 5: // PTINFO
            return PTINFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SERIES_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CAMERA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("camera_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PANO_TYPE_EX, new org.apache.thrift.meta_data.FieldMetaData("PanoTypeEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SERIES, new org.apache.thrift.meta_data.FieldMetaData("series", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PANO_TILT, new org.apache.thrift.meta_data.FieldMetaData("PanoTilt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PTINFO, new org.apache.thrift.meta_data.FieldMetaData("PTinfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(change_camera_type_args.class, metaDataMap);
    }

    public change_camera_type_args() {
    }

    public change_camera_type_args(
      String camera_type,
      String PanoTypeEx,
      int series,
      String PanoTilt,
      String PTinfo)
    {
      this();
      this.camera_type = camera_type;
      this.PanoTypeEx = PanoTypeEx;
      this.series = series;
      setSeriesIsSet(true);
      this.PanoTilt = PanoTilt;
      this.PTinfo = PTinfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public change_camera_type_args(change_camera_type_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetCamera_type()) {
        this.camera_type = other.camera_type;
      }
      if (other.isSetPanoTypeEx()) {
        this.PanoTypeEx = other.PanoTypeEx;
      }
      this.series = other.series;
      if (other.isSetPanoTilt()) {
        this.PanoTilt = other.PanoTilt;
      }
      if (other.isSetPTinfo()) {
        this.PTinfo = other.PTinfo;
      }
    }

    public change_camera_type_args deepCopy() {
      return new change_camera_type_args(this);
    }

    @Override
    public void clear() {
      this.camera_type = null;
      this.PanoTypeEx = null;
      setSeriesIsSet(false);
      this.series = 0;
      this.PanoTilt = null;
      this.PTinfo = null;
    }

    public String getCamera_type() {
      return this.camera_type;
    }

    public change_camera_type_args setCamera_type(String camera_type) {
      this.camera_type = camera_type;
      return this;
    }

    public void unsetCamera_type() {
      this.camera_type = null;
    }

    /** Returns true if field camera_type is set (has been assigned a value) and false otherwise */
    public boolean isSetCamera_type() {
      return this.camera_type != null;
    }

    public void setCamera_typeIsSet(boolean value) {
      if (!value) {
        this.camera_type = null;
      }
    }

    public String getPanoTypeEx() {
      return this.PanoTypeEx;
    }

    public change_camera_type_args setPanoTypeEx(String PanoTypeEx) {
      this.PanoTypeEx = PanoTypeEx;
      return this;
    }

    public void unsetPanoTypeEx() {
      this.PanoTypeEx = null;
    }

    /** Returns true if field PanoTypeEx is set (has been assigned a value) and false otherwise */
    public boolean isSetPanoTypeEx() {
      return this.PanoTypeEx != null;
    }

    public void setPanoTypeExIsSet(boolean value) {
      if (!value) {
        this.PanoTypeEx = null;
      }
    }

    public int getSeries() {
      return this.series;
    }

    public change_camera_type_args setSeries(int series) {
      this.series = series;
      setSeriesIsSet(true);
      return this;
    }

    public void unsetSeries() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERIES_ISSET_ID);
    }

    /** Returns true if field series is set (has been assigned a value) and false otherwise */
    public boolean isSetSeries() {
      return EncodingUtils.testBit(__isset_bitfield, __SERIES_ISSET_ID);
    }

    public void setSeriesIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERIES_ISSET_ID, value);
    }

    public String getPanoTilt() {
      return this.PanoTilt;
    }

    public change_camera_type_args setPanoTilt(String PanoTilt) {
      this.PanoTilt = PanoTilt;
      return this;
    }

    public void unsetPanoTilt() {
      this.PanoTilt = null;
    }

    /** Returns true if field PanoTilt is set (has been assigned a value) and false otherwise */
    public boolean isSetPanoTilt() {
      return this.PanoTilt != null;
    }

    public void setPanoTiltIsSet(boolean value) {
      if (!value) {
        this.PanoTilt = null;
      }
    }

    public String getPTinfo() {
      return this.PTinfo;
    }

    public change_camera_type_args setPTinfo(String PTinfo) {
      this.PTinfo = PTinfo;
      return this;
    }

    public void unsetPTinfo() {
      this.PTinfo = null;
    }

    /** Returns true if field PTinfo is set (has been assigned a value) and false otherwise */
    public boolean isSetPTinfo() {
      return this.PTinfo != null;
    }

    public void setPTinfoIsSet(boolean value) {
      if (!value) {
        this.PTinfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CAMERA_TYPE:
        if (value == null) {
          unsetCamera_type();
        } else {
          setCamera_type((String)value);
        }
        break;

      case PANO_TYPE_EX:
        if (value == null) {
          unsetPanoTypeEx();
        } else {
          setPanoTypeEx((String)value);
        }
        break;

      case SERIES:
        if (value == null) {
          unsetSeries();
        } else {
          setSeries((Integer)value);
        }
        break;

      case PANO_TILT:
        if (value == null) {
          unsetPanoTilt();
        } else {
          setPanoTilt((String)value);
        }
        break;

      case PTINFO:
        if (value == null) {
          unsetPTinfo();
        } else {
          setPTinfo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CAMERA_TYPE:
        return getCamera_type();

      case PANO_TYPE_EX:
        return getPanoTypeEx();

      case SERIES:
        return Integer.valueOf(getSeries());

      case PANO_TILT:
        return getPanoTilt();

      case PTINFO:
        return getPTinfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CAMERA_TYPE:
        return isSetCamera_type();
      case PANO_TYPE_EX:
        return isSetPanoTypeEx();
      case SERIES:
        return isSetSeries();
      case PANO_TILT:
        return isSetPanoTilt();
      case PTINFO:
        return isSetPTinfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof change_camera_type_args)
        return this.equals((change_camera_type_args)that);
      return false;
    }

    public boolean equals(change_camera_type_args that) {
      if (that == null)
        return false;

      boolean this_present_camera_type = true && this.isSetCamera_type();
      boolean that_present_camera_type = true && that.isSetCamera_type();
      if (this_present_camera_type || that_present_camera_type) {
        if (!(this_present_camera_type && that_present_camera_type))
          return false;
        if (!this.camera_type.equals(that.camera_type))
          return false;
      }

      boolean this_present_PanoTypeEx = true && this.isSetPanoTypeEx();
      boolean that_present_PanoTypeEx = true && that.isSetPanoTypeEx();
      if (this_present_PanoTypeEx || that_present_PanoTypeEx) {
        if (!(this_present_PanoTypeEx && that_present_PanoTypeEx))
          return false;
        if (!this.PanoTypeEx.equals(that.PanoTypeEx))
          return false;
      }

      boolean this_present_series = true;
      boolean that_present_series = true;
      if (this_present_series || that_present_series) {
        if (!(this_present_series && that_present_series))
          return false;
        if (this.series != that.series)
          return false;
      }

      boolean this_present_PanoTilt = true && this.isSetPanoTilt();
      boolean that_present_PanoTilt = true && that.isSetPanoTilt();
      if (this_present_PanoTilt || that_present_PanoTilt) {
        if (!(this_present_PanoTilt && that_present_PanoTilt))
          return false;
        if (!this.PanoTilt.equals(that.PanoTilt))
          return false;
      }

      boolean this_present_PTinfo = true && this.isSetPTinfo();
      boolean that_present_PTinfo = true && that.isSetPTinfo();
      if (this_present_PTinfo || that_present_PTinfo) {
        if (!(this_present_PTinfo && that_present_PTinfo))
          return false;
        if (!this.PTinfo.equals(that.PTinfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_camera_type = true && (isSetCamera_type());
      list.add(present_camera_type);
      if (present_camera_type)
        list.add(camera_type);

      boolean present_PanoTypeEx = true && (isSetPanoTypeEx());
      list.add(present_PanoTypeEx);
      if (present_PanoTypeEx)
        list.add(PanoTypeEx);

      boolean present_series = true;
      list.add(present_series);
      if (present_series)
        list.add(series);

      boolean present_PanoTilt = true && (isSetPanoTilt());
      list.add(present_PanoTilt);
      if (present_PanoTilt)
        list.add(PanoTilt);

      boolean present_PTinfo = true && (isSetPTinfo());
      list.add(present_PTinfo);
      if (present_PTinfo)
        list.add(PTinfo);

      return list.hashCode();
    }

    @Override
    public int compareTo(change_camera_type_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCamera_type()).compareTo(other.isSetCamera_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCamera_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.camera_type, other.camera_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPanoTypeEx()).compareTo(other.isSetPanoTypeEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPanoTypeEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PanoTypeEx, other.PanoTypeEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSeries()).compareTo(other.isSetSeries());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeries()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.series, other.series);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPanoTilt()).compareTo(other.isSetPanoTilt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPanoTilt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PanoTilt, other.PanoTilt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPTinfo()).compareTo(other.isSetPTinfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPTinfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PTinfo, other.PTinfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("change_camera_type_args(");
      boolean first = true;

      sb.append("camera_type:");
      if (this.camera_type == null) {
        sb.append("null");
      } else {
        sb.append(this.camera_type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("PanoTypeEx:");
      if (this.PanoTypeEx == null) {
        sb.append("null");
      } else {
        sb.append(this.PanoTypeEx);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("series:");
      sb.append(this.series);
      first = false;
      if (!first) sb.append(", ");
      sb.append("PanoTilt:");
      if (this.PanoTilt == null) {
        sb.append("null");
      } else {
        sb.append(this.PanoTilt);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("PTinfo:");
      if (this.PTinfo == null) {
        sb.append("null");
      } else {
        sb.append(this.PTinfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class change_camera_type_argsStandardSchemeFactory implements SchemeFactory {
      public change_camera_type_argsStandardScheme getScheme() {
        return new change_camera_type_argsStandardScheme();
      }
    }

    private static class change_camera_type_argsStandardScheme extends StandardScheme<change_camera_type_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, change_camera_type_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CAMERA_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.camera_type = iprot.readString();
                struct.setCamera_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PANO_TYPE_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.PanoTypeEx = iprot.readString();
                struct.setPanoTypeExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SERIES
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.series = iprot.readI32();
                struct.setSeriesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PANO_TILT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.PanoTilt = iprot.readString();
                struct.setPanoTiltIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PTINFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.PTinfo = iprot.readString();
                struct.setPTinfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, change_camera_type_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.camera_type != null) {
          oprot.writeFieldBegin(CAMERA_TYPE_FIELD_DESC);
          oprot.writeString(struct.camera_type);
          oprot.writeFieldEnd();
        }
        if (struct.PanoTypeEx != null) {
          oprot.writeFieldBegin(PANO_TYPE_EX_FIELD_DESC);
          oprot.writeString(struct.PanoTypeEx);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SERIES_FIELD_DESC);
        oprot.writeI32(struct.series);
        oprot.writeFieldEnd();
        if (struct.PanoTilt != null) {
          oprot.writeFieldBegin(PANO_TILT_FIELD_DESC);
          oprot.writeString(struct.PanoTilt);
          oprot.writeFieldEnd();
        }
        if (struct.PTinfo != null) {
          oprot.writeFieldBegin(PTINFO_FIELD_DESC);
          oprot.writeString(struct.PTinfo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class change_camera_type_argsTupleSchemeFactory implements SchemeFactory {
      public change_camera_type_argsTupleScheme getScheme() {
        return new change_camera_type_argsTupleScheme();
      }
    }

    private static class change_camera_type_argsTupleScheme extends TupleScheme<change_camera_type_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, change_camera_type_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCamera_type()) {
          optionals.set(0);
        }
        if (struct.isSetPanoTypeEx()) {
          optionals.set(1);
        }
        if (struct.isSetSeries()) {
          optionals.set(2);
        }
        if (struct.isSetPanoTilt()) {
          optionals.set(3);
        }
        if (struct.isSetPTinfo()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetCamera_type()) {
          oprot.writeString(struct.camera_type);
        }
        if (struct.isSetPanoTypeEx()) {
          oprot.writeString(struct.PanoTypeEx);
        }
        if (struct.isSetSeries()) {
          oprot.writeI32(struct.series);
        }
        if (struct.isSetPanoTilt()) {
          oprot.writeString(struct.PanoTilt);
        }
        if (struct.isSetPTinfo()) {
          oprot.writeString(struct.PTinfo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, change_camera_type_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.camera_type = iprot.readString();
          struct.setCamera_typeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.PanoTypeEx = iprot.readString();
          struct.setPanoTypeExIsSet(true);
        }
        if (incoming.get(2)) {
          struct.series = iprot.readI32();
          struct.setSeriesIsSet(true);
        }
        if (incoming.get(3)) {
          struct.PanoTilt = iprot.readString();
          struct.setPanoTiltIsSet(true);
        }
        if (incoming.get(4)) {
          struct.PTinfo = iprot.readString();
          struct.setPTinfoIsSet(true);
        }
      }
    }

  }

  public static class change_camera_type_result implements org.apache.thrift.TBase<change_camera_type_result, change_camera_type_result._Fields>, java.io.Serializable, Cloneable, Comparable<change_camera_type_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("change_camera_type_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new change_camera_type_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new change_camera_type_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(change_camera_type_result.class, metaDataMap);
    }

    public change_camera_type_result() {
    }

    public change_camera_type_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public change_camera_type_result(change_camera_type_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public change_camera_type_result deepCopy() {
      return new change_camera_type_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public change_camera_type_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof change_camera_type_result)
        return this.equals((change_camera_type_result)that);
      return false;
    }

    public boolean equals(change_camera_type_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(change_camera_type_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("change_camera_type_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class change_camera_type_resultStandardSchemeFactory implements SchemeFactory {
      public change_camera_type_resultStandardScheme getScheme() {
        return new change_camera_type_resultStandardScheme();
      }
    }

    private static class change_camera_type_resultStandardScheme extends StandardScheme<change_camera_type_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, change_camera_type_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, change_camera_type_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class change_camera_type_resultTupleSchemeFactory implements SchemeFactory {
      public change_camera_type_resultTupleScheme getScheme() {
        return new change_camera_type_resultTupleScheme();
      }
    }

    private static class change_camera_type_resultTupleScheme extends TupleScheme<change_camera_type_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, change_camera_type_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, change_camera_type_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class query_camera_type_args implements org.apache.thrift.TBase<query_camera_type_args, query_camera_type_args._Fields>, java.io.Serializable, Cloneable, Comparable<query_camera_type_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_camera_type_args");

    private static final org.apache.thrift.protocol.TField CAMERA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("camera_type", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_camera_type_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_camera_type_argsTupleSchemeFactory());
    }

    public String camera_type; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CAMERA_TYPE((short)1, "camera_type");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CAMERA_TYPE
            return CAMERA_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CAMERA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("camera_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_camera_type_args.class, metaDataMap);
    }

    public query_camera_type_args() {
    }

    public query_camera_type_args(
      String camera_type)
    {
      this();
      this.camera_type = camera_type;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_camera_type_args(query_camera_type_args other) {
      if (other.isSetCamera_type()) {
        this.camera_type = other.camera_type;
      }
    }

    public query_camera_type_args deepCopy() {
      return new query_camera_type_args(this);
    }

    @Override
    public void clear() {
      this.camera_type = null;
    }

    public String getCamera_type() {
      return this.camera_type;
    }

    public query_camera_type_args setCamera_type(String camera_type) {
      this.camera_type = camera_type;
      return this;
    }

    public void unsetCamera_type() {
      this.camera_type = null;
    }

    /** Returns true if field camera_type is set (has been assigned a value) and false otherwise */
    public boolean isSetCamera_type() {
      return this.camera_type != null;
    }

    public void setCamera_typeIsSet(boolean value) {
      if (!value) {
        this.camera_type = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CAMERA_TYPE:
        if (value == null) {
          unsetCamera_type();
        } else {
          setCamera_type((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CAMERA_TYPE:
        return getCamera_type();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CAMERA_TYPE:
        return isSetCamera_type();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_camera_type_args)
        return this.equals((query_camera_type_args)that);
      return false;
    }

    public boolean equals(query_camera_type_args that) {
      if (that == null)
        return false;

      boolean this_present_camera_type = true && this.isSetCamera_type();
      boolean that_present_camera_type = true && that.isSetCamera_type();
      if (this_present_camera_type || that_present_camera_type) {
        if (!(this_present_camera_type && that_present_camera_type))
          return false;
        if (!this.camera_type.equals(that.camera_type))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_camera_type = true && (isSetCamera_type());
      list.add(present_camera_type);
      if (present_camera_type)
        list.add(camera_type);

      return list.hashCode();
    }

    @Override
    public int compareTo(query_camera_type_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCamera_type()).compareTo(other.isSetCamera_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCamera_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.camera_type, other.camera_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_camera_type_args(");
      boolean first = true;

      sb.append("camera_type:");
      if (this.camera_type == null) {
        sb.append("null");
      } else {
        sb.append(this.camera_type);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_camera_type_argsStandardSchemeFactory implements SchemeFactory {
      public query_camera_type_argsStandardScheme getScheme() {
        return new query_camera_type_argsStandardScheme();
      }
    }

    private static class query_camera_type_argsStandardScheme extends StandardScheme<query_camera_type_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_camera_type_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CAMERA_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.camera_type = iprot.readString();
                struct.setCamera_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_camera_type_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.camera_type != null) {
          oprot.writeFieldBegin(CAMERA_TYPE_FIELD_DESC);
          oprot.writeString(struct.camera_type);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_camera_type_argsTupleSchemeFactory implements SchemeFactory {
      public query_camera_type_argsTupleScheme getScheme() {
        return new query_camera_type_argsTupleScheme();
      }
    }

    private static class query_camera_type_argsTupleScheme extends TupleScheme<query_camera_type_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, query_camera_type_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCamera_type()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCamera_type()) {
          oprot.writeString(struct.camera_type);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, query_camera_type_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.camera_type = iprot.readString();
          struct.setCamera_typeIsSet(true);
        }
      }
    }

  }

  public static class query_camera_type_result implements org.apache.thrift.TBase<query_camera_type_result, query_camera_type_result._Fields>, java.io.Serializable, Cloneable, Comparable<query_camera_type_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_camera_type_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_camera_type_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_camera_type_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_camera_type_result.class, metaDataMap);
    }

    public query_camera_type_result() {
    }

    public query_camera_type_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_camera_type_result(query_camera_type_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public query_camera_type_result deepCopy() {
      return new query_camera_type_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public query_camera_type_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_camera_type_result)
        return this.equals((query_camera_type_result)that);
      return false;
    }

    public boolean equals(query_camera_type_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(query_camera_type_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_camera_type_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_camera_type_resultStandardSchemeFactory implements SchemeFactory {
      public query_camera_type_resultStandardScheme getScheme() {
        return new query_camera_type_resultStandardScheme();
      }
    }

    private static class query_camera_type_resultStandardScheme extends StandardScheme<query_camera_type_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_camera_type_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_camera_type_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_camera_type_resultTupleSchemeFactory implements SchemeFactory {
      public query_camera_type_resultTupleScheme getScheme() {
        return new query_camera_type_resultTupleScheme();
      }
    }

    private static class query_camera_type_resultTupleScheme extends TupleScheme<query_camera_type_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, query_camera_type_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, query_camera_type_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class select_paging_camera_type_args implements org.apache.thrift.TBase<select_paging_camera_type_args, select_paging_camera_type_args._Fields>, java.io.Serializable, Cloneable, Comparable<select_paging_camera_type_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("select_paging_camera_type_args");

    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STRIP_FIELD_DESC = new org.apache.thrift.protocol.TField("strip", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new select_paging_camera_type_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new select_paging_camera_type_argsTupleSchemeFactory());
    }

    public int page; // required
    public int strip; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE((short)1, "page"),
      STRIP((short)2, "strip");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE
            return PAGE;
          case 2: // STRIP
            return STRIP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGE_ISSET_ID = 0;
    private static final int __STRIP_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STRIP, new org.apache.thrift.meta_data.FieldMetaData("strip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(select_paging_camera_type_args.class, metaDataMap);
    }

    public select_paging_camera_type_args() {
    }

    public select_paging_camera_type_args(
      int page,
      int strip)
    {
      this();
      this.page = page;
      setPageIsSet(true);
      this.strip = strip;
      setStripIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public select_paging_camera_type_args(select_paging_camera_type_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.page = other.page;
      this.strip = other.strip;
    }

    public select_paging_camera_type_args deepCopy() {
      return new select_paging_camera_type_args(this);
    }

    @Override
    public void clear() {
      setPageIsSet(false);
      this.page = 0;
      setStripIsSet(false);
      this.strip = 0;
    }

    public int getPage() {
      return this.page;
    }

    public select_paging_camera_type_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
    }

    public int getStrip() {
      return this.strip;
    }

    public select_paging_camera_type_args setStrip(int strip) {
      this.strip = strip;
      setStripIsSet(true);
      return this;
    }

    public void unsetStrip() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRIP_ISSET_ID);
    }

    /** Returns true if field strip is set (has been assigned a value) and false otherwise */
    public boolean isSetStrip() {
      return EncodingUtils.testBit(__isset_bitfield, __STRIP_ISSET_ID);
    }

    public void setStripIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRIP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case STRIP:
        if (value == null) {
          unsetStrip();
        } else {
          setStrip((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE:
        return Integer.valueOf(getPage());

      case STRIP:
        return Integer.valueOf(getStrip());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE:
        return isSetPage();
      case STRIP:
        return isSetStrip();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof select_paging_camera_type_args)
        return this.equals((select_paging_camera_type_args)that);
      return false;
    }

    public boolean equals(select_paging_camera_type_args that) {
      if (that == null)
        return false;

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_strip = true;
      boolean that_present_strip = true;
      if (this_present_strip || that_present_strip) {
        if (!(this_present_strip && that_present_strip))
          return false;
        if (this.strip != that.strip)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_page = true;
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_strip = true;
      list.add(present_strip);
      if (present_strip)
        list.add(strip);

      return list.hashCode();
    }

    @Override
    public int compareTo(select_paging_camera_type_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStrip()).compareTo(other.isSetStrip());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrip()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strip, other.strip);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("select_paging_camera_type_args(");
      boolean first = true;

      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("strip:");
      sb.append(this.strip);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class select_paging_camera_type_argsStandardSchemeFactory implements SchemeFactory {
      public select_paging_camera_type_argsStandardScheme getScheme() {
        return new select_paging_camera_type_argsStandardScheme();
      }
    }

    private static class select_paging_camera_type_argsStandardScheme extends StandardScheme<select_paging_camera_type_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, select_paging_camera_type_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page = iprot.readI32();
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STRIP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.strip = iprot.readI32();
                struct.setStripIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, select_paging_camera_type_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        oprot.writeI32(struct.page);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(STRIP_FIELD_DESC);
        oprot.writeI32(struct.strip);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class select_paging_camera_type_argsTupleSchemeFactory implements SchemeFactory {
      public select_paging_camera_type_argsTupleScheme getScheme() {
        return new select_paging_camera_type_argsTupleScheme();
      }
    }

    private static class select_paging_camera_type_argsTupleScheme extends TupleScheme<select_paging_camera_type_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, select_paging_camera_type_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPage()) {
          optionals.set(0);
        }
        if (struct.isSetStrip()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPage()) {
          oprot.writeI32(struct.page);
        }
        if (struct.isSetStrip()) {
          oprot.writeI32(struct.strip);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, select_paging_camera_type_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.page = iprot.readI32();
          struct.setPageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.strip = iprot.readI32();
          struct.setStripIsSet(true);
        }
      }
    }

  }

  public static class select_paging_camera_type_result implements org.apache.thrift.TBase<select_paging_camera_type_result, select_paging_camera_type_result._Fields>, java.io.Serializable, Cloneable, Comparable<select_paging_camera_type_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("select_paging_camera_type_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new select_paging_camera_type_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new select_paging_camera_type_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(select_paging_camera_type_result.class, metaDataMap);
    }

    public select_paging_camera_type_result() {
    }

    public select_paging_camera_type_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public select_paging_camera_type_result(select_paging_camera_type_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public select_paging_camera_type_result deepCopy() {
      return new select_paging_camera_type_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public select_paging_camera_type_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof select_paging_camera_type_result)
        return this.equals((select_paging_camera_type_result)that);
      return false;
    }

    public boolean equals(select_paging_camera_type_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(select_paging_camera_type_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("select_paging_camera_type_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class select_paging_camera_type_resultStandardSchemeFactory implements SchemeFactory {
      public select_paging_camera_type_resultStandardScheme getScheme() {
        return new select_paging_camera_type_resultStandardScheme();
      }
    }

    private static class select_paging_camera_type_resultStandardScheme extends StandardScheme<select_paging_camera_type_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, select_paging_camera_type_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, select_paging_camera_type_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class select_paging_camera_type_resultTupleSchemeFactory implements SchemeFactory {
      public select_paging_camera_type_resultTupleScheme getScheme() {
        return new select_paging_camera_type_resultTupleScheme();
      }
    }

    private static class select_paging_camera_type_resultTupleScheme extends TupleScheme<select_paging_camera_type_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, select_paging_camera_type_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, select_paging_camera_type_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class query_partner_args implements org.apache.thrift.TBase<query_partner_args, query_partner_args._Fields>, java.io.Serializable, Cloneable, Comparable<query_partner_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_partner_args");

    private static final org.apache.thrift.protocol.TField PARTNER_FIELD_DESC = new org.apache.thrift.protocol.TField("partner", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_partner_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_partner_argsTupleSchemeFactory());
    }

    public String partner; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARTNER((short)1, "partner");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARTNER
            return PARTNER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARTNER, new org.apache.thrift.meta_data.FieldMetaData("partner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_partner_args.class, metaDataMap);
    }

    public query_partner_args() {
    }

    public query_partner_args(
      String partner)
    {
      this();
      this.partner = partner;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_partner_args(query_partner_args other) {
      if (other.isSetPartner()) {
        this.partner = other.partner;
      }
    }

    public query_partner_args deepCopy() {
      return new query_partner_args(this);
    }

    @Override
    public void clear() {
      this.partner = null;
    }

    public String getPartner() {
      return this.partner;
    }

    public query_partner_args setPartner(String partner) {
      this.partner = partner;
      return this;
    }

    public void unsetPartner() {
      this.partner = null;
    }

    /** Returns true if field partner is set (has been assigned a value) and false otherwise */
    public boolean isSetPartner() {
      return this.partner != null;
    }

    public void setPartnerIsSet(boolean value) {
      if (!value) {
        this.partner = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARTNER:
        if (value == null) {
          unsetPartner();
        } else {
          setPartner((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARTNER:
        return getPartner();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARTNER:
        return isSetPartner();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_partner_args)
        return this.equals((query_partner_args)that);
      return false;
    }

    public boolean equals(query_partner_args that) {
      if (that == null)
        return false;

      boolean this_present_partner = true && this.isSetPartner();
      boolean that_present_partner = true && that.isSetPartner();
      if (this_present_partner || that_present_partner) {
        if (!(this_present_partner && that_present_partner))
          return false;
        if (!this.partner.equals(that.partner))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_partner = true && (isSetPartner());
      list.add(present_partner);
      if (present_partner)
        list.add(partner);

      return list.hashCode();
    }

    @Override
    public int compareTo(query_partner_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPartner()).compareTo(other.isSetPartner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partner, other.partner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_partner_args(");
      boolean first = true;

      sb.append("partner:");
      if (this.partner == null) {
        sb.append("null");
      } else {
        sb.append(this.partner);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_partner_argsStandardSchemeFactory implements SchemeFactory {
      public query_partner_argsStandardScheme getScheme() {
        return new query_partner_argsStandardScheme();
      }
    }

    private static class query_partner_argsStandardScheme extends StandardScheme<query_partner_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_partner_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARTNER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.partner = iprot.readString();
                struct.setPartnerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_partner_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.partner != null) {
          oprot.writeFieldBegin(PARTNER_FIELD_DESC);
          oprot.writeString(struct.partner);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_partner_argsTupleSchemeFactory implements SchemeFactory {
      public query_partner_argsTupleScheme getScheme() {
        return new query_partner_argsTupleScheme();
      }
    }

    private static class query_partner_argsTupleScheme extends TupleScheme<query_partner_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, query_partner_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPartner()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPartner()) {
          oprot.writeString(struct.partner);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, query_partner_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.partner = iprot.readString();
          struct.setPartnerIsSet(true);
        }
      }
    }

  }

  public static class query_partner_result implements org.apache.thrift.TBase<query_partner_result, query_partner_result._Fields>, java.io.Serializable, Cloneable, Comparable<query_partner_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_partner_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_partner_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_partner_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_partner_result.class, metaDataMap);
    }

    public query_partner_result() {
    }

    public query_partner_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_partner_result(query_partner_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public query_partner_result deepCopy() {
      return new query_partner_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public query_partner_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_partner_result)
        return this.equals((query_partner_result)that);
      return false;
    }

    public boolean equals(query_partner_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(query_partner_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_partner_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_partner_resultStandardSchemeFactory implements SchemeFactory {
      public query_partner_resultStandardScheme getScheme() {
        return new query_partner_resultStandardScheme();
      }
    }

    private static class query_partner_resultStandardScheme extends StandardScheme<query_partner_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_partner_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_partner_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_partner_resultTupleSchemeFactory implements SchemeFactory {
      public query_partner_resultTupleScheme getScheme() {
        return new query_partner_resultTupleScheme();
      }
    }

    private static class query_partner_resultTupleScheme extends TupleScheme<query_partner_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, query_partner_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, query_partner_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class query_partner_device_args implements org.apache.thrift.TBase<query_partner_device_args, query_partner_device_args._Fields>, java.io.Serializable, Cloneable, Comparable<query_partner_device_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_partner_device_args");

    private static final org.apache.thrift.protocol.TField PARTNER_FIELD_DESC = new org.apache.thrift.protocol.TField("partner", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MAC_FIELD_DESC = new org.apache.thrift.protocol.TField("mac", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_partner_device_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_partner_device_argsTupleSchemeFactory());
    }

    public String partner; // required
    public String mac; // required
    public int state; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARTNER((short)1, "partner"),
      MAC((short)2, "mac"),
      STATE((short)3, "state");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARTNER
            return PARTNER;
          case 2: // MAC
            return MAC;
          case 3: // STATE
            return STATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STATE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARTNER, new org.apache.thrift.meta_data.FieldMetaData("partner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MAC, new org.apache.thrift.meta_data.FieldMetaData("mac", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_partner_device_args.class, metaDataMap);
    }

    public query_partner_device_args() {
    }

    public query_partner_device_args(
      String partner,
      String mac,
      int state)
    {
      this();
      this.partner = partner;
      this.mac = mac;
      this.state = state;
      setStateIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_partner_device_args(query_partner_device_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPartner()) {
        this.partner = other.partner;
      }
      if (other.isSetMac()) {
        this.mac = other.mac;
      }
      this.state = other.state;
    }

    public query_partner_device_args deepCopy() {
      return new query_partner_device_args(this);
    }

    @Override
    public void clear() {
      this.partner = null;
      this.mac = null;
      setStateIsSet(false);
      this.state = 0;
    }

    public String getPartner() {
      return this.partner;
    }

    public query_partner_device_args setPartner(String partner) {
      this.partner = partner;
      return this;
    }

    public void unsetPartner() {
      this.partner = null;
    }

    /** Returns true if field partner is set (has been assigned a value) and false otherwise */
    public boolean isSetPartner() {
      return this.partner != null;
    }

    public void setPartnerIsSet(boolean value) {
      if (!value) {
        this.partner = null;
      }
    }

    public String getMac() {
      return this.mac;
    }

    public query_partner_device_args setMac(String mac) {
      this.mac = mac;
      return this;
    }

    public void unsetMac() {
      this.mac = null;
    }

    /** Returns true if field mac is set (has been assigned a value) and false otherwise */
    public boolean isSetMac() {
      return this.mac != null;
    }

    public void setMacIsSet(boolean value) {
      if (!value) {
        this.mac = null;
      }
    }

    public int getState() {
      return this.state;
    }

    public query_partner_device_args setState(int state) {
      this.state = state;
      setStateIsSet(true);
      return this;
    }

    public void unsetState() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
    }

    /** Returns true if field state is set (has been assigned a value) and false otherwise */
    public boolean isSetState() {
      return EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
    }

    public void setStateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARTNER:
        if (value == null) {
          unsetPartner();
        } else {
          setPartner((String)value);
        }
        break;

      case MAC:
        if (value == null) {
          unsetMac();
        } else {
          setMac((String)value);
        }
        break;

      case STATE:
        if (value == null) {
          unsetState();
        } else {
          setState((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARTNER:
        return getPartner();

      case MAC:
        return getMac();

      case STATE:
        return Integer.valueOf(getState());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARTNER:
        return isSetPartner();
      case MAC:
        return isSetMac();
      case STATE:
        return isSetState();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_partner_device_args)
        return this.equals((query_partner_device_args)that);
      return false;
    }

    public boolean equals(query_partner_device_args that) {
      if (that == null)
        return false;

      boolean this_present_partner = true && this.isSetPartner();
      boolean that_present_partner = true && that.isSetPartner();
      if (this_present_partner || that_present_partner) {
        if (!(this_present_partner && that_present_partner))
          return false;
        if (!this.partner.equals(that.partner))
          return false;
      }

      boolean this_present_mac = true && this.isSetMac();
      boolean that_present_mac = true && that.isSetMac();
      if (this_present_mac || that_present_mac) {
        if (!(this_present_mac && that_present_mac))
          return false;
        if (!this.mac.equals(that.mac))
          return false;
      }

      boolean this_present_state = true;
      boolean that_present_state = true;
      if (this_present_state || that_present_state) {
        if (!(this_present_state && that_present_state))
          return false;
        if (this.state != that.state)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_partner = true && (isSetPartner());
      list.add(present_partner);
      if (present_partner)
        list.add(partner);

      boolean present_mac = true && (isSetMac());
      list.add(present_mac);
      if (present_mac)
        list.add(mac);

      boolean present_state = true;
      list.add(present_state);
      if (present_state)
        list.add(state);

      return list.hashCode();
    }

    @Override
    public int compareTo(query_partner_device_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPartner()).compareTo(other.isSetPartner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partner, other.partner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMac()).compareTo(other.isSetMac());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMac()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mac, other.mac);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetState()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_partner_device_args(");
      boolean first = true;

      sb.append("partner:");
      if (this.partner == null) {
        sb.append("null");
      } else {
        sb.append(this.partner);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mac:");
      if (this.mac == null) {
        sb.append("null");
      } else {
        sb.append(this.mac);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("state:");
      sb.append(this.state);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_partner_device_argsStandardSchemeFactory implements SchemeFactory {
      public query_partner_device_argsStandardScheme getScheme() {
        return new query_partner_device_argsStandardScheme();
      }
    }

    private static class query_partner_device_argsStandardScheme extends StandardScheme<query_partner_device_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_partner_device_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARTNER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.partner = iprot.readString();
                struct.setPartnerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MAC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mac = iprot.readString();
                struct.setMacIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.state = iprot.readI32();
                struct.setStateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_partner_device_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.partner != null) {
          oprot.writeFieldBegin(PARTNER_FIELD_DESC);
          oprot.writeString(struct.partner);
          oprot.writeFieldEnd();
        }
        if (struct.mac != null) {
          oprot.writeFieldBegin(MAC_FIELD_DESC);
          oprot.writeString(struct.mac);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeI32(struct.state);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_partner_device_argsTupleSchemeFactory implements SchemeFactory {
      public query_partner_device_argsTupleScheme getScheme() {
        return new query_partner_device_argsTupleScheme();
      }
    }

    private static class query_partner_device_argsTupleScheme extends TupleScheme<query_partner_device_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, query_partner_device_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPartner()) {
          optionals.set(0);
        }
        if (struct.isSetMac()) {
          optionals.set(1);
        }
        if (struct.isSetState()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPartner()) {
          oprot.writeString(struct.partner);
        }
        if (struct.isSetMac()) {
          oprot.writeString(struct.mac);
        }
        if (struct.isSetState()) {
          oprot.writeI32(struct.state);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, query_partner_device_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.partner = iprot.readString();
          struct.setPartnerIsSet(true);
        }
        if (incoming.get(1)) {
          struct.mac = iprot.readString();
          struct.setMacIsSet(true);
        }
        if (incoming.get(2)) {
          struct.state = iprot.readI32();
          struct.setStateIsSet(true);
        }
      }
    }

  }

  public static class query_partner_device_result implements org.apache.thrift.TBase<query_partner_device_result, query_partner_device_result._Fields>, java.io.Serializable, Cloneable, Comparable<query_partner_device_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_partner_device_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_partner_device_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_partner_device_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_partner_device_result.class, metaDataMap);
    }

    public query_partner_device_result() {
    }

    public query_partner_device_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_partner_device_result(query_partner_device_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public query_partner_device_result deepCopy() {
      return new query_partner_device_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public query_partner_device_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_partner_device_result)
        return this.equals((query_partner_device_result)that);
      return false;
    }

    public boolean equals(query_partner_device_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(query_partner_device_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_partner_device_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_partner_device_resultStandardSchemeFactory implements SchemeFactory {
      public query_partner_device_resultStandardScheme getScheme() {
        return new query_partner_device_resultStandardScheme();
      }
    }

    private static class query_partner_device_resultStandardScheme extends StandardScheme<query_partner_device_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_partner_device_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_partner_device_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_partner_device_resultTupleSchemeFactory implements SchemeFactory {
      public query_partner_device_resultTupleScheme getScheme() {
        return new query_partner_device_resultTupleScheme();
      }
    }

    private static class query_partner_device_resultTupleScheme extends TupleScheme<query_partner_device_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, query_partner_device_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, query_partner_device_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delete_partner_args implements org.apache.thrift.TBase<delete_partner_args, delete_partner_args._Fields>, java.io.Serializable, Cloneable, Comparable<delete_partner_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delete_partner_args");

    private static final org.apache.thrift.protocol.TField PARTNER_FIELD_DESC = new org.apache.thrift.protocol.TField("partner", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delete_partner_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delete_partner_argsTupleSchemeFactory());
    }

    public String partner; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARTNER((short)1, "partner");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARTNER
            return PARTNER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARTNER, new org.apache.thrift.meta_data.FieldMetaData("partner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delete_partner_args.class, metaDataMap);
    }

    public delete_partner_args() {
    }

    public delete_partner_args(
      String partner)
    {
      this();
      this.partner = partner;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delete_partner_args(delete_partner_args other) {
      if (other.isSetPartner()) {
        this.partner = other.partner;
      }
    }

    public delete_partner_args deepCopy() {
      return new delete_partner_args(this);
    }

    @Override
    public void clear() {
      this.partner = null;
    }

    public String getPartner() {
      return this.partner;
    }

    public delete_partner_args setPartner(String partner) {
      this.partner = partner;
      return this;
    }

    public void unsetPartner() {
      this.partner = null;
    }

    /** Returns true if field partner is set (has been assigned a value) and false otherwise */
    public boolean isSetPartner() {
      return this.partner != null;
    }

    public void setPartnerIsSet(boolean value) {
      if (!value) {
        this.partner = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARTNER:
        if (value == null) {
          unsetPartner();
        } else {
          setPartner((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARTNER:
        return getPartner();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARTNER:
        return isSetPartner();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delete_partner_args)
        return this.equals((delete_partner_args)that);
      return false;
    }

    public boolean equals(delete_partner_args that) {
      if (that == null)
        return false;

      boolean this_present_partner = true && this.isSetPartner();
      boolean that_present_partner = true && that.isSetPartner();
      if (this_present_partner || that_present_partner) {
        if (!(this_present_partner && that_present_partner))
          return false;
        if (!this.partner.equals(that.partner))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_partner = true && (isSetPartner());
      list.add(present_partner);
      if (present_partner)
        list.add(partner);

      return list.hashCode();
    }

    @Override
    public int compareTo(delete_partner_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPartner()).compareTo(other.isSetPartner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partner, other.partner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delete_partner_args(");
      boolean first = true;

      sb.append("partner:");
      if (this.partner == null) {
        sb.append("null");
      } else {
        sb.append(this.partner);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delete_partner_argsStandardSchemeFactory implements SchemeFactory {
      public delete_partner_argsStandardScheme getScheme() {
        return new delete_partner_argsStandardScheme();
      }
    }

    private static class delete_partner_argsStandardScheme extends StandardScheme<delete_partner_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delete_partner_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARTNER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.partner = iprot.readString();
                struct.setPartnerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delete_partner_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.partner != null) {
          oprot.writeFieldBegin(PARTNER_FIELD_DESC);
          oprot.writeString(struct.partner);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delete_partner_argsTupleSchemeFactory implements SchemeFactory {
      public delete_partner_argsTupleScheme getScheme() {
        return new delete_partner_argsTupleScheme();
      }
    }

    private static class delete_partner_argsTupleScheme extends TupleScheme<delete_partner_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delete_partner_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPartner()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPartner()) {
          oprot.writeString(struct.partner);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delete_partner_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.partner = iprot.readString();
          struct.setPartnerIsSet(true);
        }
      }
    }

  }

  public static class delete_partner_result implements org.apache.thrift.TBase<delete_partner_result, delete_partner_result._Fields>, java.io.Serializable, Cloneable, Comparable<delete_partner_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delete_partner_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delete_partner_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delete_partner_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delete_partner_result.class, metaDataMap);
    }

    public delete_partner_result() {
    }

    public delete_partner_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delete_partner_result(delete_partner_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public delete_partner_result deepCopy() {
      return new delete_partner_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public delete_partner_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delete_partner_result)
        return this.equals((delete_partner_result)that);
      return false;
    }

    public boolean equals(delete_partner_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(delete_partner_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delete_partner_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delete_partner_resultStandardSchemeFactory implements SchemeFactory {
      public delete_partner_resultStandardScheme getScheme() {
        return new delete_partner_resultStandardScheme();
      }
    }

    private static class delete_partner_resultStandardScheme extends StandardScheme<delete_partner_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delete_partner_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delete_partner_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delete_partner_resultTupleSchemeFactory implements SchemeFactory {
      public delete_partner_resultTupleScheme getScheme() {
        return new delete_partner_resultTupleScheme();
      }
    }

    private static class delete_partner_resultTupleScheme extends TupleScheme<delete_partner_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delete_partner_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delete_partner_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class query_partner_user_args implements org.apache.thrift.TBase<query_partner_user_args, query_partner_user_args._Fields>, java.io.Serializable, Cloneable, Comparable<query_partner_user_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_partner_user_args");

    private static final org.apache.thrift.protocol.TField PARTNER_FIELD_DESC = new org.apache.thrift.protocol.TField("partner", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_partner_user_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_partner_user_argsTupleSchemeFactory());
    }

    public String partner; // required
    public String user_name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARTNER((short)1, "partner"),
      USER_NAME((short)2, "user_name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARTNER
            return PARTNER;
          case 2: // USER_NAME
            return USER_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARTNER, new org.apache.thrift.meta_data.FieldMetaData("partner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_partner_user_args.class, metaDataMap);
    }

    public query_partner_user_args() {
    }

    public query_partner_user_args(
      String partner,
      String user_name)
    {
      this();
      this.partner = partner;
      this.user_name = user_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_partner_user_args(query_partner_user_args other) {
      if (other.isSetPartner()) {
        this.partner = other.partner;
      }
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
    }

    public query_partner_user_args deepCopy() {
      return new query_partner_user_args(this);
    }

    @Override
    public void clear() {
      this.partner = null;
      this.user_name = null;
    }

    public String getPartner() {
      return this.partner;
    }

    public query_partner_user_args setPartner(String partner) {
      this.partner = partner;
      return this;
    }

    public void unsetPartner() {
      this.partner = null;
    }

    /** Returns true if field partner is set (has been assigned a value) and false otherwise */
    public boolean isSetPartner() {
      return this.partner != null;
    }

    public void setPartnerIsSet(boolean value) {
      if (!value) {
        this.partner = null;
      }
    }

    public String getUser_name() {
      return this.user_name;
    }

    public query_partner_user_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARTNER:
        if (value == null) {
          unsetPartner();
        } else {
          setPartner((String)value);
        }
        break;

      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARTNER:
        return getPartner();

      case USER_NAME:
        return getUser_name();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARTNER:
        return isSetPartner();
      case USER_NAME:
        return isSetUser_name();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_partner_user_args)
        return this.equals((query_partner_user_args)that);
      return false;
    }

    public boolean equals(query_partner_user_args that) {
      if (that == null)
        return false;

      boolean this_present_partner = true && this.isSetPartner();
      boolean that_present_partner = true && that.isSetPartner();
      if (this_present_partner || that_present_partner) {
        if (!(this_present_partner && that_present_partner))
          return false;
        if (!this.partner.equals(that.partner))
          return false;
      }

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_partner = true && (isSetPartner());
      list.add(present_partner);
      if (present_partner)
        list.add(partner);

      boolean present_user_name = true && (isSetUser_name());
      list.add(present_user_name);
      if (present_user_name)
        list.add(user_name);

      return list.hashCode();
    }

    @Override
    public int compareTo(query_partner_user_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPartner()).compareTo(other.isSetPartner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partner, other.partner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(other.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, other.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_partner_user_args(");
      boolean first = true;

      sb.append("partner:");
      if (this.partner == null) {
        sb.append("null");
      } else {
        sb.append(this.partner);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_partner_user_argsStandardSchemeFactory implements SchemeFactory {
      public query_partner_user_argsStandardScheme getScheme() {
        return new query_partner_user_argsStandardScheme();
      }
    }

    private static class query_partner_user_argsStandardScheme extends StandardScheme<query_partner_user_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_partner_user_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARTNER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.partner = iprot.readString();
                struct.setPartnerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_partner_user_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.partner != null) {
          oprot.writeFieldBegin(PARTNER_FIELD_DESC);
          oprot.writeString(struct.partner);
          oprot.writeFieldEnd();
        }
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_partner_user_argsTupleSchemeFactory implements SchemeFactory {
      public query_partner_user_argsTupleScheme getScheme() {
        return new query_partner_user_argsTupleScheme();
      }
    }

    private static class query_partner_user_argsTupleScheme extends TupleScheme<query_partner_user_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, query_partner_user_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPartner()) {
          optionals.set(0);
        }
        if (struct.isSetUser_name()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPartner()) {
          oprot.writeString(struct.partner);
        }
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, query_partner_user_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.partner = iprot.readString();
          struct.setPartnerIsSet(true);
        }
        if (incoming.get(1)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
      }
    }

  }

  public static class query_partner_user_result implements org.apache.thrift.TBase<query_partner_user_result, query_partner_user_result._Fields>, java.io.Serializable, Cloneable, Comparable<query_partner_user_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_partner_user_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_partner_user_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_partner_user_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_partner_user_result.class, metaDataMap);
    }

    public query_partner_user_result() {
    }

    public query_partner_user_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_partner_user_result(query_partner_user_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public query_partner_user_result deepCopy() {
      return new query_partner_user_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public query_partner_user_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_partner_user_result)
        return this.equals((query_partner_user_result)that);
      return false;
    }

    public boolean equals(query_partner_user_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(query_partner_user_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_partner_user_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_partner_user_resultStandardSchemeFactory implements SchemeFactory {
      public query_partner_user_resultStandardScheme getScheme() {
        return new query_partner_user_resultStandardScheme();
      }
    }

    private static class query_partner_user_resultStandardScheme extends StandardScheme<query_partner_user_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_partner_user_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_partner_user_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_partner_user_resultTupleSchemeFactory implements SchemeFactory {
      public query_partner_user_resultTupleScheme getScheme() {
        return new query_partner_user_resultTupleScheme();
      }
    }

    private static class query_partner_user_resultTupleScheme extends TupleScheme<query_partner_user_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, query_partner_user_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, query_partner_user_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class query_allocate_device_args implements org.apache.thrift.TBase<query_allocate_device_args, query_allocate_device_args._Fields>, java.io.Serializable, Cloneable, Comparable<query_allocate_device_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_allocate_device_args");

    private static final org.apache.thrift.protocol.TField PARTNER_FIELD_DESC = new org.apache.thrift.protocol.TField("partner", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_allocate_device_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_allocate_device_argsTupleSchemeFactory());
    }

    public String partner; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARTNER((short)1, "partner");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARTNER
            return PARTNER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARTNER, new org.apache.thrift.meta_data.FieldMetaData("partner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_allocate_device_args.class, metaDataMap);
    }

    public query_allocate_device_args() {
    }

    public query_allocate_device_args(
      String partner)
    {
      this();
      this.partner = partner;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_allocate_device_args(query_allocate_device_args other) {
      if (other.isSetPartner()) {
        this.partner = other.partner;
      }
    }

    public query_allocate_device_args deepCopy() {
      return new query_allocate_device_args(this);
    }

    @Override
    public void clear() {
      this.partner = null;
    }

    public String getPartner() {
      return this.partner;
    }

    public query_allocate_device_args setPartner(String partner) {
      this.partner = partner;
      return this;
    }

    public void unsetPartner() {
      this.partner = null;
    }

    /** Returns true if field partner is set (has been assigned a value) and false otherwise */
    public boolean isSetPartner() {
      return this.partner != null;
    }

    public void setPartnerIsSet(boolean value) {
      if (!value) {
        this.partner = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARTNER:
        if (value == null) {
          unsetPartner();
        } else {
          setPartner((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARTNER:
        return getPartner();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARTNER:
        return isSetPartner();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_allocate_device_args)
        return this.equals((query_allocate_device_args)that);
      return false;
    }

    public boolean equals(query_allocate_device_args that) {
      if (that == null)
        return false;

      boolean this_present_partner = true && this.isSetPartner();
      boolean that_present_partner = true && that.isSetPartner();
      if (this_present_partner || that_present_partner) {
        if (!(this_present_partner && that_present_partner))
          return false;
        if (!this.partner.equals(that.partner))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_partner = true && (isSetPartner());
      list.add(present_partner);
      if (present_partner)
        list.add(partner);

      return list.hashCode();
    }

    @Override
    public int compareTo(query_allocate_device_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPartner()).compareTo(other.isSetPartner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partner, other.partner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_allocate_device_args(");
      boolean first = true;

      sb.append("partner:");
      if (this.partner == null) {
        sb.append("null");
      } else {
        sb.append(this.partner);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_allocate_device_argsStandardSchemeFactory implements SchemeFactory {
      public query_allocate_device_argsStandardScheme getScheme() {
        return new query_allocate_device_argsStandardScheme();
      }
    }

    private static class query_allocate_device_argsStandardScheme extends StandardScheme<query_allocate_device_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_allocate_device_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARTNER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.partner = iprot.readString();
                struct.setPartnerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_allocate_device_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.partner != null) {
          oprot.writeFieldBegin(PARTNER_FIELD_DESC);
          oprot.writeString(struct.partner);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_allocate_device_argsTupleSchemeFactory implements SchemeFactory {
      public query_allocate_device_argsTupleScheme getScheme() {
        return new query_allocate_device_argsTupleScheme();
      }
    }

    private static class query_allocate_device_argsTupleScheme extends TupleScheme<query_allocate_device_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, query_allocate_device_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPartner()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPartner()) {
          oprot.writeString(struct.partner);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, query_allocate_device_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.partner = iprot.readString();
          struct.setPartnerIsSet(true);
        }
      }
    }

  }

  public static class query_allocate_device_result implements org.apache.thrift.TBase<query_allocate_device_result, query_allocate_device_result._Fields>, java.io.Serializable, Cloneable, Comparable<query_allocate_device_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_allocate_device_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_allocate_device_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_allocate_device_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_allocate_device_result.class, metaDataMap);
    }

    public query_allocate_device_result() {
    }

    public query_allocate_device_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_allocate_device_result(query_allocate_device_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public query_allocate_device_result deepCopy() {
      return new query_allocate_device_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public query_allocate_device_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_allocate_device_result)
        return this.equals((query_allocate_device_result)that);
      return false;
    }

    public boolean equals(query_allocate_device_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(query_allocate_device_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_allocate_device_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_allocate_device_resultStandardSchemeFactory implements SchemeFactory {
      public query_allocate_device_resultStandardScheme getScheme() {
        return new query_allocate_device_resultStandardScheme();
      }
    }

    private static class query_allocate_device_resultStandardScheme extends StandardScheme<query_allocate_device_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_allocate_device_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_allocate_device_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_allocate_device_resultTupleSchemeFactory implements SchemeFactory {
      public query_allocate_device_resultTupleScheme getScheme() {
        return new query_allocate_device_resultTupleScheme();
      }
    }

    private static class query_allocate_device_resultTupleScheme extends TupleScheme<query_allocate_device_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, query_allocate_device_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, query_allocate_device_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class partner_allocate_device_args implements org.apache.thrift.TBase<partner_allocate_device_args, partner_allocate_device_args._Fields>, java.io.Serializable, Cloneable, Comparable<partner_allocate_device_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("partner_allocate_device_args");

    private static final org.apache.thrift.protocol.TField F_PARTNER_FIELD_DESC = new org.apache.thrift.protocol.TField("f_partner", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField C_PARTNER_FIELD_DESC = new org.apache.thrift.protocol.TField("c_partner", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MAC_FIELD_DESC = new org.apache.thrift.protocol.TField("mac", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new partner_allocate_device_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new partner_allocate_device_argsTupleSchemeFactory());
    }

    public String f_partner; // required
    public String c_partner; // required
    public String mac; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      F_PARTNER((short)1, "f_partner"),
      C_PARTNER((short)2, "c_partner"),
      MAC((short)3, "mac");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // F_PARTNER
            return F_PARTNER;
          case 2: // C_PARTNER
            return C_PARTNER;
          case 3: // MAC
            return MAC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.F_PARTNER, new org.apache.thrift.meta_data.FieldMetaData("f_partner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.C_PARTNER, new org.apache.thrift.meta_data.FieldMetaData("c_partner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MAC, new org.apache.thrift.meta_data.FieldMetaData("mac", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(partner_allocate_device_args.class, metaDataMap);
    }

    public partner_allocate_device_args() {
    }

    public partner_allocate_device_args(
      String f_partner,
      String c_partner,
      String mac)
    {
      this();
      this.f_partner = f_partner;
      this.c_partner = c_partner;
      this.mac = mac;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public partner_allocate_device_args(partner_allocate_device_args other) {
      if (other.isSetF_partner()) {
        this.f_partner = other.f_partner;
      }
      if (other.isSetC_partner()) {
        this.c_partner = other.c_partner;
      }
      if (other.isSetMac()) {
        this.mac = other.mac;
      }
    }

    public partner_allocate_device_args deepCopy() {
      return new partner_allocate_device_args(this);
    }

    @Override
    public void clear() {
      this.f_partner = null;
      this.c_partner = null;
      this.mac = null;
    }

    public String getF_partner() {
      return this.f_partner;
    }

    public partner_allocate_device_args setF_partner(String f_partner) {
      this.f_partner = f_partner;
      return this;
    }

    public void unsetF_partner() {
      this.f_partner = null;
    }

    /** Returns true if field f_partner is set (has been assigned a value) and false otherwise */
    public boolean isSetF_partner() {
      return this.f_partner != null;
    }

    public void setF_partnerIsSet(boolean value) {
      if (!value) {
        this.f_partner = null;
      }
    }

    public String getC_partner() {
      return this.c_partner;
    }

    public partner_allocate_device_args setC_partner(String c_partner) {
      this.c_partner = c_partner;
      return this;
    }

    public void unsetC_partner() {
      this.c_partner = null;
    }

    /** Returns true if field c_partner is set (has been assigned a value) and false otherwise */
    public boolean isSetC_partner() {
      return this.c_partner != null;
    }

    public void setC_partnerIsSet(boolean value) {
      if (!value) {
        this.c_partner = null;
      }
    }

    public String getMac() {
      return this.mac;
    }

    public partner_allocate_device_args setMac(String mac) {
      this.mac = mac;
      return this;
    }

    public void unsetMac() {
      this.mac = null;
    }

    /** Returns true if field mac is set (has been assigned a value) and false otherwise */
    public boolean isSetMac() {
      return this.mac != null;
    }

    public void setMacIsSet(boolean value) {
      if (!value) {
        this.mac = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case F_PARTNER:
        if (value == null) {
          unsetF_partner();
        } else {
          setF_partner((String)value);
        }
        break;

      case C_PARTNER:
        if (value == null) {
          unsetC_partner();
        } else {
          setC_partner((String)value);
        }
        break;

      case MAC:
        if (value == null) {
          unsetMac();
        } else {
          setMac((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case F_PARTNER:
        return getF_partner();

      case C_PARTNER:
        return getC_partner();

      case MAC:
        return getMac();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case F_PARTNER:
        return isSetF_partner();
      case C_PARTNER:
        return isSetC_partner();
      case MAC:
        return isSetMac();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof partner_allocate_device_args)
        return this.equals((partner_allocate_device_args)that);
      return false;
    }

    public boolean equals(partner_allocate_device_args that) {
      if (that == null)
        return false;

      boolean this_present_f_partner = true && this.isSetF_partner();
      boolean that_present_f_partner = true && that.isSetF_partner();
      if (this_present_f_partner || that_present_f_partner) {
        if (!(this_present_f_partner && that_present_f_partner))
          return false;
        if (!this.f_partner.equals(that.f_partner))
          return false;
      }

      boolean this_present_c_partner = true && this.isSetC_partner();
      boolean that_present_c_partner = true && that.isSetC_partner();
      if (this_present_c_partner || that_present_c_partner) {
        if (!(this_present_c_partner && that_present_c_partner))
          return false;
        if (!this.c_partner.equals(that.c_partner))
          return false;
      }

      boolean this_present_mac = true && this.isSetMac();
      boolean that_present_mac = true && that.isSetMac();
      if (this_present_mac || that_present_mac) {
        if (!(this_present_mac && that_present_mac))
          return false;
        if (!this.mac.equals(that.mac))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_f_partner = true && (isSetF_partner());
      list.add(present_f_partner);
      if (present_f_partner)
        list.add(f_partner);

      boolean present_c_partner = true && (isSetC_partner());
      list.add(present_c_partner);
      if (present_c_partner)
        list.add(c_partner);

      boolean present_mac = true && (isSetMac());
      list.add(present_mac);
      if (present_mac)
        list.add(mac);

      return list.hashCode();
    }

    @Override
    public int compareTo(partner_allocate_device_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetF_partner()).compareTo(other.isSetF_partner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetF_partner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f_partner, other.f_partner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetC_partner()).compareTo(other.isSetC_partner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetC_partner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c_partner, other.c_partner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMac()).compareTo(other.isSetMac());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMac()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mac, other.mac);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("partner_allocate_device_args(");
      boolean first = true;

      sb.append("f_partner:");
      if (this.f_partner == null) {
        sb.append("null");
      } else {
        sb.append(this.f_partner);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("c_partner:");
      if (this.c_partner == null) {
        sb.append("null");
      } else {
        sb.append(this.c_partner);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mac:");
      if (this.mac == null) {
        sb.append("null");
      } else {
        sb.append(this.mac);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class partner_allocate_device_argsStandardSchemeFactory implements SchemeFactory {
      public partner_allocate_device_argsStandardScheme getScheme() {
        return new partner_allocate_device_argsStandardScheme();
      }
    }

    private static class partner_allocate_device_argsStandardScheme extends StandardScheme<partner_allocate_device_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, partner_allocate_device_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // F_PARTNER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.f_partner = iprot.readString();
                struct.setF_partnerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // C_PARTNER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.c_partner = iprot.readString();
                struct.setC_partnerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MAC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mac = iprot.readString();
                struct.setMacIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, partner_allocate_device_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.f_partner != null) {
          oprot.writeFieldBegin(F_PARTNER_FIELD_DESC);
          oprot.writeString(struct.f_partner);
          oprot.writeFieldEnd();
        }
        if (struct.c_partner != null) {
          oprot.writeFieldBegin(C_PARTNER_FIELD_DESC);
          oprot.writeString(struct.c_partner);
          oprot.writeFieldEnd();
        }
        if (struct.mac != null) {
          oprot.writeFieldBegin(MAC_FIELD_DESC);
          oprot.writeString(struct.mac);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class partner_allocate_device_argsTupleSchemeFactory implements SchemeFactory {
      public partner_allocate_device_argsTupleScheme getScheme() {
        return new partner_allocate_device_argsTupleScheme();
      }
    }

    private static class partner_allocate_device_argsTupleScheme extends TupleScheme<partner_allocate_device_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, partner_allocate_device_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetF_partner()) {
          optionals.set(0);
        }
        if (struct.isSetC_partner()) {
          optionals.set(1);
        }
        if (struct.isSetMac()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetF_partner()) {
          oprot.writeString(struct.f_partner);
        }
        if (struct.isSetC_partner()) {
          oprot.writeString(struct.c_partner);
        }
        if (struct.isSetMac()) {
          oprot.writeString(struct.mac);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, partner_allocate_device_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.f_partner = iprot.readString();
          struct.setF_partnerIsSet(true);
        }
        if (incoming.get(1)) {
          struct.c_partner = iprot.readString();
          struct.setC_partnerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.mac = iprot.readString();
          struct.setMacIsSet(true);
        }
      }
    }

  }

  public static class partner_allocate_device_result implements org.apache.thrift.TBase<partner_allocate_device_result, partner_allocate_device_result._Fields>, java.io.Serializable, Cloneable, Comparable<partner_allocate_device_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("partner_allocate_device_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new partner_allocate_device_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new partner_allocate_device_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(partner_allocate_device_result.class, metaDataMap);
    }

    public partner_allocate_device_result() {
    }

    public partner_allocate_device_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public partner_allocate_device_result(partner_allocate_device_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public partner_allocate_device_result deepCopy() {
      return new partner_allocate_device_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public partner_allocate_device_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof partner_allocate_device_result)
        return this.equals((partner_allocate_device_result)that);
      return false;
    }

    public boolean equals(partner_allocate_device_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(partner_allocate_device_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("partner_allocate_device_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class partner_allocate_device_resultStandardSchemeFactory implements SchemeFactory {
      public partner_allocate_device_resultStandardScheme getScheme() {
        return new partner_allocate_device_resultStandardScheme();
      }
    }

    private static class partner_allocate_device_resultStandardScheme extends StandardScheme<partner_allocate_device_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, partner_allocate_device_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, partner_allocate_device_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class partner_allocate_device_resultTupleSchemeFactory implements SchemeFactory {
      public partner_allocate_device_resultTupleScheme getScheme() {
        return new partner_allocate_device_resultTupleScheme();
      }
    }

    private static class partner_allocate_device_resultTupleScheme extends TupleScheme<partner_allocate_device_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, partner_allocate_device_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, partner_allocate_device_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class Web_mysql_server_args implements org.apache.thrift.TBase<Web_mysql_server_args, Web_mysql_server_args._Fields>, java.io.Serializable, Cloneable, Comparable<Web_mysql_server_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Web_mysql_server_args");

    private static final org.apache.thrift.protocol.TField BUF_FIELD_DESC = new org.apache.thrift.protocol.TField("buf", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Web_mysql_server_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Web_mysql_server_argsTupleSchemeFactory());
    }

    public String buf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BUF((short)1, "buf");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUF
            return BUF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUF, new org.apache.thrift.meta_data.FieldMetaData("buf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Web_mysql_server_args.class, metaDataMap);
    }

    public Web_mysql_server_args() {
    }

    public Web_mysql_server_args(
      String buf)
    {
      this();
      this.buf = buf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Web_mysql_server_args(Web_mysql_server_args other) {
      if (other.isSetBuf()) {
        this.buf = other.buf;
      }
    }

    public Web_mysql_server_args deepCopy() {
      return new Web_mysql_server_args(this);
    }

    @Override
    public void clear() {
      this.buf = null;
    }

    public String getBuf() {
      return this.buf;
    }

    public Web_mysql_server_args setBuf(String buf) {
      this.buf = buf;
      return this;
    }

    public void unsetBuf() {
      this.buf = null;
    }

    /** Returns true if field buf is set (has been assigned a value) and false otherwise */
    public boolean isSetBuf() {
      return this.buf != null;
    }

    public void setBufIsSet(boolean value) {
      if (!value) {
        this.buf = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BUF:
        if (value == null) {
          unsetBuf();
        } else {
          setBuf((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BUF:
        return getBuf();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BUF:
        return isSetBuf();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Web_mysql_server_args)
        return this.equals((Web_mysql_server_args)that);
      return false;
    }

    public boolean equals(Web_mysql_server_args that) {
      if (that == null)
        return false;

      boolean this_present_buf = true && this.isSetBuf();
      boolean that_present_buf = true && that.isSetBuf();
      if (this_present_buf || that_present_buf) {
        if (!(this_present_buf && that_present_buf))
          return false;
        if (!this.buf.equals(that.buf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_buf = true && (isSetBuf());
      list.add(present_buf);
      if (present_buf)
        list.add(buf);

      return list.hashCode();
    }

    @Override
    public int compareTo(Web_mysql_server_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBuf()).compareTo(other.isSetBuf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBuf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buf, other.buf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Web_mysql_server_args(");
      boolean first = true;

      sb.append("buf:");
      if (this.buf == null) {
        sb.append("null");
      } else {
        sb.append(this.buf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Web_mysql_server_argsStandardSchemeFactory implements SchemeFactory {
      public Web_mysql_server_argsStandardScheme getScheme() {
        return new Web_mysql_server_argsStandardScheme();
      }
    }

    private static class Web_mysql_server_argsStandardScheme extends StandardScheme<Web_mysql_server_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Web_mysql_server_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.buf = iprot.readString();
                struct.setBufIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Web_mysql_server_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.buf != null) {
          oprot.writeFieldBegin(BUF_FIELD_DESC);
          oprot.writeString(struct.buf);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Web_mysql_server_argsTupleSchemeFactory implements SchemeFactory {
      public Web_mysql_server_argsTupleScheme getScheme() {
        return new Web_mysql_server_argsTupleScheme();
      }
    }

    private static class Web_mysql_server_argsTupleScheme extends TupleScheme<Web_mysql_server_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Web_mysql_server_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBuf()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBuf()) {
          oprot.writeString(struct.buf);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Web_mysql_server_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.buf = iprot.readString();
          struct.setBufIsSet(true);
        }
      }
    }

  }

  public static class Web_mysql_server_result implements org.apache.thrift.TBase<Web_mysql_server_result, Web_mysql_server_result._Fields>, java.io.Serializable, Cloneable, Comparable<Web_mysql_server_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Web_mysql_server_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Web_mysql_server_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Web_mysql_server_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Web_mysql_server_result.class, metaDataMap);
    }

    public Web_mysql_server_result() {
    }

    public Web_mysql_server_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Web_mysql_server_result(Web_mysql_server_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public Web_mysql_server_result deepCopy() {
      return new Web_mysql_server_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public Web_mysql_server_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Web_mysql_server_result)
        return this.equals((Web_mysql_server_result)that);
      return false;
    }

    public boolean equals(Web_mysql_server_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(Web_mysql_server_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Web_mysql_server_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Web_mysql_server_resultStandardSchemeFactory implements SchemeFactory {
      public Web_mysql_server_resultStandardScheme getScheme() {
        return new Web_mysql_server_resultStandardScheme();
      }
    }

    private static class Web_mysql_server_resultStandardScheme extends StandardScheme<Web_mysql_server_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Web_mysql_server_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Web_mysql_server_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Web_mysql_server_resultTupleSchemeFactory implements SchemeFactory {
      public Web_mysql_server_resultTupleScheme getScheme() {
        return new Web_mysql_server_resultTupleScheme();
      }
    }

    private static class Web_mysql_server_resultTupleScheme extends TupleScheme<Web_mysql_server_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Web_mysql_server_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Web_mysql_server_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class partner_recover_device_args implements org.apache.thrift.TBase<partner_recover_device_args, partner_recover_device_args._Fields>, java.io.Serializable, Cloneable, Comparable<partner_recover_device_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("partner_recover_device_args");

    private static final org.apache.thrift.protocol.TField F_PARTNER_FIELD_DESC = new org.apache.thrift.protocol.TField("f_partner", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField C_PARTNER_FIELD_DESC = new org.apache.thrift.protocol.TField("c_partner", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MAC_FIELD_DESC = new org.apache.thrift.protocol.TField("mac", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new partner_recover_device_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new partner_recover_device_argsTupleSchemeFactory());
    }

    public String f_partner; // required
    public String c_partner; // required
    public String mac; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      F_PARTNER((short)1, "f_partner"),
      C_PARTNER((short)2, "c_partner"),
      MAC((short)3, "mac");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // F_PARTNER
            return F_PARTNER;
          case 2: // C_PARTNER
            return C_PARTNER;
          case 3: // MAC
            return MAC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.F_PARTNER, new org.apache.thrift.meta_data.FieldMetaData("f_partner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.C_PARTNER, new org.apache.thrift.meta_data.FieldMetaData("c_partner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MAC, new org.apache.thrift.meta_data.FieldMetaData("mac", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(partner_recover_device_args.class, metaDataMap);
    }

    public partner_recover_device_args() {
    }

    public partner_recover_device_args(
      String f_partner,
      String c_partner,
      String mac)
    {
      this();
      this.f_partner = f_partner;
      this.c_partner = c_partner;
      this.mac = mac;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public partner_recover_device_args(partner_recover_device_args other) {
      if (other.isSetF_partner()) {
        this.f_partner = other.f_partner;
      }
      if (other.isSetC_partner()) {
        this.c_partner = other.c_partner;
      }
      if (other.isSetMac()) {
        this.mac = other.mac;
      }
    }

    public partner_recover_device_args deepCopy() {
      return new partner_recover_device_args(this);
    }

    @Override
    public void clear() {
      this.f_partner = null;
      this.c_partner = null;
      this.mac = null;
    }

    public String getF_partner() {
      return this.f_partner;
    }

    public partner_recover_device_args setF_partner(String f_partner) {
      this.f_partner = f_partner;
      return this;
    }

    public void unsetF_partner() {
      this.f_partner = null;
    }

    /** Returns true if field f_partner is set (has been assigned a value) and false otherwise */
    public boolean isSetF_partner() {
      return this.f_partner != null;
    }

    public void setF_partnerIsSet(boolean value) {
      if (!value) {
        this.f_partner = null;
      }
    }

    public String getC_partner() {
      return this.c_partner;
    }

    public partner_recover_device_args setC_partner(String c_partner) {
      this.c_partner = c_partner;
      return this;
    }

    public void unsetC_partner() {
      this.c_partner = null;
    }

    /** Returns true if field c_partner is set (has been assigned a value) and false otherwise */
    public boolean isSetC_partner() {
      return this.c_partner != null;
    }

    public void setC_partnerIsSet(boolean value) {
      if (!value) {
        this.c_partner = null;
      }
    }

    public String getMac() {
      return this.mac;
    }

    public partner_recover_device_args setMac(String mac) {
      this.mac = mac;
      return this;
    }

    public void unsetMac() {
      this.mac = null;
    }

    /** Returns true if field mac is set (has been assigned a value) and false otherwise */
    public boolean isSetMac() {
      return this.mac != null;
    }

    public void setMacIsSet(boolean value) {
      if (!value) {
        this.mac = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case F_PARTNER:
        if (value == null) {
          unsetF_partner();
        } else {
          setF_partner((String)value);
        }
        break;

      case C_PARTNER:
        if (value == null) {
          unsetC_partner();
        } else {
          setC_partner((String)value);
        }
        break;

      case MAC:
        if (value == null) {
          unsetMac();
        } else {
          setMac((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case F_PARTNER:
        return getF_partner();

      case C_PARTNER:
        return getC_partner();

      case MAC:
        return getMac();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case F_PARTNER:
        return isSetF_partner();
      case C_PARTNER:
        return isSetC_partner();
      case MAC:
        return isSetMac();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof partner_recover_device_args)
        return this.equals((partner_recover_device_args)that);
      return false;
    }

    public boolean equals(partner_recover_device_args that) {
      if (that == null)
        return false;

      boolean this_present_f_partner = true && this.isSetF_partner();
      boolean that_present_f_partner = true && that.isSetF_partner();
      if (this_present_f_partner || that_present_f_partner) {
        if (!(this_present_f_partner && that_present_f_partner))
          return false;
        if (!this.f_partner.equals(that.f_partner))
          return false;
      }

      boolean this_present_c_partner = true && this.isSetC_partner();
      boolean that_present_c_partner = true && that.isSetC_partner();
      if (this_present_c_partner || that_present_c_partner) {
        if (!(this_present_c_partner && that_present_c_partner))
          return false;
        if (!this.c_partner.equals(that.c_partner))
          return false;
      }

      boolean this_present_mac = true && this.isSetMac();
      boolean that_present_mac = true && that.isSetMac();
      if (this_present_mac || that_present_mac) {
        if (!(this_present_mac && that_present_mac))
          return false;
        if (!this.mac.equals(that.mac))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_f_partner = true && (isSetF_partner());
      list.add(present_f_partner);
      if (present_f_partner)
        list.add(f_partner);

      boolean present_c_partner = true && (isSetC_partner());
      list.add(present_c_partner);
      if (present_c_partner)
        list.add(c_partner);

      boolean present_mac = true && (isSetMac());
      list.add(present_mac);
      if (present_mac)
        list.add(mac);

      return list.hashCode();
    }

    @Override
    public int compareTo(partner_recover_device_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetF_partner()).compareTo(other.isSetF_partner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetF_partner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f_partner, other.f_partner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetC_partner()).compareTo(other.isSetC_partner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetC_partner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c_partner, other.c_partner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMac()).compareTo(other.isSetMac());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMac()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mac, other.mac);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("partner_recover_device_args(");
      boolean first = true;

      sb.append("f_partner:");
      if (this.f_partner == null) {
        sb.append("null");
      } else {
        sb.append(this.f_partner);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("c_partner:");
      if (this.c_partner == null) {
        sb.append("null");
      } else {
        sb.append(this.c_partner);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mac:");
      if (this.mac == null) {
        sb.append("null");
      } else {
        sb.append(this.mac);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class partner_recover_device_argsStandardSchemeFactory implements SchemeFactory {
      public partner_recover_device_argsStandardScheme getScheme() {
        return new partner_recover_device_argsStandardScheme();
      }
    }

    private static class partner_recover_device_argsStandardScheme extends StandardScheme<partner_recover_device_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, partner_recover_device_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // F_PARTNER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.f_partner = iprot.readString();
                struct.setF_partnerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // C_PARTNER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.c_partner = iprot.readString();
                struct.setC_partnerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MAC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mac = iprot.readString();
                struct.setMacIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, partner_recover_device_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.f_partner != null) {
          oprot.writeFieldBegin(F_PARTNER_FIELD_DESC);
          oprot.writeString(struct.f_partner);
          oprot.writeFieldEnd();
        }
        if (struct.c_partner != null) {
          oprot.writeFieldBegin(C_PARTNER_FIELD_DESC);
          oprot.writeString(struct.c_partner);
          oprot.writeFieldEnd();
        }
        if (struct.mac != null) {
          oprot.writeFieldBegin(MAC_FIELD_DESC);
          oprot.writeString(struct.mac);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class partner_recover_device_argsTupleSchemeFactory implements SchemeFactory {
      public partner_recover_device_argsTupleScheme getScheme() {
        return new partner_recover_device_argsTupleScheme();
      }
    }

    private static class partner_recover_device_argsTupleScheme extends TupleScheme<partner_recover_device_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, partner_recover_device_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetF_partner()) {
          optionals.set(0);
        }
        if (struct.isSetC_partner()) {
          optionals.set(1);
        }
        if (struct.isSetMac()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetF_partner()) {
          oprot.writeString(struct.f_partner);
        }
        if (struct.isSetC_partner()) {
          oprot.writeString(struct.c_partner);
        }
        if (struct.isSetMac()) {
          oprot.writeString(struct.mac);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, partner_recover_device_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.f_partner = iprot.readString();
          struct.setF_partnerIsSet(true);
        }
        if (incoming.get(1)) {
          struct.c_partner = iprot.readString();
          struct.setC_partnerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.mac = iprot.readString();
          struct.setMacIsSet(true);
        }
      }
    }

  }

  public static class partner_recover_device_result implements org.apache.thrift.TBase<partner_recover_device_result, partner_recover_device_result._Fields>, java.io.Serializable, Cloneable, Comparable<partner_recover_device_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("partner_recover_device_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new partner_recover_device_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new partner_recover_device_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(partner_recover_device_result.class, metaDataMap);
    }

    public partner_recover_device_result() {
    }

    public partner_recover_device_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public partner_recover_device_result(partner_recover_device_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public partner_recover_device_result deepCopy() {
      return new partner_recover_device_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public partner_recover_device_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof partner_recover_device_result)
        return this.equals((partner_recover_device_result)that);
      return false;
    }

    public boolean equals(partner_recover_device_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(partner_recover_device_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("partner_recover_device_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class partner_recover_device_resultStandardSchemeFactory implements SchemeFactory {
      public partner_recover_device_resultStandardScheme getScheme() {
        return new partner_recover_device_resultStandardScheme();
      }
    }

    private static class partner_recover_device_resultStandardScheme extends StandardScheme<partner_recover_device_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, partner_recover_device_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, partner_recover_device_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class partner_recover_device_resultTupleSchemeFactory implements SchemeFactory {
      public partner_recover_device_resultTupleScheme getScheme() {
        return new partner_recover_device_resultTupleScheme();
      }
    }

    private static class partner_recover_device_resultTupleScheme extends TupleScheme<partner_recover_device_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, partner_recover_device_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, partner_recover_device_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class set_issue_id_args implements org.apache.thrift.TBase<set_issue_id_args, set_issue_id_args._Fields>, java.io.Serializable, Cloneable, Comparable<set_issue_id_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("set_issue_id_args");

    private static final org.apache.thrift.protocol.TField MAC_FIELD_DESC = new org.apache.thrift.protocol.TField("mac", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new set_issue_id_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new set_issue_id_argsTupleSchemeFactory());
    }

    public String mac; // required
    public int state; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MAC((short)1, "mac"),
      STATE((short)2, "state");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MAC
            return MAC;
          case 2: // STATE
            return STATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STATE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MAC, new org.apache.thrift.meta_data.FieldMetaData("mac", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(set_issue_id_args.class, metaDataMap);
    }

    public set_issue_id_args() {
    }

    public set_issue_id_args(
      String mac,
      int state)
    {
      this();
      this.mac = mac;
      this.state = state;
      setStateIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public set_issue_id_args(set_issue_id_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMac()) {
        this.mac = other.mac;
      }
      this.state = other.state;
    }

    public set_issue_id_args deepCopy() {
      return new set_issue_id_args(this);
    }

    @Override
    public void clear() {
      this.mac = null;
      setStateIsSet(false);
      this.state = 0;
    }

    public String getMac() {
      return this.mac;
    }

    public set_issue_id_args setMac(String mac) {
      this.mac = mac;
      return this;
    }

    public void unsetMac() {
      this.mac = null;
    }

    /** Returns true if field mac is set (has been assigned a value) and false otherwise */
    public boolean isSetMac() {
      return this.mac != null;
    }

    public void setMacIsSet(boolean value) {
      if (!value) {
        this.mac = null;
      }
    }

    public int getState() {
      return this.state;
    }

    public set_issue_id_args setState(int state) {
      this.state = state;
      setStateIsSet(true);
      return this;
    }

    public void unsetState() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
    }

    /** Returns true if field state is set (has been assigned a value) and false otherwise */
    public boolean isSetState() {
      return EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
    }

    public void setStateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MAC:
        if (value == null) {
          unsetMac();
        } else {
          setMac((String)value);
        }
        break;

      case STATE:
        if (value == null) {
          unsetState();
        } else {
          setState((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MAC:
        return getMac();

      case STATE:
        return Integer.valueOf(getState());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MAC:
        return isSetMac();
      case STATE:
        return isSetState();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof set_issue_id_args)
        return this.equals((set_issue_id_args)that);
      return false;
    }

    public boolean equals(set_issue_id_args that) {
      if (that == null)
        return false;

      boolean this_present_mac = true && this.isSetMac();
      boolean that_present_mac = true && that.isSetMac();
      if (this_present_mac || that_present_mac) {
        if (!(this_present_mac && that_present_mac))
          return false;
        if (!this.mac.equals(that.mac))
          return false;
      }

      boolean this_present_state = true;
      boolean that_present_state = true;
      if (this_present_state || that_present_state) {
        if (!(this_present_state && that_present_state))
          return false;
        if (this.state != that.state)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_mac = true && (isSetMac());
      list.add(present_mac);
      if (present_mac)
        list.add(mac);

      boolean present_state = true;
      list.add(present_state);
      if (present_state)
        list.add(state);

      return list.hashCode();
    }

    @Override
    public int compareTo(set_issue_id_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMac()).compareTo(other.isSetMac());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMac()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mac, other.mac);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetState()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("set_issue_id_args(");
      boolean first = true;

      sb.append("mac:");
      if (this.mac == null) {
        sb.append("null");
      } else {
        sb.append(this.mac);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("state:");
      sb.append(this.state);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class set_issue_id_argsStandardSchemeFactory implements SchemeFactory {
      public set_issue_id_argsStandardScheme getScheme() {
        return new set_issue_id_argsStandardScheme();
      }
    }

    private static class set_issue_id_argsStandardScheme extends StandardScheme<set_issue_id_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, set_issue_id_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MAC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mac = iprot.readString();
                struct.setMacIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.state = iprot.readI32();
                struct.setStateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, set_issue_id_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mac != null) {
          oprot.writeFieldBegin(MAC_FIELD_DESC);
          oprot.writeString(struct.mac);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeI32(struct.state);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class set_issue_id_argsTupleSchemeFactory implements SchemeFactory {
      public set_issue_id_argsTupleScheme getScheme() {
        return new set_issue_id_argsTupleScheme();
      }
    }

    private static class set_issue_id_argsTupleScheme extends TupleScheme<set_issue_id_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, set_issue_id_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMac()) {
          optionals.set(0);
        }
        if (struct.isSetState()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMac()) {
          oprot.writeString(struct.mac);
        }
        if (struct.isSetState()) {
          oprot.writeI32(struct.state);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, set_issue_id_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.mac = iprot.readString();
          struct.setMacIsSet(true);
        }
        if (incoming.get(1)) {
          struct.state = iprot.readI32();
          struct.setStateIsSet(true);
        }
      }
    }

  }

  public static class set_issue_id_result implements org.apache.thrift.TBase<set_issue_id_result, set_issue_id_result._Fields>, java.io.Serializable, Cloneable, Comparable<set_issue_id_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("set_issue_id_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new set_issue_id_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new set_issue_id_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(set_issue_id_result.class, metaDataMap);
    }

    public set_issue_id_result() {
    }

    public set_issue_id_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public set_issue_id_result(set_issue_id_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public set_issue_id_result deepCopy() {
      return new set_issue_id_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public set_issue_id_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof set_issue_id_result)
        return this.equals((set_issue_id_result)that);
      return false;
    }

    public boolean equals(set_issue_id_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(set_issue_id_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("set_issue_id_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class set_issue_id_resultStandardSchemeFactory implements SchemeFactory {
      public set_issue_id_resultStandardScheme getScheme() {
        return new set_issue_id_resultStandardScheme();
      }
    }

    private static class set_issue_id_resultStandardScheme extends StandardScheme<set_issue_id_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, set_issue_id_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, set_issue_id_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class set_issue_id_resultTupleSchemeFactory implements SchemeFactory {
      public set_issue_id_resultTupleScheme getScheme() {
        return new set_issue_id_resultTupleScheme();
      }
    }

    private static class set_issue_id_resultTupleScheme extends TupleScheme<set_issue_id_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, set_issue_id_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, set_issue_id_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class query_issue_id_args implements org.apache.thrift.TBase<query_issue_id_args, query_issue_id_args._Fields>, java.io.Serializable, Cloneable, Comparable<query_issue_id_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_issue_id_args");

    private static final org.apache.thrift.protocol.TField MAC_FIELD_DESC = new org.apache.thrift.protocol.TField("mac", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_issue_id_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_issue_id_argsTupleSchemeFactory());
    }

    public String mac; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MAC((short)1, "mac");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MAC
            return MAC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MAC, new org.apache.thrift.meta_data.FieldMetaData("mac", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_issue_id_args.class, metaDataMap);
    }

    public query_issue_id_args() {
    }

    public query_issue_id_args(
      String mac)
    {
      this();
      this.mac = mac;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_issue_id_args(query_issue_id_args other) {
      if (other.isSetMac()) {
        this.mac = other.mac;
      }
    }

    public query_issue_id_args deepCopy() {
      return new query_issue_id_args(this);
    }

    @Override
    public void clear() {
      this.mac = null;
    }

    public String getMac() {
      return this.mac;
    }

    public query_issue_id_args setMac(String mac) {
      this.mac = mac;
      return this;
    }

    public void unsetMac() {
      this.mac = null;
    }

    /** Returns true if field mac is set (has been assigned a value) and false otherwise */
    public boolean isSetMac() {
      return this.mac != null;
    }

    public void setMacIsSet(boolean value) {
      if (!value) {
        this.mac = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MAC:
        if (value == null) {
          unsetMac();
        } else {
          setMac((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MAC:
        return getMac();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MAC:
        return isSetMac();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_issue_id_args)
        return this.equals((query_issue_id_args)that);
      return false;
    }

    public boolean equals(query_issue_id_args that) {
      if (that == null)
        return false;

      boolean this_present_mac = true && this.isSetMac();
      boolean that_present_mac = true && that.isSetMac();
      if (this_present_mac || that_present_mac) {
        if (!(this_present_mac && that_present_mac))
          return false;
        if (!this.mac.equals(that.mac))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_mac = true && (isSetMac());
      list.add(present_mac);
      if (present_mac)
        list.add(mac);

      return list.hashCode();
    }

    @Override
    public int compareTo(query_issue_id_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMac()).compareTo(other.isSetMac());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMac()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mac, other.mac);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_issue_id_args(");
      boolean first = true;

      sb.append("mac:");
      if (this.mac == null) {
        sb.append("null");
      } else {
        sb.append(this.mac);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_issue_id_argsStandardSchemeFactory implements SchemeFactory {
      public query_issue_id_argsStandardScheme getScheme() {
        return new query_issue_id_argsStandardScheme();
      }
    }

    private static class query_issue_id_argsStandardScheme extends StandardScheme<query_issue_id_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_issue_id_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MAC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mac = iprot.readString();
                struct.setMacIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_issue_id_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mac != null) {
          oprot.writeFieldBegin(MAC_FIELD_DESC);
          oprot.writeString(struct.mac);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_issue_id_argsTupleSchemeFactory implements SchemeFactory {
      public query_issue_id_argsTupleScheme getScheme() {
        return new query_issue_id_argsTupleScheme();
      }
    }

    private static class query_issue_id_argsTupleScheme extends TupleScheme<query_issue_id_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, query_issue_id_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMac()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMac()) {
          oprot.writeString(struct.mac);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, query_issue_id_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.mac = iprot.readString();
          struct.setMacIsSet(true);
        }
      }
    }

  }

  public static class query_issue_id_result implements org.apache.thrift.TBase<query_issue_id_result, query_issue_id_result._Fields>, java.io.Serializable, Cloneable, Comparable<query_issue_id_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_issue_id_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_issue_id_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_issue_id_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_issue_id_result.class, metaDataMap);
    }

    public query_issue_id_result() {
    }

    public query_issue_id_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_issue_id_result(query_issue_id_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public query_issue_id_result deepCopy() {
      return new query_issue_id_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public query_issue_id_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_issue_id_result)
        return this.equals((query_issue_id_result)that);
      return false;
    }

    public boolean equals(query_issue_id_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(query_issue_id_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_issue_id_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_issue_id_resultStandardSchemeFactory implements SchemeFactory {
      public query_issue_id_resultStandardScheme getScheme() {
        return new query_issue_id_resultStandardScheme();
      }
    }

    private static class query_issue_id_resultStandardScheme extends StandardScheme<query_issue_id_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_issue_id_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_issue_id_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_issue_id_resultTupleSchemeFactory implements SchemeFactory {
      public query_issue_id_resultTupleScheme getScheme() {
        return new query_issue_id_resultTupleScheme();
      }
    }

    private static class query_issue_id_resultTupleScheme extends TupleScheme<query_issue_id_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, query_issue_id_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, query_issue_id_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class query_mac_attribute_args implements org.apache.thrift.TBase<query_mac_attribute_args, query_mac_attribute_args._Fields>, java.io.Serializable, Cloneable, Comparable<query_mac_attribute_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_mac_attribute_args");

    private static final org.apache.thrift.protocol.TField PARTNER_FIELD_DESC = new org.apache.thrift.protocol.TField("partner", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_mac_attribute_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_mac_attribute_argsTupleSchemeFactory());
    }

    public String partner; // required
    public String type; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARTNER((short)1, "partner"),
      TYPE((short)2, "type");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARTNER
            return PARTNER;
          case 2: // TYPE
            return TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARTNER, new org.apache.thrift.meta_data.FieldMetaData("partner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_mac_attribute_args.class, metaDataMap);
    }

    public query_mac_attribute_args() {
    }

    public query_mac_attribute_args(
      String partner,
      String type)
    {
      this();
      this.partner = partner;
      this.type = type;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_mac_attribute_args(query_mac_attribute_args other) {
      if (other.isSetPartner()) {
        this.partner = other.partner;
      }
      if (other.isSetType()) {
        this.type = other.type;
      }
    }

    public query_mac_attribute_args deepCopy() {
      return new query_mac_attribute_args(this);
    }

    @Override
    public void clear() {
      this.partner = null;
      this.type = null;
    }

    public String getPartner() {
      return this.partner;
    }

    public query_mac_attribute_args setPartner(String partner) {
      this.partner = partner;
      return this;
    }

    public void unsetPartner() {
      this.partner = null;
    }

    /** Returns true if field partner is set (has been assigned a value) and false otherwise */
    public boolean isSetPartner() {
      return this.partner != null;
    }

    public void setPartnerIsSet(boolean value) {
      if (!value) {
        this.partner = null;
      }
    }

    public String getType() {
      return this.type;
    }

    public query_mac_attribute_args setType(String type) {
      this.type = type;
      return this;
    }

    public void unsetType() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARTNER:
        if (value == null) {
          unsetPartner();
        } else {
          setPartner((String)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARTNER:
        return getPartner();

      case TYPE:
        return getType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARTNER:
        return isSetPartner();
      case TYPE:
        return isSetType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_mac_attribute_args)
        return this.equals((query_mac_attribute_args)that);
      return false;
    }

    public boolean equals(query_mac_attribute_args that) {
      if (that == null)
        return false;

      boolean this_present_partner = true && this.isSetPartner();
      boolean that_present_partner = true && that.isSetPartner();
      if (this_present_partner || that_present_partner) {
        if (!(this_present_partner && that_present_partner))
          return false;
        if (!this.partner.equals(that.partner))
          return false;
      }

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_partner = true && (isSetPartner());
      list.add(present_partner);
      if (present_partner)
        list.add(partner);

      boolean present_type = true && (isSetType());
      list.add(present_type);
      if (present_type)
        list.add(type);

      return list.hashCode();
    }

    @Override
    public int compareTo(query_mac_attribute_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPartner()).compareTo(other.isSetPartner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partner, other.partner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_mac_attribute_args(");
      boolean first = true;

      sb.append("partner:");
      if (this.partner == null) {
        sb.append("null");
      } else {
        sb.append(this.partner);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_mac_attribute_argsStandardSchemeFactory implements SchemeFactory {
      public query_mac_attribute_argsStandardScheme getScheme() {
        return new query_mac_attribute_argsStandardScheme();
      }
    }

    private static class query_mac_attribute_argsStandardScheme extends StandardScheme<query_mac_attribute_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_mac_attribute_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARTNER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.partner = iprot.readString();
                struct.setPartnerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.type = iprot.readString();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_mac_attribute_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.partner != null) {
          oprot.writeFieldBegin(PARTNER_FIELD_DESC);
          oprot.writeString(struct.partner);
          oprot.writeFieldEnd();
        }
        if (struct.type != null) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_mac_attribute_argsTupleSchemeFactory implements SchemeFactory {
      public query_mac_attribute_argsTupleScheme getScheme() {
        return new query_mac_attribute_argsTupleScheme();
      }
    }

    private static class query_mac_attribute_argsTupleScheme extends TupleScheme<query_mac_attribute_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, query_mac_attribute_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPartner()) {
          optionals.set(0);
        }
        if (struct.isSetType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPartner()) {
          oprot.writeString(struct.partner);
        }
        if (struct.isSetType()) {
          oprot.writeString(struct.type);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, query_mac_attribute_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.partner = iprot.readString();
          struct.setPartnerIsSet(true);
        }
        if (incoming.get(1)) {
          struct.type = iprot.readString();
          struct.setTypeIsSet(true);
        }
      }
    }

  }

  public static class query_mac_attribute_result implements org.apache.thrift.TBase<query_mac_attribute_result, query_mac_attribute_result._Fields>, java.io.Serializable, Cloneable, Comparable<query_mac_attribute_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_mac_attribute_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_mac_attribute_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_mac_attribute_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_mac_attribute_result.class, metaDataMap);
    }

    public query_mac_attribute_result() {
    }

    public query_mac_attribute_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_mac_attribute_result(query_mac_attribute_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public query_mac_attribute_result deepCopy() {
      return new query_mac_attribute_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public query_mac_attribute_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_mac_attribute_result)
        return this.equals((query_mac_attribute_result)that);
      return false;
    }

    public boolean equals(query_mac_attribute_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(query_mac_attribute_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_mac_attribute_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_mac_attribute_resultStandardSchemeFactory implements SchemeFactory {
      public query_mac_attribute_resultStandardScheme getScheme() {
        return new query_mac_attribute_resultStandardScheme();
      }
    }

    private static class query_mac_attribute_resultStandardScheme extends StandardScheme<query_mac_attribute_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_mac_attribute_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_mac_attribute_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_mac_attribute_resultTupleSchemeFactory implements SchemeFactory {
      public query_mac_attribute_resultTupleScheme getScheme() {
        return new query_mac_attribute_resultTupleScheme();
      }
    }

    private static class query_mac_attribute_resultTupleScheme extends TupleScheme<query_mac_attribute_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, query_mac_attribute_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, query_mac_attribute_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class send_mail_args implements org.apache.thrift.TBase<send_mail_args, send_mail_args._Fields>, java.io.Serializable, Cloneable, Comparable<send_mail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("send_mail_args");

    private static final org.apache.thrift.protocol.TField BUF_FIELD_DESC = new org.apache.thrift.protocol.TField("buf", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new send_mail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new send_mail_argsTupleSchemeFactory());
    }

    public String buf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BUF((short)1, "buf");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUF
            return BUF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUF, new org.apache.thrift.meta_data.FieldMetaData("buf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(send_mail_args.class, metaDataMap);
    }

    public send_mail_args() {
    }

    public send_mail_args(
      String buf)
    {
      this();
      this.buf = buf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public send_mail_args(send_mail_args other) {
      if (other.isSetBuf()) {
        this.buf = other.buf;
      }
    }

    public send_mail_args deepCopy() {
      return new send_mail_args(this);
    }

    @Override
    public void clear() {
      this.buf = null;
    }

    public String getBuf() {
      return this.buf;
    }

    public send_mail_args setBuf(String buf) {
      this.buf = buf;
      return this;
    }

    public void unsetBuf() {
      this.buf = null;
    }

    /** Returns true if field buf is set (has been assigned a value) and false otherwise */
    public boolean isSetBuf() {
      return this.buf != null;
    }

    public void setBufIsSet(boolean value) {
      if (!value) {
        this.buf = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BUF:
        if (value == null) {
          unsetBuf();
        } else {
          setBuf((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BUF:
        return getBuf();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BUF:
        return isSetBuf();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof send_mail_args)
        return this.equals((send_mail_args)that);
      return false;
    }

    public boolean equals(send_mail_args that) {
      if (that == null)
        return false;

      boolean this_present_buf = true && this.isSetBuf();
      boolean that_present_buf = true && that.isSetBuf();
      if (this_present_buf || that_present_buf) {
        if (!(this_present_buf && that_present_buf))
          return false;
        if (!this.buf.equals(that.buf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_buf = true && (isSetBuf());
      list.add(present_buf);
      if (present_buf)
        list.add(buf);

      return list.hashCode();
    }

    @Override
    public int compareTo(send_mail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBuf()).compareTo(other.isSetBuf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBuf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buf, other.buf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("send_mail_args(");
      boolean first = true;

      sb.append("buf:");
      if (this.buf == null) {
        sb.append("null");
      } else {
        sb.append(this.buf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class send_mail_argsStandardSchemeFactory implements SchemeFactory {
      public send_mail_argsStandardScheme getScheme() {
        return new send_mail_argsStandardScheme();
      }
    }

    private static class send_mail_argsStandardScheme extends StandardScheme<send_mail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, send_mail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.buf = iprot.readString();
                struct.setBufIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, send_mail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.buf != null) {
          oprot.writeFieldBegin(BUF_FIELD_DESC);
          oprot.writeString(struct.buf);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class send_mail_argsTupleSchemeFactory implements SchemeFactory {
      public send_mail_argsTupleScheme getScheme() {
        return new send_mail_argsTupleScheme();
      }
    }

    private static class send_mail_argsTupleScheme extends TupleScheme<send_mail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, send_mail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBuf()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBuf()) {
          oprot.writeString(struct.buf);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, send_mail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.buf = iprot.readString();
          struct.setBufIsSet(true);
        }
      }
    }

  }

  public static class send_mail_result implements org.apache.thrift.TBase<send_mail_result, send_mail_result._Fields>, java.io.Serializable, Cloneable, Comparable<send_mail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("send_mail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new send_mail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new send_mail_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(send_mail_result.class, metaDataMap);
    }

    public send_mail_result() {
    }

    public send_mail_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public send_mail_result(send_mail_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public send_mail_result deepCopy() {
      return new send_mail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public send_mail_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof send_mail_result)
        return this.equals((send_mail_result)that);
      return false;
    }

    public boolean equals(send_mail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(send_mail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("send_mail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class send_mail_resultStandardSchemeFactory implements SchemeFactory {
      public send_mail_resultStandardScheme getScheme() {
        return new send_mail_resultStandardScheme();
      }
    }

    private static class send_mail_resultStandardScheme extends StandardScheme<send_mail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, send_mail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, send_mail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class send_mail_resultTupleSchemeFactory implements SchemeFactory {
      public send_mail_resultTupleScheme getScheme() {
        return new send_mail_resultTupleScheme();
      }
    }

    private static class send_mail_resultTupleScheme extends TupleScheme<send_mail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, send_mail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, send_mail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class update_password_args implements org.apache.thrift.TBase<update_password_args, update_password_args._Fields>, java.io.Serializable, Cloneable, Comparable<update_password_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("update_password_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NEW_PWD_FIELD_DESC = new org.apache.thrift.protocol.TField("new_pwd", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new update_password_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new update_password_argsTupleSchemeFactory());
    }

    public String user_name; // required
    public String new_pwd; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name"),
      NEW_PWD((short)2, "new_pwd");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // NEW_PWD
            return NEW_PWD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NEW_PWD, new org.apache.thrift.meta_data.FieldMetaData("new_pwd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_password_args.class, metaDataMap);
    }

    public update_password_args() {
    }

    public update_password_args(
      String user_name,
      String new_pwd)
    {
      this();
      this.user_name = user_name;
      this.new_pwd = new_pwd;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public update_password_args(update_password_args other) {
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetNew_pwd()) {
        this.new_pwd = other.new_pwd;
      }
    }

    public update_password_args deepCopy() {
      return new update_password_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
      this.new_pwd = null;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public update_password_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getNew_pwd() {
      return this.new_pwd;
    }

    public update_password_args setNew_pwd(String new_pwd) {
      this.new_pwd = new_pwd;
      return this;
    }

    public void unsetNew_pwd() {
      this.new_pwd = null;
    }

    /** Returns true if field new_pwd is set (has been assigned a value) and false otherwise */
    public boolean isSetNew_pwd() {
      return this.new_pwd != null;
    }

    public void setNew_pwdIsSet(boolean value) {
      if (!value) {
        this.new_pwd = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case NEW_PWD:
        if (value == null) {
          unsetNew_pwd();
        } else {
          setNew_pwd((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      case NEW_PWD:
        return getNew_pwd();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      case NEW_PWD:
        return isSetNew_pwd();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof update_password_args)
        return this.equals((update_password_args)that);
      return false;
    }

    public boolean equals(update_password_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_new_pwd = true && this.isSetNew_pwd();
      boolean that_present_new_pwd = true && that.isSetNew_pwd();
      if (this_present_new_pwd || that_present_new_pwd) {
        if (!(this_present_new_pwd && that_present_new_pwd))
          return false;
        if (!this.new_pwd.equals(that.new_pwd))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_user_name = true && (isSetUser_name());
      list.add(present_user_name);
      if (present_user_name)
        list.add(user_name);

      boolean present_new_pwd = true && (isSetNew_pwd());
      list.add(present_new_pwd);
      if (present_new_pwd)
        list.add(new_pwd);

      return list.hashCode();
    }

    @Override
    public int compareTo(update_password_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(other.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, other.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNew_pwd()).compareTo(other.isSetNew_pwd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNew_pwd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.new_pwd, other.new_pwd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("update_password_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("new_pwd:");
      if (this.new_pwd == null) {
        sb.append("null");
      } else {
        sb.append(this.new_pwd);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class update_password_argsStandardSchemeFactory implements SchemeFactory {
      public update_password_argsStandardScheme getScheme() {
        return new update_password_argsStandardScheme();
      }
    }

    private static class update_password_argsStandardScheme extends StandardScheme<update_password_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, update_password_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NEW_PWD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.new_pwd = iprot.readString();
                struct.setNew_pwdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, update_password_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.new_pwd != null) {
          oprot.writeFieldBegin(NEW_PWD_FIELD_DESC);
          oprot.writeString(struct.new_pwd);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class update_password_argsTupleSchemeFactory implements SchemeFactory {
      public update_password_argsTupleScheme getScheme() {
        return new update_password_argsTupleScheme();
      }
    }

    private static class update_password_argsTupleScheme extends TupleScheme<update_password_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, update_password_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        if (struct.isSetNew_pwd()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetNew_pwd()) {
          oprot.writeString(struct.new_pwd);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, update_password_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.new_pwd = iprot.readString();
          struct.setNew_pwdIsSet(true);
        }
      }
    }

  }

  public static class update_password_result implements org.apache.thrift.TBase<update_password_result, update_password_result._Fields>, java.io.Serializable, Cloneable, Comparable<update_password_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("update_password_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new update_password_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new update_password_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_password_result.class, metaDataMap);
    }

    public update_password_result() {
    }

    public update_password_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public update_password_result(update_password_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public update_password_result deepCopy() {
      return new update_password_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public update_password_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof update_password_result)
        return this.equals((update_password_result)that);
      return false;
    }

    public boolean equals(update_password_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(update_password_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("update_password_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class update_password_resultStandardSchemeFactory implements SchemeFactory {
      public update_password_resultStandardScheme getScheme() {
        return new update_password_resultStandardScheme();
      }
    }

    private static class update_password_resultStandardScheme extends StandardScheme<update_password_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, update_password_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, update_password_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class update_password_resultTupleSchemeFactory implements SchemeFactory {
      public update_password_resultTupleScheme getScheme() {
        return new update_password_resultTupleScheme();
      }
    }

    private static class update_password_resultTupleScheme extends TupleScheme<update_password_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, update_password_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, update_password_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class device_disable_args implements org.apache.thrift.TBase<device_disable_args, device_disable_args._Fields>, java.io.Serializable, Cloneable, Comparable<device_disable_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("device_disable_args");

    private static final org.apache.thrift.protocol.TField MAC_START_FIELD_DESC = new org.apache.thrift.protocol.TField("mac_start", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MAC_END_FIELD_DESC = new org.apache.thrift.protocol.TField("mac_end", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flag", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new device_disable_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new device_disable_argsTupleSchemeFactory());
    }

    public String mac_start; // required
    public String mac_end; // required
    public int flag; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MAC_START((short)1, "mac_start"),
      MAC_END((short)2, "mac_end"),
      FLAG((short)3, "flag");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MAC_START
            return MAC_START;
          case 2: // MAC_END
            return MAC_END;
          case 3: // FLAG
            return FLAG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FLAG_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MAC_START, new org.apache.thrift.meta_data.FieldMetaData("mac_start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MAC_END, new org.apache.thrift.meta_data.FieldMetaData("mac_end", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FLAG, new org.apache.thrift.meta_data.FieldMetaData("flag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(device_disable_args.class, metaDataMap);
    }

    public device_disable_args() {
    }

    public device_disable_args(
      String mac_start,
      String mac_end,
      int flag)
    {
      this();
      this.mac_start = mac_start;
      this.mac_end = mac_end;
      this.flag = flag;
      setFlagIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public device_disable_args(device_disable_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMac_start()) {
        this.mac_start = other.mac_start;
      }
      if (other.isSetMac_end()) {
        this.mac_end = other.mac_end;
      }
      this.flag = other.flag;
    }

    public device_disable_args deepCopy() {
      return new device_disable_args(this);
    }

    @Override
    public void clear() {
      this.mac_start = null;
      this.mac_end = null;
      setFlagIsSet(false);
      this.flag = 0;
    }

    public String getMac_start() {
      return this.mac_start;
    }

    public device_disable_args setMac_start(String mac_start) {
      this.mac_start = mac_start;
      return this;
    }

    public void unsetMac_start() {
      this.mac_start = null;
    }

    /** Returns true if field mac_start is set (has been assigned a value) and false otherwise */
    public boolean isSetMac_start() {
      return this.mac_start != null;
    }

    public void setMac_startIsSet(boolean value) {
      if (!value) {
        this.mac_start = null;
      }
    }

    public String getMac_end() {
      return this.mac_end;
    }

    public device_disable_args setMac_end(String mac_end) {
      this.mac_end = mac_end;
      return this;
    }

    public void unsetMac_end() {
      this.mac_end = null;
    }

    /** Returns true if field mac_end is set (has been assigned a value) and false otherwise */
    public boolean isSetMac_end() {
      return this.mac_end != null;
    }

    public void setMac_endIsSet(boolean value) {
      if (!value) {
        this.mac_end = null;
      }
    }

    public int getFlag() {
      return this.flag;
    }

    public device_disable_args setFlag(int flag) {
      this.flag = flag;
      setFlagIsSet(true);
      return this;
    }

    public void unsetFlag() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FLAG_ISSET_ID);
    }

    /** Returns true if field flag is set (has been assigned a value) and false otherwise */
    public boolean isSetFlag() {
      return EncodingUtils.testBit(__isset_bitfield, __FLAG_ISSET_ID);
    }

    public void setFlagIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FLAG_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MAC_START:
        if (value == null) {
          unsetMac_start();
        } else {
          setMac_start((String)value);
        }
        break;

      case MAC_END:
        if (value == null) {
          unsetMac_end();
        } else {
          setMac_end((String)value);
        }
        break;

      case FLAG:
        if (value == null) {
          unsetFlag();
        } else {
          setFlag((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MAC_START:
        return getMac_start();

      case MAC_END:
        return getMac_end();

      case FLAG:
        return Integer.valueOf(getFlag());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MAC_START:
        return isSetMac_start();
      case MAC_END:
        return isSetMac_end();
      case FLAG:
        return isSetFlag();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof device_disable_args)
        return this.equals((device_disable_args)that);
      return false;
    }

    public boolean equals(device_disable_args that) {
      if (that == null)
        return false;

      boolean this_present_mac_start = true && this.isSetMac_start();
      boolean that_present_mac_start = true && that.isSetMac_start();
      if (this_present_mac_start || that_present_mac_start) {
        if (!(this_present_mac_start && that_present_mac_start))
          return false;
        if (!this.mac_start.equals(that.mac_start))
          return false;
      }

      boolean this_present_mac_end = true && this.isSetMac_end();
      boolean that_present_mac_end = true && that.isSetMac_end();
      if (this_present_mac_end || that_present_mac_end) {
        if (!(this_present_mac_end && that_present_mac_end))
          return false;
        if (!this.mac_end.equals(that.mac_end))
          return false;
      }

      boolean this_present_flag = true;
      boolean that_present_flag = true;
      if (this_present_flag || that_present_flag) {
        if (!(this_present_flag && that_present_flag))
          return false;
        if (this.flag != that.flag)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_mac_start = true && (isSetMac_start());
      list.add(present_mac_start);
      if (present_mac_start)
        list.add(mac_start);

      boolean present_mac_end = true && (isSetMac_end());
      list.add(present_mac_end);
      if (present_mac_end)
        list.add(mac_end);

      boolean present_flag = true;
      list.add(present_flag);
      if (present_flag)
        list.add(flag);

      return list.hashCode();
    }

    @Override
    public int compareTo(device_disable_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMac_start()).compareTo(other.isSetMac_start());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMac_start()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mac_start, other.mac_start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMac_end()).compareTo(other.isSetMac_end());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMac_end()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mac_end, other.mac_end);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFlag()).compareTo(other.isSetFlag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFlag()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag, other.flag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("device_disable_args(");
      boolean first = true;

      sb.append("mac_start:");
      if (this.mac_start == null) {
        sb.append("null");
      } else {
        sb.append(this.mac_start);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mac_end:");
      if (this.mac_end == null) {
        sb.append("null");
      } else {
        sb.append(this.mac_end);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("flag:");
      sb.append(this.flag);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class device_disable_argsStandardSchemeFactory implements SchemeFactory {
      public device_disable_argsStandardScheme getScheme() {
        return new device_disable_argsStandardScheme();
      }
    }

    private static class device_disable_argsStandardScheme extends StandardScheme<device_disable_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, device_disable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MAC_START
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mac_start = iprot.readString();
                struct.setMac_startIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MAC_END
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mac_end = iprot.readString();
                struct.setMac_endIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FLAG
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.flag = iprot.readI32();
                struct.setFlagIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, device_disable_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mac_start != null) {
          oprot.writeFieldBegin(MAC_START_FIELD_DESC);
          oprot.writeString(struct.mac_start);
          oprot.writeFieldEnd();
        }
        if (struct.mac_end != null) {
          oprot.writeFieldBegin(MAC_END_FIELD_DESC);
          oprot.writeString(struct.mac_end);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FLAG_FIELD_DESC);
        oprot.writeI32(struct.flag);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class device_disable_argsTupleSchemeFactory implements SchemeFactory {
      public device_disable_argsTupleScheme getScheme() {
        return new device_disable_argsTupleScheme();
      }
    }

    private static class device_disable_argsTupleScheme extends TupleScheme<device_disable_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, device_disable_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMac_start()) {
          optionals.set(0);
        }
        if (struct.isSetMac_end()) {
          optionals.set(1);
        }
        if (struct.isSetFlag()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetMac_start()) {
          oprot.writeString(struct.mac_start);
        }
        if (struct.isSetMac_end()) {
          oprot.writeString(struct.mac_end);
        }
        if (struct.isSetFlag()) {
          oprot.writeI32(struct.flag);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, device_disable_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.mac_start = iprot.readString();
          struct.setMac_startIsSet(true);
        }
        if (incoming.get(1)) {
          struct.mac_end = iprot.readString();
          struct.setMac_endIsSet(true);
        }
        if (incoming.get(2)) {
          struct.flag = iprot.readI32();
          struct.setFlagIsSet(true);
        }
      }
    }

  }

  public static class device_disable_result implements org.apache.thrift.TBase<device_disable_result, device_disable_result._Fields>, java.io.Serializable, Cloneable, Comparable<device_disable_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("device_disable_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new device_disable_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new device_disable_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(device_disable_result.class, metaDataMap);
    }

    public device_disable_result() {
    }

    public device_disable_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public device_disable_result(device_disable_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public device_disable_result deepCopy() {
      return new device_disable_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public device_disable_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof device_disable_result)
        return this.equals((device_disable_result)that);
      return false;
    }

    public boolean equals(device_disable_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(device_disable_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("device_disable_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class device_disable_resultStandardSchemeFactory implements SchemeFactory {
      public device_disable_resultStandardScheme getScheme() {
        return new device_disable_resultStandardScheme();
      }
    }

    private static class device_disable_resultStandardScheme extends StandardScheme<device_disable_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, device_disable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, device_disable_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class device_disable_resultTupleSchemeFactory implements SchemeFactory {
      public device_disable_resultTupleScheme getScheme() {
        return new device_disable_resultTupleScheme();
      }
    }

    private static class device_disable_resultTupleScheme extends TupleScheme<device_disable_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, device_disable_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, device_disable_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class device_remove_disable_args implements org.apache.thrift.TBase<device_remove_disable_args, device_remove_disable_args._Fields>, java.io.Serializable, Cloneable, Comparable<device_remove_disable_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("device_remove_disable_args");

    private static final org.apache.thrift.protocol.TField MAC_START_FIELD_DESC = new org.apache.thrift.protocol.TField("mac_start", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MAC_END_FIELD_DESC = new org.apache.thrift.protocol.TField("mac_end", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flag", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new device_remove_disable_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new device_remove_disable_argsTupleSchemeFactory());
    }

    public String mac_start; // required
    public String mac_end; // required
    public int flag; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MAC_START((short)1, "mac_start"),
      MAC_END((short)2, "mac_end"),
      FLAG((short)3, "flag");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MAC_START
            return MAC_START;
          case 2: // MAC_END
            return MAC_END;
          case 3: // FLAG
            return FLAG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FLAG_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MAC_START, new org.apache.thrift.meta_data.FieldMetaData("mac_start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MAC_END, new org.apache.thrift.meta_data.FieldMetaData("mac_end", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FLAG, new org.apache.thrift.meta_data.FieldMetaData("flag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(device_remove_disable_args.class, metaDataMap);
    }

    public device_remove_disable_args() {
    }

    public device_remove_disable_args(
      String mac_start,
      String mac_end,
      int flag)
    {
      this();
      this.mac_start = mac_start;
      this.mac_end = mac_end;
      this.flag = flag;
      setFlagIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public device_remove_disable_args(device_remove_disable_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMac_start()) {
        this.mac_start = other.mac_start;
      }
      if (other.isSetMac_end()) {
        this.mac_end = other.mac_end;
      }
      this.flag = other.flag;
    }

    public device_remove_disable_args deepCopy() {
      return new device_remove_disable_args(this);
    }

    @Override
    public void clear() {
      this.mac_start = null;
      this.mac_end = null;
      setFlagIsSet(false);
      this.flag = 0;
    }

    public String getMac_start() {
      return this.mac_start;
    }

    public device_remove_disable_args setMac_start(String mac_start) {
      this.mac_start = mac_start;
      return this;
    }

    public void unsetMac_start() {
      this.mac_start = null;
    }

    /** Returns true if field mac_start is set (has been assigned a value) and false otherwise */
    public boolean isSetMac_start() {
      return this.mac_start != null;
    }

    public void setMac_startIsSet(boolean value) {
      if (!value) {
        this.mac_start = null;
      }
    }

    public String getMac_end() {
      return this.mac_end;
    }

    public device_remove_disable_args setMac_end(String mac_end) {
      this.mac_end = mac_end;
      return this;
    }

    public void unsetMac_end() {
      this.mac_end = null;
    }

    /** Returns true if field mac_end is set (has been assigned a value) and false otherwise */
    public boolean isSetMac_end() {
      return this.mac_end != null;
    }

    public void setMac_endIsSet(boolean value) {
      if (!value) {
        this.mac_end = null;
      }
    }

    public int getFlag() {
      return this.flag;
    }

    public device_remove_disable_args setFlag(int flag) {
      this.flag = flag;
      setFlagIsSet(true);
      return this;
    }

    public void unsetFlag() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FLAG_ISSET_ID);
    }

    /** Returns true if field flag is set (has been assigned a value) and false otherwise */
    public boolean isSetFlag() {
      return EncodingUtils.testBit(__isset_bitfield, __FLAG_ISSET_ID);
    }

    public void setFlagIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FLAG_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MAC_START:
        if (value == null) {
          unsetMac_start();
        } else {
          setMac_start((String)value);
        }
        break;

      case MAC_END:
        if (value == null) {
          unsetMac_end();
        } else {
          setMac_end((String)value);
        }
        break;

      case FLAG:
        if (value == null) {
          unsetFlag();
        } else {
          setFlag((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MAC_START:
        return getMac_start();

      case MAC_END:
        return getMac_end();

      case FLAG:
        return Integer.valueOf(getFlag());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MAC_START:
        return isSetMac_start();
      case MAC_END:
        return isSetMac_end();
      case FLAG:
        return isSetFlag();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof device_remove_disable_args)
        return this.equals((device_remove_disable_args)that);
      return false;
    }

    public boolean equals(device_remove_disable_args that) {
      if (that == null)
        return false;

      boolean this_present_mac_start = true && this.isSetMac_start();
      boolean that_present_mac_start = true && that.isSetMac_start();
      if (this_present_mac_start || that_present_mac_start) {
        if (!(this_present_mac_start && that_present_mac_start))
          return false;
        if (!this.mac_start.equals(that.mac_start))
          return false;
      }

      boolean this_present_mac_end = true && this.isSetMac_end();
      boolean that_present_mac_end = true && that.isSetMac_end();
      if (this_present_mac_end || that_present_mac_end) {
        if (!(this_present_mac_end && that_present_mac_end))
          return false;
        if (!this.mac_end.equals(that.mac_end))
          return false;
      }

      boolean this_present_flag = true;
      boolean that_present_flag = true;
      if (this_present_flag || that_present_flag) {
        if (!(this_present_flag && that_present_flag))
          return false;
        if (this.flag != that.flag)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_mac_start = true && (isSetMac_start());
      list.add(present_mac_start);
      if (present_mac_start)
        list.add(mac_start);

      boolean present_mac_end = true && (isSetMac_end());
      list.add(present_mac_end);
      if (present_mac_end)
        list.add(mac_end);

      boolean present_flag = true;
      list.add(present_flag);
      if (present_flag)
        list.add(flag);

      return list.hashCode();
    }

    @Override
    public int compareTo(device_remove_disable_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMac_start()).compareTo(other.isSetMac_start());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMac_start()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mac_start, other.mac_start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMac_end()).compareTo(other.isSetMac_end());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMac_end()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mac_end, other.mac_end);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFlag()).compareTo(other.isSetFlag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFlag()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag, other.flag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("device_remove_disable_args(");
      boolean first = true;

      sb.append("mac_start:");
      if (this.mac_start == null) {
        sb.append("null");
      } else {
        sb.append(this.mac_start);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mac_end:");
      if (this.mac_end == null) {
        sb.append("null");
      } else {
        sb.append(this.mac_end);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("flag:");
      sb.append(this.flag);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class device_remove_disable_argsStandardSchemeFactory implements SchemeFactory {
      public device_remove_disable_argsStandardScheme getScheme() {
        return new device_remove_disable_argsStandardScheme();
      }
    }

    private static class device_remove_disable_argsStandardScheme extends StandardScheme<device_remove_disable_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, device_remove_disable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MAC_START
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mac_start = iprot.readString();
                struct.setMac_startIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MAC_END
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mac_end = iprot.readString();
                struct.setMac_endIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FLAG
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.flag = iprot.readI32();
                struct.setFlagIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, device_remove_disable_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mac_start != null) {
          oprot.writeFieldBegin(MAC_START_FIELD_DESC);
          oprot.writeString(struct.mac_start);
          oprot.writeFieldEnd();
        }
        if (struct.mac_end != null) {
          oprot.writeFieldBegin(MAC_END_FIELD_DESC);
          oprot.writeString(struct.mac_end);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FLAG_FIELD_DESC);
        oprot.writeI32(struct.flag);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class device_remove_disable_argsTupleSchemeFactory implements SchemeFactory {
      public device_remove_disable_argsTupleScheme getScheme() {
        return new device_remove_disable_argsTupleScheme();
      }
    }

    private static class device_remove_disable_argsTupleScheme extends TupleScheme<device_remove_disable_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, device_remove_disable_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMac_start()) {
          optionals.set(0);
        }
        if (struct.isSetMac_end()) {
          optionals.set(1);
        }
        if (struct.isSetFlag()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetMac_start()) {
          oprot.writeString(struct.mac_start);
        }
        if (struct.isSetMac_end()) {
          oprot.writeString(struct.mac_end);
        }
        if (struct.isSetFlag()) {
          oprot.writeI32(struct.flag);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, device_remove_disable_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.mac_start = iprot.readString();
          struct.setMac_startIsSet(true);
        }
        if (incoming.get(1)) {
          struct.mac_end = iprot.readString();
          struct.setMac_endIsSet(true);
        }
        if (incoming.get(2)) {
          struct.flag = iprot.readI32();
          struct.setFlagIsSet(true);
        }
      }
    }

  }

  public static class device_remove_disable_result implements org.apache.thrift.TBase<device_remove_disable_result, device_remove_disable_result._Fields>, java.io.Serializable, Cloneable, Comparable<device_remove_disable_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("device_remove_disable_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new device_remove_disable_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new device_remove_disable_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(device_remove_disable_result.class, metaDataMap);
    }

    public device_remove_disable_result() {
    }

    public device_remove_disable_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public device_remove_disable_result(device_remove_disable_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public device_remove_disable_result deepCopy() {
      return new device_remove_disable_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public device_remove_disable_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof device_remove_disable_result)
        return this.equals((device_remove_disable_result)that);
      return false;
    }

    public boolean equals(device_remove_disable_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(device_remove_disable_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("device_remove_disable_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class device_remove_disable_resultStandardSchemeFactory implements SchemeFactory {
      public device_remove_disable_resultStandardScheme getScheme() {
        return new device_remove_disable_resultStandardScheme();
      }
    }

    private static class device_remove_disable_resultStandardScheme extends StandardScheme<device_remove_disable_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, device_remove_disable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, device_remove_disable_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class device_remove_disable_resultTupleSchemeFactory implements SchemeFactory {
      public device_remove_disable_resultTupleScheme getScheme() {
        return new device_remove_disable_resultTupleScheme();
      }
    }

    private static class device_remove_disable_resultTupleScheme extends TupleScheme<device_remove_disable_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, device_remove_disable_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, device_remove_disable_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class query_device_IP_args implements org.apache.thrift.TBase<query_device_IP_args, query_device_IP_args._Fields>, java.io.Serializable, Cloneable, Comparable<query_device_IP_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_device_IP_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("device_id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_device_IP_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_device_IP_argsTupleSchemeFactory());
    }

    public String device_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "device_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("device_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_device_IP_args.class, metaDataMap);
    }

    public query_device_IP_args() {
    }

    public query_device_IP_args(
      String device_id)
    {
      this();
      this.device_id = device_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_device_IP_args(query_device_IP_args other) {
      if (other.isSetDevice_id()) {
        this.device_id = other.device_id;
      }
    }

    public query_device_IP_args deepCopy() {
      return new query_device_IP_args(this);
    }

    @Override
    public void clear() {
      this.device_id = null;
    }

    public String getDevice_id() {
      return this.device_id;
    }

    public query_device_IP_args setDevice_id(String device_id) {
      this.device_id = device_id;
      return this;
    }

    public void unsetDevice_id() {
      this.device_id = null;
    }

    /** Returns true if field device_id is set (has been assigned a value) and false otherwise */
    public boolean isSetDevice_id() {
      return this.device_id != null;
    }

    public void setDevice_idIsSet(boolean value) {
      if (!value) {
        this.device_id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDevice_id();
        } else {
          setDevice_id((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return getDevice_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDevice_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_device_IP_args)
        return this.equals((query_device_IP_args)that);
      return false;
    }

    public boolean equals(query_device_IP_args that) {
      if (that == null)
        return false;

      boolean this_present_device_id = true && this.isSetDevice_id();
      boolean that_present_device_id = true && that.isSetDevice_id();
      if (this_present_device_id || that_present_device_id) {
        if (!(this_present_device_id && that_present_device_id))
          return false;
        if (!this.device_id.equals(that.device_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_device_id = true && (isSetDevice_id());
      list.add(present_device_id);
      if (present_device_id)
        list.add(device_id);

      return list.hashCode();
    }

    @Override
    public int compareTo(query_device_IP_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDevice_id()).compareTo(other.isSetDevice_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDevice_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device_id, other.device_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_device_IP_args(");
      boolean first = true;

      sb.append("device_id:");
      if (this.device_id == null) {
        sb.append("null");
      } else {
        sb.append(this.device_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_device_IP_argsStandardSchemeFactory implements SchemeFactory {
      public query_device_IP_argsStandardScheme getScheme() {
        return new query_device_IP_argsStandardScheme();
      }
    }

    private static class query_device_IP_argsStandardScheme extends StandardScheme<query_device_IP_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_device_IP_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.device_id = iprot.readString();
                struct.setDevice_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_device_IP_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.device_id != null) {
          oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.device_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_device_IP_argsTupleSchemeFactory implements SchemeFactory {
      public query_device_IP_argsTupleScheme getScheme() {
        return new query_device_IP_argsTupleScheme();
      }
    }

    private static class query_device_IP_argsTupleScheme extends TupleScheme<query_device_IP_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, query_device_IP_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDevice_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDevice_id()) {
          oprot.writeString(struct.device_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, query_device_IP_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.device_id = iprot.readString();
          struct.setDevice_idIsSet(true);
        }
      }
    }

  }

  public static class query_device_IP_result implements org.apache.thrift.TBase<query_device_IP_result, query_device_IP_result._Fields>, java.io.Serializable, Cloneable, Comparable<query_device_IP_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_device_IP_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_device_IP_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_device_IP_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_device_IP_result.class, metaDataMap);
    }

    public query_device_IP_result() {
    }

    public query_device_IP_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_device_IP_result(query_device_IP_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public query_device_IP_result deepCopy() {
      return new query_device_IP_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public query_device_IP_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_device_IP_result)
        return this.equals((query_device_IP_result)that);
      return false;
    }

    public boolean equals(query_device_IP_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(query_device_IP_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_device_IP_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_device_IP_resultStandardSchemeFactory implements SchemeFactory {
      public query_device_IP_resultStandardScheme getScheme() {
        return new query_device_IP_resultStandardScheme();
      }
    }

    private static class query_device_IP_resultStandardScheme extends StandardScheme<query_device_IP_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_device_IP_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_device_IP_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_device_IP_resultTupleSchemeFactory implements SchemeFactory {
      public query_device_IP_resultTupleScheme getScheme() {
        return new query_device_IP_resultTupleScheme();
      }
    }

    private static class query_device_IP_resultTupleScheme extends TupleScheme<query_device_IP_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, query_device_IP_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, query_device_IP_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class add_user_args implements org.apache.thrift.TBase<add_user_args, add_user_args._Fields>, java.io.Serializable, Cloneable, Comparable<add_user_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("add_user_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PASSWD_FIELD_DESC = new org.apache.thrift.protocol.TField("passwd", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField COMPANY_FIELD_DESC = new org.apache.thrift.protocol.TField("company", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flag", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new add_user_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new add_user_argsTupleSchemeFactory());
    }

    public String user_name; // required
    public String passwd; // required
    public String company; // required
    public int flag; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name"),
      PASSWD((short)2, "passwd"),
      COMPANY((short)3, "company"),
      FLAG((short)4, "flag");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // PASSWD
            return PASSWD;
          case 3: // COMPANY
            return COMPANY;
          case 4: // FLAG
            return FLAG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FLAG_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWD, new org.apache.thrift.meta_data.FieldMetaData("passwd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COMPANY, new org.apache.thrift.meta_data.FieldMetaData("company", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FLAG, new org.apache.thrift.meta_data.FieldMetaData("flag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(add_user_args.class, metaDataMap);
    }

    public add_user_args() {
    }

    public add_user_args(
      String user_name,
      String passwd,
      String company,
      int flag)
    {
      this();
      this.user_name = user_name;
      this.passwd = passwd;
      this.company = company;
      this.flag = flag;
      setFlagIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public add_user_args(add_user_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetPasswd()) {
        this.passwd = other.passwd;
      }
      if (other.isSetCompany()) {
        this.company = other.company;
      }
      this.flag = other.flag;
    }

    public add_user_args deepCopy() {
      return new add_user_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
      this.passwd = null;
      this.company = null;
      setFlagIsSet(false);
      this.flag = 0;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public add_user_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getPasswd() {
      return this.passwd;
    }

    public add_user_args setPasswd(String passwd) {
      this.passwd = passwd;
      return this;
    }

    public void unsetPasswd() {
      this.passwd = null;
    }

    /** Returns true if field passwd is set (has been assigned a value) and false otherwise */
    public boolean isSetPasswd() {
      return this.passwd != null;
    }

    public void setPasswdIsSet(boolean value) {
      if (!value) {
        this.passwd = null;
      }
    }

    public String getCompany() {
      return this.company;
    }

    public add_user_args setCompany(String company) {
      this.company = company;
      return this;
    }

    public void unsetCompany() {
      this.company = null;
    }

    /** Returns true if field company is set (has been assigned a value) and false otherwise */
    public boolean isSetCompany() {
      return this.company != null;
    }

    public void setCompanyIsSet(boolean value) {
      if (!value) {
        this.company = null;
      }
    }

    public int getFlag() {
      return this.flag;
    }

    public add_user_args setFlag(int flag) {
      this.flag = flag;
      setFlagIsSet(true);
      return this;
    }

    public void unsetFlag() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FLAG_ISSET_ID);
    }

    /** Returns true if field flag is set (has been assigned a value) and false otherwise */
    public boolean isSetFlag() {
      return EncodingUtils.testBit(__isset_bitfield, __FLAG_ISSET_ID);
    }

    public void setFlagIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FLAG_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case PASSWD:
        if (value == null) {
          unsetPasswd();
        } else {
          setPasswd((String)value);
        }
        break;

      case COMPANY:
        if (value == null) {
          unsetCompany();
        } else {
          setCompany((String)value);
        }
        break;

      case FLAG:
        if (value == null) {
          unsetFlag();
        } else {
          setFlag((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      case PASSWD:
        return getPasswd();

      case COMPANY:
        return getCompany();

      case FLAG:
        return Integer.valueOf(getFlag());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      case PASSWD:
        return isSetPasswd();
      case COMPANY:
        return isSetCompany();
      case FLAG:
        return isSetFlag();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof add_user_args)
        return this.equals((add_user_args)that);
      return false;
    }

    public boolean equals(add_user_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_passwd = true && this.isSetPasswd();
      boolean that_present_passwd = true && that.isSetPasswd();
      if (this_present_passwd || that_present_passwd) {
        if (!(this_present_passwd && that_present_passwd))
          return false;
        if (!this.passwd.equals(that.passwd))
          return false;
      }

      boolean this_present_company = true && this.isSetCompany();
      boolean that_present_company = true && that.isSetCompany();
      if (this_present_company || that_present_company) {
        if (!(this_present_company && that_present_company))
          return false;
        if (!this.company.equals(that.company))
          return false;
      }

      boolean this_present_flag = true;
      boolean that_present_flag = true;
      if (this_present_flag || that_present_flag) {
        if (!(this_present_flag && that_present_flag))
          return false;
        if (this.flag != that.flag)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_user_name = true && (isSetUser_name());
      list.add(present_user_name);
      if (present_user_name)
        list.add(user_name);

      boolean present_passwd = true && (isSetPasswd());
      list.add(present_passwd);
      if (present_passwd)
        list.add(passwd);

      boolean present_company = true && (isSetCompany());
      list.add(present_company);
      if (present_company)
        list.add(company);

      boolean present_flag = true;
      list.add(present_flag);
      if (present_flag)
        list.add(flag);

      return list.hashCode();
    }

    @Override
    public int compareTo(add_user_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(other.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, other.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPasswd()).compareTo(other.isSetPasswd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPasswd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passwd, other.passwd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCompany()).compareTo(other.isSetCompany());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompany()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company, other.company);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFlag()).compareTo(other.isSetFlag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFlag()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag, other.flag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("add_user_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("passwd:");
      if (this.passwd == null) {
        sb.append("null");
      } else {
        sb.append(this.passwd);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("company:");
      if (this.company == null) {
        sb.append("null");
      } else {
        sb.append(this.company);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("flag:");
      sb.append(this.flag);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class add_user_argsStandardSchemeFactory implements SchemeFactory {
      public add_user_argsStandardScheme getScheme() {
        return new add_user_argsStandardScheme();
      }
    }

    private static class add_user_argsStandardScheme extends StandardScheme<add_user_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, add_user_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSWD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.passwd = iprot.readString();
                struct.setPasswdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COMPANY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.company = iprot.readString();
                struct.setCompanyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // FLAG
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.flag = iprot.readI32();
                struct.setFlagIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, add_user_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.passwd != null) {
          oprot.writeFieldBegin(PASSWD_FIELD_DESC);
          oprot.writeString(struct.passwd);
          oprot.writeFieldEnd();
        }
        if (struct.company != null) {
          oprot.writeFieldBegin(COMPANY_FIELD_DESC);
          oprot.writeString(struct.company);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FLAG_FIELD_DESC);
        oprot.writeI32(struct.flag);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class add_user_argsTupleSchemeFactory implements SchemeFactory {
      public add_user_argsTupleScheme getScheme() {
        return new add_user_argsTupleScheme();
      }
    }

    private static class add_user_argsTupleScheme extends TupleScheme<add_user_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, add_user_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        if (struct.isSetPasswd()) {
          optionals.set(1);
        }
        if (struct.isSetCompany()) {
          optionals.set(2);
        }
        if (struct.isSetFlag()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetPasswd()) {
          oprot.writeString(struct.passwd);
        }
        if (struct.isSetCompany()) {
          oprot.writeString(struct.company);
        }
        if (struct.isSetFlag()) {
          oprot.writeI32(struct.flag);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, add_user_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.passwd = iprot.readString();
          struct.setPasswdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.company = iprot.readString();
          struct.setCompanyIsSet(true);
        }
        if (incoming.get(3)) {
          struct.flag = iprot.readI32();
          struct.setFlagIsSet(true);
        }
      }
    }

  }

  public static class add_user_result implements org.apache.thrift.TBase<add_user_result, add_user_result._Fields>, java.io.Serializable, Cloneable, Comparable<add_user_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("add_user_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new add_user_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new add_user_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(add_user_result.class, metaDataMap);
    }

    public add_user_result() {
    }

    public add_user_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public add_user_result(add_user_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public add_user_result deepCopy() {
      return new add_user_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public add_user_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof add_user_result)
        return this.equals((add_user_result)that);
      return false;
    }

    public boolean equals(add_user_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(add_user_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("add_user_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class add_user_resultStandardSchemeFactory implements SchemeFactory {
      public add_user_resultStandardScheme getScheme() {
        return new add_user_resultStandardScheme();
      }
    }

    private static class add_user_resultStandardScheme extends StandardScheme<add_user_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, add_user_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, add_user_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class add_user_resultTupleSchemeFactory implements SchemeFactory {
      public add_user_resultTupleScheme getScheme() {
        return new add_user_resultTupleScheme();
      }
    }

    private static class add_user_resultTupleScheme extends TupleScheme<add_user_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, add_user_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, add_user_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class register_service_args implements org.apache.thrift.TBase<register_service_args, register_service_args._Fields>, java.io.Serializable, Cloneable, Comparable<register_service_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("register_service_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PASSWD_FIELD_DESC = new org.apache.thrift.protocol.TField("passwd", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new register_service_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new register_service_argsTupleSchemeFactory());
    }

    public String user_name; // required
    public String passwd; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "user_name"),
      PASSWD((short)2, "passwd");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // PASSWD
            return PASSWD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWD, new org.apache.thrift.meta_data.FieldMetaData("passwd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(register_service_args.class, metaDataMap);
    }

    public register_service_args() {
    }

    public register_service_args(
      String user_name,
      String passwd)
    {
      this();
      this.user_name = user_name;
      this.passwd = passwd;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public register_service_args(register_service_args other) {
      if (other.isSetUser_name()) {
        this.user_name = other.user_name;
      }
      if (other.isSetPasswd()) {
        this.passwd = other.passwd;
      }
    }

    public register_service_args deepCopy() {
      return new register_service_args(this);
    }

    @Override
    public void clear() {
      this.user_name = null;
      this.passwd = null;
    }

    public String getUser_name() {
      return this.user_name;
    }

    public register_service_args setUser_name(String user_name) {
      this.user_name = user_name;
      return this;
    }

    public void unsetUser_name() {
      this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
      return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
      if (!value) {
        this.user_name = null;
      }
    }

    public String getPasswd() {
      return this.passwd;
    }

    public register_service_args setPasswd(String passwd) {
      this.passwd = passwd;
      return this;
    }

    public void unsetPasswd() {
      this.passwd = null;
    }

    /** Returns true if field passwd is set (has been assigned a value) and false otherwise */
    public boolean isSetPasswd() {
      return this.passwd != null;
    }

    public void setPasswdIsSet(boolean value) {
      if (!value) {
        this.passwd = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUser_name();
        } else {
          setUser_name((String)value);
        }
        break;

      case PASSWD:
        if (value == null) {
          unsetPasswd();
        } else {
          setPasswd((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUser_name();

      case PASSWD:
        return getPasswd();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUser_name();
      case PASSWD:
        return isSetPasswd();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof register_service_args)
        return this.equals((register_service_args)that);
      return false;
    }

    public boolean equals(register_service_args that) {
      if (that == null)
        return false;

      boolean this_present_user_name = true && this.isSetUser_name();
      boolean that_present_user_name = true && that.isSetUser_name();
      if (this_present_user_name || that_present_user_name) {
        if (!(this_present_user_name && that_present_user_name))
          return false;
        if (!this.user_name.equals(that.user_name))
          return false;
      }

      boolean this_present_passwd = true && this.isSetPasswd();
      boolean that_present_passwd = true && that.isSetPasswd();
      if (this_present_passwd || that_present_passwd) {
        if (!(this_present_passwd && that_present_passwd))
          return false;
        if (!this.passwd.equals(that.passwd))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_user_name = true && (isSetUser_name());
      list.add(present_user_name);
      if (present_user_name)
        list.add(user_name);

      boolean present_passwd = true && (isSetPasswd());
      list.add(present_passwd);
      if (present_passwd)
        list.add(passwd);

      return list.hashCode();
    }

    @Override
    public int compareTo(register_service_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(other.isSetUser_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, other.user_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPasswd()).compareTo(other.isSetPasswd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPasswd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passwd, other.passwd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("register_service_args(");
      boolean first = true;

      sb.append("user_name:");
      if (this.user_name == null) {
        sb.append("null");
      } else {
        sb.append(this.user_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("passwd:");
      if (this.passwd == null) {
        sb.append("null");
      } else {
        sb.append(this.passwd);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class register_service_argsStandardSchemeFactory implements SchemeFactory {
      public register_service_argsStandardScheme getScheme() {
        return new register_service_argsStandardScheme();
      }
    }

    private static class register_service_argsStandardScheme extends StandardScheme<register_service_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, register_service_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_name = iprot.readString();
                struct.setUser_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSWD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.passwd = iprot.readString();
                struct.setPasswdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, register_service_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user_name != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.user_name);
          oprot.writeFieldEnd();
        }
        if (struct.passwd != null) {
          oprot.writeFieldBegin(PASSWD_FIELD_DESC);
          oprot.writeString(struct.passwd);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class register_service_argsTupleSchemeFactory implements SchemeFactory {
      public register_service_argsTupleScheme getScheme() {
        return new register_service_argsTupleScheme();
      }
    }

    private static class register_service_argsTupleScheme extends TupleScheme<register_service_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, register_service_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser_name()) {
          optionals.set(0);
        }
        if (struct.isSetPasswd()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUser_name()) {
          oprot.writeString(struct.user_name);
        }
        if (struct.isSetPasswd()) {
          oprot.writeString(struct.passwd);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, register_service_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.user_name = iprot.readString();
          struct.setUser_nameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.passwd = iprot.readString();
          struct.setPasswdIsSet(true);
        }
      }
    }

  }

  public static class register_service_result implements org.apache.thrift.TBase<register_service_result, register_service_result._Fields>, java.io.Serializable, Cloneable, Comparable<register_service_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("register_service_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new register_service_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new register_service_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(register_service_result.class, metaDataMap);
    }

    public register_service_result() {
    }

    public register_service_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public register_service_result(register_service_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public register_service_result deepCopy() {
      return new register_service_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public register_service_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof register_service_result)
        return this.equals((register_service_result)that);
      return false;
    }

    public boolean equals(register_service_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(register_service_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("register_service_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class register_service_resultStandardSchemeFactory implements SchemeFactory {
      public register_service_resultStandardScheme getScheme() {
        return new register_service_resultStandardScheme();
      }
    }

    private static class register_service_resultStandardScheme extends StandardScheme<register_service_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, register_service_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, register_service_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class register_service_resultTupleSchemeFactory implements SchemeFactory {
      public register_service_resultTupleScheme getScheme() {
        return new register_service_resultTupleScheme();
      }
    }

    private static class register_service_resultTupleScheme extends TupleScheme<register_service_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, register_service_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, register_service_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class trace_device_update_args implements org.apache.thrift.TBase<trace_device_update_args, trace_device_update_args._Fields>, java.io.Serializable, Cloneable, Comparable<trace_device_update_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("trace_device_update_args");

    private static final org.apache.thrift.protocol.TField NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("num", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField DEVICE_BAGNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("device_bagname", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new trace_device_update_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new trace_device_update_argsTupleSchemeFactory());
    }

    public int num; // required
    public String device_bagname; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NUM((short)1, "num"),
      DEVICE_BAGNAME((short)2, "device_bagname");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NUM
            return NUM;
          case 2: // DEVICE_BAGNAME
            return DEVICE_BAGNAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NUM, new org.apache.thrift.meta_data.FieldMetaData("num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DEVICE_BAGNAME, new org.apache.thrift.meta_data.FieldMetaData("device_bagname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(trace_device_update_args.class, metaDataMap);
    }

    public trace_device_update_args() {
    }

    public trace_device_update_args(
      int num,
      String device_bagname)
    {
      this();
      this.num = num;
      setNumIsSet(true);
      this.device_bagname = device_bagname;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public trace_device_update_args(trace_device_update_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.num = other.num;
      if (other.isSetDevice_bagname()) {
        this.device_bagname = other.device_bagname;
      }
    }

    public trace_device_update_args deepCopy() {
      return new trace_device_update_args(this);
    }

    @Override
    public void clear() {
      setNumIsSet(false);
      this.num = 0;
      this.device_bagname = null;
    }

    public int getNum() {
      return this.num;
    }

    public trace_device_update_args setNum(int num) {
      this.num = num;
      setNumIsSet(true);
      return this;
    }

    public void unsetNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_ISSET_ID);
    }

    /** Returns true if field num is set (has been assigned a value) and false otherwise */
    public boolean isSetNum() {
      return EncodingUtils.testBit(__isset_bitfield, __NUM_ISSET_ID);
    }

    public void setNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_ISSET_ID, value);
    }

    public String getDevice_bagname() {
      return this.device_bagname;
    }

    public trace_device_update_args setDevice_bagname(String device_bagname) {
      this.device_bagname = device_bagname;
      return this;
    }

    public void unsetDevice_bagname() {
      this.device_bagname = null;
    }

    /** Returns true if field device_bagname is set (has been assigned a value) and false otherwise */
    public boolean isSetDevice_bagname() {
      return this.device_bagname != null;
    }

    public void setDevice_bagnameIsSet(boolean value) {
      if (!value) {
        this.device_bagname = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NUM:
        if (value == null) {
          unsetNum();
        } else {
          setNum((Integer)value);
        }
        break;

      case DEVICE_BAGNAME:
        if (value == null) {
          unsetDevice_bagname();
        } else {
          setDevice_bagname((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NUM:
        return Integer.valueOf(getNum());

      case DEVICE_BAGNAME:
        return getDevice_bagname();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NUM:
        return isSetNum();
      case DEVICE_BAGNAME:
        return isSetDevice_bagname();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof trace_device_update_args)
        return this.equals((trace_device_update_args)that);
      return false;
    }

    public boolean equals(trace_device_update_args that) {
      if (that == null)
        return false;

      boolean this_present_num = true;
      boolean that_present_num = true;
      if (this_present_num || that_present_num) {
        if (!(this_present_num && that_present_num))
          return false;
        if (this.num != that.num)
          return false;
      }

      boolean this_present_device_bagname = true && this.isSetDevice_bagname();
      boolean that_present_device_bagname = true && that.isSetDevice_bagname();
      if (this_present_device_bagname || that_present_device_bagname) {
        if (!(this_present_device_bagname && that_present_device_bagname))
          return false;
        if (!this.device_bagname.equals(that.device_bagname))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_num = true;
      list.add(present_num);
      if (present_num)
        list.add(num);

      boolean present_device_bagname = true && (isSetDevice_bagname());
      list.add(present_device_bagname);
      if (present_device_bagname)
        list.add(device_bagname);

      return list.hashCode();
    }

    @Override
    public int compareTo(trace_device_update_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNum()).compareTo(other.isSetNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num, other.num);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDevice_bagname()).compareTo(other.isSetDevice_bagname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDevice_bagname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device_bagname, other.device_bagname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("trace_device_update_args(");
      boolean first = true;

      sb.append("num:");
      sb.append(this.num);
      first = false;
      if (!first) sb.append(", ");
      sb.append("device_bagname:");
      if (this.device_bagname == null) {
        sb.append("null");
      } else {
        sb.append(this.device_bagname);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class trace_device_update_argsStandardSchemeFactory implements SchemeFactory {
      public trace_device_update_argsStandardScheme getScheme() {
        return new trace_device_update_argsStandardScheme();
      }
    }

    private static class trace_device_update_argsStandardScheme extends StandardScheme<trace_device_update_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, trace_device_update_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.num = iprot.readI32();
                struct.setNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEVICE_BAGNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.device_bagname = iprot.readString();
                struct.setDevice_bagnameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, trace_device_update_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NUM_FIELD_DESC);
        oprot.writeI32(struct.num);
        oprot.writeFieldEnd();
        if (struct.device_bagname != null) {
          oprot.writeFieldBegin(DEVICE_BAGNAME_FIELD_DESC);
          oprot.writeString(struct.device_bagname);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class trace_device_update_argsTupleSchemeFactory implements SchemeFactory {
      public trace_device_update_argsTupleScheme getScheme() {
        return new trace_device_update_argsTupleScheme();
      }
    }

    private static class trace_device_update_argsTupleScheme extends TupleScheme<trace_device_update_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, trace_device_update_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNum()) {
          optionals.set(0);
        }
        if (struct.isSetDevice_bagname()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNum()) {
          oprot.writeI32(struct.num);
        }
        if (struct.isSetDevice_bagname()) {
          oprot.writeString(struct.device_bagname);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, trace_device_update_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.num = iprot.readI32();
          struct.setNumIsSet(true);
        }
        if (incoming.get(1)) {
          struct.device_bagname = iprot.readString();
          struct.setDevice_bagnameIsSet(true);
        }
      }
    }

  }

  public static class trace_device_update_result implements org.apache.thrift.TBase<trace_device_update_result, trace_device_update_result._Fields>, java.io.Serializable, Cloneable, Comparable<trace_device_update_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("trace_device_update_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new trace_device_update_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new trace_device_update_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(trace_device_update_result.class, metaDataMap);
    }

    public trace_device_update_result() {
    }

    public trace_device_update_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public trace_device_update_result(trace_device_update_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public trace_device_update_result deepCopy() {
      return new trace_device_update_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public trace_device_update_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof trace_device_update_result)
        return this.equals((trace_device_update_result)that);
      return false;
    }

    public boolean equals(trace_device_update_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(trace_device_update_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("trace_device_update_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class trace_device_update_resultStandardSchemeFactory implements SchemeFactory {
      public trace_device_update_resultStandardScheme getScheme() {
        return new trace_device_update_resultStandardScheme();
      }
    }

    private static class trace_device_update_resultStandardScheme extends StandardScheme<trace_device_update_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, trace_device_update_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, trace_device_update_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class trace_device_update_resultTupleSchemeFactory implements SchemeFactory {
      public trace_device_update_resultTupleScheme getScheme() {
        return new trace_device_update_resultTupleScheme();
      }
    }

    private static class trace_device_update_resultTupleScheme extends TupleScheme<trace_device_update_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, trace_device_update_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, trace_device_update_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
