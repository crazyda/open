package com.axp.dao.impl;import java.util.List;import org.hibernate.Query;import org.hibernate.Session;import org.springframework.stereotype.Repository;import org.springframework.transaction.interceptor.TransactionAspectSupport;import com.axp.dao.IUsersDao;import com.axp.domain.Users;@Repository@SuppressWarnings("unchecked")public class UsersDaoImpl extends BaseDaoImpl<Users> implements IUsersDao {	/**	 * 根据用户名查找Users对象；	 */	@Override	public List<Users> getUserByUsername(String username) {		Session session = sessionFactory.getCurrentSession();		Query query = session.createQuery("from Users where isvalid = true and (name=:username or loginname=:loginname)");		query.setParameter("username", username);		query.setParameter("loginname", username);		return query.list();	}	/**	 * 根据用户名查找Users对象；	 */	@Override	public List<Users> getUserByName(String username) {		Session session = sessionFactory.getCurrentSession();		Query query = session.createQuery("from Users where isvalid = true and name=:username order by id desc ");		query.setParameter("username", username);				return query.list();	}		/**	 * 根据第三方登录的openId获取用户；	 */	@Override	public List<Users> findUsersByOpenId(String openId ,String unionId) {		Session session = sessionFactory.getCurrentSession();		Query query = null ;		if(openId != null){			query = session.createQuery("from Users where isvalid =1 and openId=:openId");			query.setParameter("openId", openId);		}		if(unionId != null){			query = session.createQuery("from Users where isvalid =1 and unionId=:unionId");			query.setParameter("unionId", unionId);		}		return query.list();	}		/**	 * 同时更新用户的积分，钱包余额与红包，有一项超支都将修改不通过；	 */	@Override	public Integer updateUsersPatrimony(Integer userId,Integer score,double cash,double money) {		Integer re = 0;			Session session = sessionFactory.getCurrentSession();			Query query = session.createQuery("update Users set score = score+:score," +					"cashpoint = cashpoint+:cash,money = money+:money" +					" where userId = :userId and (score+:score)>=0 and " +					"(cashpoint+:cash)>=0 and (money+:money)>=0 ");			query.setParameter("userId", userId);			query.setParameter("score", score);			query.setParameter("cash", cash);			query.setParameter("money", money);			re = query.executeUpdate();		return re;	}	@Override	public List<Integer> findIdByInvitecode(String invitecode) {		Session session = sessionFactory.getCurrentSession();		Query query = session.createQuery("select id from Users where isvalid = true and and mycode=:mycode");		query.setParameter("mycode", invitecode);		return query.list();	}		@Override	public Integer getFansCount(String inviteCode) {		Session session = sessionFactory.getCurrentSession();		Query query = session.createQuery("select count(id) from Users where isvalid = true and invitecode =:mycode");		query.setParameter("mycode", inviteCode);		return Integer.parseInt(query.uniqueResult().toString());	}	@Override	public List<Users> findUsersByInvitecode(String invitecode) {		Session session = sessionFactory.getCurrentSession();		Query query = session.createQuery(" from Users where isvalid = true and mycode=:mycode");			query.setParameter("mycode", invitecode);		return query.list();	}			@Override	public Integer findUsersByChannleId(String channleId) {		Integer re = 0;		Session session = sessionFactory.getCurrentSession();		Query query = session.createQuery(" update Users set userid='' where isvalid = true and userid=:channleId");			query.setParameter("channleId", channleId);			re= query.executeUpdate();		return re;	}		}