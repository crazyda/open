package com.axp.dao.impl;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import org.apache.commons.lang.StringUtils;import org.hibernate.Criteria;import org.hibernate.Query;import org.hibernate.SQLQuery;import org.hibernate.Session;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Repository;import com.alibaba.fastjson.JSONObject;import com.axp.dao.CommodityTypeDAO;import com.axp.dao.IReGoodsOfBaseDao;import com.axp.dao.IReGoodsOfSellerMallDao;import com.axp.domain.CommodityType;import com.axp.domain.ProvinceEnum;import com.axp.domain.ReGoodsOfBase;import com.axp.domain.ReGoodsOfSellerMall;@Repository public class ReGoodsOfSellerMallDaoImpl extends BaseDaoImpl<ReGoodsOfSellerMall> implements IReGoodsOfSellerMallDao {		@Autowired	private IReGoodsOfBaseDao reGoodsOfBaseDao;	@Autowired	private	CommodityTypeDAO commodityTypeDAO;	@Override	public String getSellerIdsOfHomePage(Integer goodsSize,Integer zoneId) {		Session session = sessionFactory.getCurrentSession();		String queryString = "select snapshotGoods.seller.id as goodsId,count(id) as goodsCount from ReGoodsOfSellerMall " +				"where addedTime < now() and shelvesTime > now()and snapshotGoods.seller.provinceEnum.provinceEnum.id="+zoneId+" and isValid = true and isChecked = true " +				"group by snapshotGoods.seller.id";		Query queryObject = session.createQuery(queryString);		List<Object[]> list = queryObject.list();		String ids = "-1";		for (Object[] data : list) {			if(Integer.parseInt(data[1].toString())>goodsSize){				ids += "," + data[0].toString();			}		}		return ids;			}		@Override   	public String getSellerIdsOfHomePage2(Integer goodsSize,ProvinceEnum provinceEnum,Double lat,Double lng,String keyword,Integer typeId) {		Session session = sessionFactory.getCurrentSession();		String queryString = "select distinct snapshotGoods.seller.id as goodsId,count(id) as goodsCount from ReGoodsOfSellerMall " +				"where  addedTime < now() and shelvesTime > now() and isValid = true and isChecked = true and snapshotGoods.seller.isvalid = true " ;								//如果是市和县和镇 或者是区				if((provinceEnum.getLevel2()==2&&provinceEnum.getLevel()==3)){  //如果是县镇 "区"  就看自己					queryString+="  and snapshotGoods.seller.provinceEnum.id="+provinceEnum.getId();				}else if(provinceEnum.getLevel2()==3){								queryString+="  and snapshotGoods.seller.provinceEnum.provinceEnum2.id="+provinceEnum.getProvinceEnum2().getId();				}				else{ //如果是正常二级市 就看市和区 但是不能看到县					queryString+="  and (snapshotGoods.seller.provinceEnum.id="+provinceEnum.getId() +" or snapshotGoods.seller.provinceEnum2.provinceEnum2.id="+provinceEnum.getId()+" )";				}				if(StringUtils.isNotBlank(keyword)){					queryString+="  and (snapshotGoods.name  like '%"+keyword+"%' or snapshotGoods.seller.name  like  '%"+keyword+"%' ) ";				}				if(typeId!=null){					queryString+=" and snapshotGoods.seller.shopCategory.id="+typeId;				}   				queryString+= " group by snapshotGoods.seller.id"				+ "  order by (round(6378.138*2*asin(sqrt(pow(sin( ("+lat+"*pi()/180-snapshotGoods.seller.latitude*pi()/180)/2),2)+"				+ "cos("+lat+"*pi()/180)*cos(snapshotGoods.seller.latitude*pi()/180)*pow(sin( ("+lng+"*pi()/180-snapshotGoods.seller.longitude*pi()/180)/2),2)))*1000)) asc " ;		Query queryObject = session.createQuery(queryString);		List<Object[]> list = queryObject.list();		String ids = "-1";		for (Object[] data : list) {			if(Integer.parseInt(data[1].toString())>goodsSize){				ids += "," + data[0].toString();			}		}		return ids;	}		@Override	public String getSellerIdsByLikeGoodsOrSeller(Double lat,Double lng,String keyword,ProvinceEnum provinceEnum){				Session session = sessionFactory.getCurrentSession();		String queryString="select distinct s.id  from re_goodsofsellermall gs inner join re_goodssnapshot gn on gs.snapshotid=gn.id"				+ " inner join seller s on s.id=gn.sellerid "				+ "inner join province_enum e on e.id=s.zoneId where gn.`name` like '%"+keyword+"%' or s.name like  '%"+keyword+"%' "				+ " and gs.addedTime < now() and gs.shelvesTime > now() and gs.isValid=1 and gs.isChecked=1 and gn.isValid=1 and s.isvalid=1 "				+ "  order by (round("+lat+"*2*asin(sqrt(pow(sin( (23.184825*pi()/180-s.latitude*pi()/180)/2),2)+"				+ "cos("+lat+"*pi()/180)*cos(s.latitude*pi()/180)*pow(sin( ("+lng+"*pi()/180-s.longitude*pi()/180)/2),2)))*1000)) asc " ;		Query queryObject = session.createQuery(queryString);		List<Integer> list = queryObject.list();					if(list.size()>0){			String ids=list.toString().replace("[","");			ids=ids.replace("]","");			return ids;		}		return null;	}		@Override	public int getSellerIdsByZones(Integer goodsSize, Integer zoneId) {		// TODO Auto-generated method stub		Session session = sessionFactory.getCurrentSession();		String queryString = "select snapshotGoods.seller.id as goodsId,count(id) as goodsCount from ReGoodsOfSellerMall " +				"where addedTime < now() and shelvesTime > now()and snapshotGoods.seller.provinceEnum.provinceEnum.id="+zoneId+" and isValid = true and isChecked = true " +				"group by snapshotGoods.seller.id";		Query queryObject = session.createQuery(queryString);		List<Object[]> list = queryObject.list();		int ids = 0;		if(list.size()>0){			ids=list.size();		}		return ids;	}		public int[] getSellerIdsByZones(Integer zoneId){		Session session = sessionFactory.getCurrentSession();		String queryString = "select snapshotGoods.seller.id as goodsId,count(id) as goodsCount from ReGoodsOfSellerMall " +				"where addedTime < now() and shelvesTime > now()and snapshotGoods.seller.provinceEnum.provinceEnum.id="+zoneId+" and isValid = true and isChecked = true " +				"group by snapshotGoods.seller.id";		Query queryObject = session.createQuery(queryString);		List<Object[]> list = queryObject.list();		int[] ids =null;		if(list.size()>0){			System.out.println("getSellerIdsByZones方法查出有数据了");			Object[] objects = list.get(0);			System.out.println("getSellerIdsByZones查询之后的list.get(0)的object[]:"+objects);			ids = (int[]) objects[0];			System.out.println("getSellerIdsByZones=======object[]的[0]:"+ids);		}		return ids;	}	@Override	public List<ReGoodsOfSellerMall> findLastSellerMall(Integer sellerId) {					Session session = sessionFactory.getCurrentSession();						SQLQuery sqlQuery = session.createSQLQuery("select * from re_goodsofsellermall s inner join ( select g.id,g.basegoodsid from re_goodsofsellermall g "					+ "inner join re_goodssnapshot gs on g.snapshotid=gs.id  inner join re_goodsofbase b on b.id=g.basegoodsid  "					+ " where   b.isvalid=1  And  g.isvalid=0 and gs.sellerid="+sellerId+" and (b.launchmall ='00000000' or b.launchmall ='0000000')  order by g.id desc  )"					+ " as g on s.id=g.id group by s.basegoodsid order by s.id desc");			sqlQuery.addEntity(ReGoodsOfSellerMall.class);			return sqlQuery.list();	}	@Override	public Boolean isLocalClassify(Integer baseGoodsId) {				ReGoodsOfBase reGoodsOfBase = reGoodsOfBaseDao.findById(baseGoodsId);		if(reGoodsOfBase.getFirstType()==null){			return false;		}				JSONObject jsonObject = reGoodsOfBase.getFirstType();		Integer id = jsonObject.getInteger("childTypeId");		if(id==null){			return false;		}		CommodityType commodityType = commodityTypeDAO.findById(id);				Boolean b=  commodityType.getIsLocal();		return b==null?false:b;	}	@Override	public List<Object[]> findPutStatus(Integer sellerMallId) {				//(select count(*) as '活动优惠券' from re_goodsofextendmall  where isvalid=1 and validtime > CURRENT_TIMESTAMP and isactivity=1 and sellerMallId=:id)		//(select count(*)  as '普通优惠券'"+ " from re_goodsofextendmall  where isvalid=1 and isactivity=0 and validtime > CURRENT_TIMESTAMP and  sellerMallId=:id)		Session session=sessionFactory.getCurrentSession();		String  sql="select (select count(*) as '本地特产' from re_goodsoflocalspecialtymall "				+ " where isvalid=1 and sellerMallId=:id),(select count(*) as '游戏商城_十积分抽奖' from re_goodsofLockMall   where isvalid=1 and sellerMallId=:id and gameType=265 and openYards is null) ,"				+ " (select count(*) as '游戏商城_倒计时' from re_goodsofLockMall   where isvalid=1 and sellerMallId=:id and gameType=267), "				+ "(select count(*) as '积分商城' from re_goodsofscoremall   where isvalid=1  and sellerMallId=:id), "				+ "(select count(*) as '秒杀商城' from re_goodsofseckillmall  where isvalid=1 and sellerMallId=:id), "				+ "(select count(*) as '拼团' from re_goodsofteammall   where isvalid=1 and sellerMallId=:id)," 						+ "(select count(*) as '换货会' from re_goodsofChangeMall   where isvalid=1 and sellerMallId=:id)" 				+";";	 Map<String, Object> map=new HashMap<String, Object>();		map.put("id",sellerMallId);				 SQLQuery createSQLQuery = session.createSQLQuery(sql);		 createSQLQuery.setProperties(map);						return createSQLQuery.list();	}		}