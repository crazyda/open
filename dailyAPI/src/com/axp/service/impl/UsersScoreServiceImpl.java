package com.axp.service.impl;import java.sql.Timestamp;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Arrays;import java.util.Calendar;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.logging.Logger;import javax.servlet.ServletContext;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.commons.lang.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.interceptor.TransactionAspectSupport;import com.alibaba.fastjson.JSONArray;import com.axp.dao.DateBaseDAO;import com.axp.domain.AdminUser;import com.axp.domain.AdminUserScoreRecord;import com.axp.domain.JphScorerecords;import com.axp.domain.ScoreModel;import com.axp.domain.Scorerecords;import com.axp.domain.TodayRecord;import com.axp.domain.Users;import com.axp.service.UsersScoreService;import com.axp.util.CalcUtil;import com.axp.util.DateUtil;import com.axp.util.JsonResponseUtil;import com.axp.util.Parameter;import com.axp.util.ParameterUtil;import com.axp.util.QueryModel;import com.axp.util.StringUtil;@Servicepublic class UsersScoreServiceImpl extends BaseServiceImpl<Scorerecords> implements UsersScoreService {		@Autowired	DateBaseDAO dataBaseDao;		private static final Logger log = Logger			.getLogger(UsersScoreServiceImpl.class.getName());		final int[] TYPE_ADVER = new int[] { 1, 2, 3, 4, 5, 12 };	final int MAXSCORE = 100;			@Override	public Map<String, Object> getRecord(Integer userId,Integer pageIndex,Integer type) { // type == 0积分列表, 1 金币列表			Map<String, Object> statusMap = new HashMap<String, Object>();		Map<String, Object> dataMap = new HashMap<String, Object>();			statusMap.put("status", 0x01);		statusMap.put("message", "请求成功");		statusMap.put("isCheck", false);		int pageItemCount = 10;		int start = (pageIndex - 1) * pageItemCount;		QueryModel model = new QueryModel();				if(type == 0){ 						int score = (Integer) usersDao.getPropertyById("score", userId);			model.clearQuery();			model.combEquals("users.id", userId);			model.combCondition("(type <20  or type is null)");						int count = dataBaseDao.findCount(Scorerecords.class, model);			int totalPage = (count%pageItemCount)>0?((count/pageItemCount)+1):(count/pageItemCount);			List<Scorerecords> mlst = dataBaseDao.findPageList(Scorerecords.class, model, start, pageItemCount);			dataMap.put("score", score);			dataMap.put("dataList", mlst);			dataMap.put("pageSize", totalPage);			dataMap.put("pageIndex", pageIndex);			dataMap.put("pageItemCount", pageItemCount);			statusMap.put("data", dataMap);					}else if(type == 1){  //聚品惠金币			int gold = 0;			if(usersDao.getPropertyById("jphScore", userId)!=null){				gold = (Integer)usersDao.getPropertyById("jphScore", userId);			}						int count = dataBaseDao.findCount(JphScorerecords.class, model);;			int totalPage = (count%pageItemCount)>0?((count/pageItemCount)+1):(count/pageItemCount);			model.clearQuery();			model.combPreEquals("users.id", userId,"user_id");			model.setOrder("createtime DESC");			List<JphScorerecords> jphScores = dataBaseDao.findPageList(JphScorerecords.class, model, start, pageItemCount);			dataMap.put("score", gold);			dataMap.put("totalGoldCoins",gold);			dataMap.put("dataList", jphScores);			dataMap.put("pageSize", totalPage);			dataMap.put("pageIndex", pageIndex);			statusMap.put("data", dataMap);		}				return statusMap;	}	@Override	public Map<String, Object> updateSocre( ServletContext servletContext,Integer userId, String dataList,String v,boolean isAndroidD) {		Map<String, Object> statusMap = new HashMap<String, Object>();		statusMap.put("status", 0x01);		statusMap.put("message", "请求成功");				try{							List<ScoreModel> scoreModel = JSONArray.parseArray(dataList, ScoreModel.class);				if(!v.equals("5.9.2")&&scoreModel.size()>1){//新版本需要修改			if(scoreModel.get(scoreModel.size()-1).getType()==12){				scoreModel.remove(scoreModel.size()-1);			}		}				if(isAndroidD&&scoreModel.size()>0&&userId!=null){ //如果是安卓			Map<Integer, List<ScoreModel>> userScore = (Map<Integer, List<ScoreModel>>) servletContext.getAttribute("userScore");			ScoreModel currentScore = scoreModel.get(scoreModel.size()-1);			List<ScoreModel> Scorelist = userScore.get(userId);			if(Scorelist==null){				Scorelist=new ArrayList<>();			}			if(currentScore.getType()==2){  //触发加分				String totalScorelist=null;				if(userScore.containsKey(userId)){ //如果有记录					  Scorelist.add(currentScore);					  totalScorelist=JSONArray.toJSONString(Scorelist);				}else{ //没有记录 ;累计积分					totalScorelist=dataList;				}				userScore.remove(userId);				 return updateSocre(servletContext, userId, totalScorelist, v,false);							}else{ //累加积分				 Scorelist.add(currentScore);				 userScore.put(userId, Scorelist);				 return statusMap;			}		}						Users users=usersDao.findById(userId);				if(users==null){			statusMap.put("status", -0x0041);			statusMap.put("message", "数据异常！");			return statusMap;		}				int dailyScore = todayRecordDao.getTodayScoreByUserId(userId);		int beforeDailyScore = dailyScore;		if (dailyScore >= MAXSCORE) {			statusMap.put("status", -0x0041);			statusMap.put("message", "当日指定类型积分总额已满"+MAXSCORE);			return statusMap;		}				if(scoreModel.size()>11){			statusMap.put("status", -0x0041);			statusMap.put("message", "数据异常！");			return statusMap;		}		for(int i=0;i<scoreModel.size();i++){			//当分数类型为指定受限时，进行溢出处理			if (Arrays.binarySearch(TYPE_ADVER, scoreModel.get(i).getType()) >= 0) {				int updateScore = scoreModel.get(i).getScore();					if ((dailyScore + updateScore) < MAXSCORE							&& dailyScore < MAXSCORE) {						dailyScore = dailyScore + updateScore;					} else if ((dailyScore + updateScore) > MAXSCORE							&& dailyScore < MAXSCORE) {						ScoreModel changeScore = scoreModel.get(i);						changeScore.setScore(MAXSCORE - dailyScore);						scoreModel.set(i, changeScore);						dailyScore = MAXSCORE;					} else {						scoreModel.remove(i);						i-=1;					}							}		}		int totalscore = this.changeScore(scoreModel,userId);		if (totalscore < 0) {			statusMap.put("status", -0x0042);			statusMap.put("message", "当前积分总额不足");			return statusMap;		}else{			todayRecordDao.updateTodayScore(userId, dailyScore - beforeDailyScore);		}		Map<String, Object> dataMap = new HashMap<String, Object>();		dataMap.put("totalScore", totalscore);		statusMap.put("data", dataMap);	}catch(Exception e){  		e.printStackTrace();		TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();	}		return statusMap;	}		public int changeScore(List<ScoreModel> scoreModel,Integer userId) {		Users user = usersDao.findById(userId);		Map<Integer,String> typeMap = scoretypesDao.getScoretypesRemarkMap();		int totalscore = user.getScore() == null ? 0 : user.getScore(); // 目前积分				int beforeScore = totalscore;		try {			for (ScoreModel model : scoreModel) {				int updateScore = model.getScore();								if(updateScore>30){					continue;				}								int updateType =  model.getType();				String updateRemark = typeMap.get(updateType);				if ((totalscore + updateScore) >= 0 && updateRemark!=null) {					Scorerecords sr = new Scorerecords();					sr.setIsvalid(true);					sr.setAdminuserId(-1);					sr.setBeforeScore(totalscore);					sr.setScore(updateScore);					sr.setAfterScore(totalscore + updateScore);					sr.setUsers(user);					sr.setForeignId(user.getId());					if(model.getAcquireTime()==null){					sr.setCreatetime(new java.sql.Timestamp(System							.currentTimeMillis()));					}else{						sr.setCreatetime(model.getAcquireTime());					}					sr.setType(updateType);					if (updateScore > 0) {						sr.setRemark(updateRemark + "获得积分：" + updateScore);						sr.setScoretype(updateRemark + "获得积分：" + updateScore);					}					if (updateScore < 0) {						sr.setRemark(updateRemark + "消费积分：" + updateScore);						sr.setScoretype(updateRemark + "获得积分：" + updateScore);					}					scorerecordsDao.save(sr);					totalscore = totalscore + updateScore;									}			}			user.setScore(totalscore);			usersDao.update(user);								} catch (Exception e) {			e.printStackTrace();			log.info("用户【" + user.getId() + "】加分出错：" + e);			totalscore = beforeScore;			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();		}		return totalscore;	}		/**	 * 判断最近点击微官网是否超过5分钟	 * 	 * @return	 */	private boolean getWebLastDate(Integer userId,int type) {		boolean isPass = true;		Timestamp last = (Timestamp)scorerecordsDao.getLastRecordParameterInType("createtime", userId, type);		if (last != null) {			Timestamp now = new java.sql.Timestamp(System.currentTimeMillis());			long s = (now.getTime() - last.getTime()) / (1000 * 60);			if (s <= 5) {				isPass = false;			}		}		return isPass;	}		//添加积分 d	@Override	public Map<String, Object> updateScore2(HttpServletRequest request,HttpServletResponse response) {		Parameter parameter = ParameterUtil.getParameter(request);		if (parameter == null) {			return JsonResponseUtil.getJson(-0x02,"参数data不是合法的json字符串");		}				Integer userId = StringUtil.isEmpty(parameter.getUserId())?-1:Integer.parseInt(parameter.getUserId());		int random = (int)(1+Math.random()*20);		int randomnum=1;		Map<String, Object> statusMap = new HashMap<String, Object>();		statusMap.put("status", 0x01);		statusMap.put("message", "请求成功");			Users user = usersDao.findById(userId);		if(user == null){			statusMap.put("status", -2);			statusMap.put("message", "账号不存在");			return statusMap;		}else{					Integer score= todayRecordDao.getTodayScoreByUserId(userId);			if(score>4){				statusMap.put("status", -2);				statusMap.put("message", "超过最大值");				return statusMap;			}						if(random==1 || random==2){				todayRecordDao.updateTodayScore(userId, 1);				int beforeScore = user.getScore()==null?0:user.getScore();				user.setScore(beforeScore+1);				usersDao.saveOrUpdate(user);								//添加数据到Scorerecords_plus_one								Scorerecords scorerecords = new Scorerecords();				scorerecords.setUsers(user);				scorerecords.setScore(1);				scorerecords.setBeforeScore(beforeScore);				scorerecords.setAfterScore(beforeScore+random);				Timestamp tt = new Timestamp(System.currentTimeMillis());				Date now = DateUtil.addMonth2Date(6, DateUtil.transToDate(tt));								SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");				scorerecords.setCreatetime(tt);				scorerecords.setValidityTime(Timestamp.valueOf(sdf.format(now.getTime())));//积分有效半年				scorerecords.setForeignId(userId);				scorerecords.setIsvalid(true);				scorerecords.setAdminuserId(47);				scorerecords.setRemark("分享赠送积分");				scorerecords.setType(12);				scorerecords.setSurplusScore(1);				scorerecords.setScoretype("1");				scorerecordsDao.save(scorerecords);// 添加数据到Scorerecords_plus_one			}					}								return statusMap;	}	@Override	public Map<String, Object> jphSendScore(HttpServletRequest request,			HttpServletResponse response) {		Map<String, Object> statusMap = new HashMap<String, Object>();		Map<String, Object> dataMap = new HashMap<String, Object>();		Parameter parameter = ParameterUtil.getParameter(request);		if (parameter == null) {			return JsonResponseUtil.getJson(-0x02,"参数data不是合法的json字符串");		}				String userId = parameter.getUserId();//赠送用户id			String receiverPhone = parameter.getData().getString("receiverPhone");//被赠送用户手机			String scoreNum = parameter.getData().getString("goldCoinNum");//积分赠送数			int score = 0;						Users user = null;			if (StringUtils.isNotBlank(userId)) {				user = userDao.findById(Integer.parseInt(userId));			}else{				statusMap.put("status", -2);				statusMap.put("message", "用户未登录");				return statusMap;			}						Users preUser = null;			QueryModel query = new QueryModel();			query.combPreEquals("phone",receiverPhone);			List<Users> presenterUser = dataBaseDao.findLists(Users.class, query);			if(presenterUser.size()>0 && presenterUser != null){				preUser = presenterUser.get(0);			}else{				statusMap.put("status", -2);				statusMap.put("message", "被赠送用户不属于聚品惠用户,请先注册");				return statusMap;			}			if (userId!=null) {				score =user.getJphScore()==null?0:user.getJphScore();  //聚品惠金币				if (score < Integer.parseInt(scoreNum)) {					statusMap.put("status", -3);					statusMap.put("message", "金币不足");					return statusMap;				}			}									//赠送者金币减少			user.setJphScore((int)CalcUtil.sub(user.getJphScore(), Integer.parseInt(scoreNum)));			user.setLasttime(new Timestamp(System.currentTimeMillis()));			userDao.saveOrUpdate(user);						//被赠送的用户 积分调整			preUser.setJphScore((int)CalcUtil.add(preUser.getJphScore()==null?0:preUser.getJphScore(), Integer.parseInt(scoreNum)));			preUser.setLasttime(new Timestamp(System.currentTimeMillis()));			userDao.saveOrUpdate(preUser);						//赠送者记录			JphScorerecords scorerecords = new JphScorerecords();			scorerecords.setBeforeScore((int)CalcUtil.sub(user.getScore(), Integer.parseInt(scoreNum)));			scorerecords.setAfterScore(user.getScore());			scorerecords.setIsvalid(true);			scorerecords.setCreatetime(new Timestamp(System.currentTimeMillis()));			scorerecords.setValidityTime(new Timestamp(DateUtil.addDay2Date(180, new Date()).getTime()));			scorerecords.setScore(Integer.parseInt(scoreNum));			scorerecords.setScoretype("您成功赠送了"+scoreNum+"积分给"+preUser.getName());			scorerecords.setRemark("您成功赠送了"+scoreNum+"积分给"+preUser.getName());			scorerecords.setType(17);			scorerecords.setForeignId(preUser.getId());			scorerecords.setUsers(user);			jphScorerecordsDAO.save(scorerecords);						//被赠送者记录			JphScorerecords scorerecord = new JphScorerecords();			scorerecord.setBeforeScore((int)CalcUtil.sub(preUser.getScore(), Integer.parseInt(scoreNum)));			scorerecord.setAfterScore(preUser.getScore());			scorerecord.setIsvalid(true);			scorerecord.setCreatetime(new Timestamp(System.currentTimeMillis()));			scorerecord.setValidityTime(new Timestamp(DateUtil.addDay2Date(180, new Date()).getTime()));			scorerecord.setScore(Integer.parseInt(scoreNum));			scorerecord.setScoretype(user.getName()+"成功赠送你"+scoreNum+"积分");			scorerecord.setRemark(user.getName()+"成功赠送你"+scoreNum+"积分");			scorerecord.setType(17);			scorerecord.setForeignId(user.getId());			scorerecord.setUsers(preUser);			jphScorerecordsDAO.save(scorerecord);									dataMap.put("totalGoldCoins", Double.valueOf(user.getJphScore()));			statusMap.put("status", 1);			statusMap.put("data", dataMap);			statusMap.put("message", "赠送成功");									return statusMap;	}	@Override	public Map<String, Object> goldCoinConvert(HttpServletRequest request,			HttpServletResponse response) {		Parameter parameter = ParameterUtil.getParameter(request);		if(parameter == null ){			return JsonResponseUtil.getJson(-0x02,"参数data不是合法的json字符串");		}				Map<String, Object> statusMap = new HashMap<String, Object>();		List<Map<String, Object>> list = new ArrayList<Map<String,Object>>();		Map<String, Object> data = new HashMap<String, Object>();				String userId = parameter.getUserId();		String convertNum = parameter.getData().getString("convertNum");						if (StringUtils.isBlank(userId)) {			return JsonResponseUtil.getJson(-0x02, "用户未登录！");		}				Users user = userDao.findById(Integer.parseInt(userId));				if (user==null) {			return JsonResponseUtil.getJson(-0x02, "没有找到该用户");		}				int score = 0;		if (userId!=null) {			score =user.getJphScore()==null?0:user.getJphScore();  //聚品惠金币			if (score < Integer.parseInt(convertNum)) {				statusMap.put("status", -3);				statusMap.put("message", "金币不足");				return statusMap;			}		}				int newScore = 0;		newScore = (int) CalcUtil.add(user.getScore(), Integer.parseInt(convertNum));		user.setScore(newScore); //积分增加		user.setLasttime(new Timestamp(System.currentTimeMillis()));		user.setJphScore((int)CalcUtil.sub(user.getJphScore(), Integer.parseInt(convertNum)));//金币减少		userDao.saveOrUpdate(user);				JphScorerecords scorerecords = new JphScorerecords();		scorerecords.setBeforeScore((int)CalcUtil.sub(user.getJphScore()==null?0:user.getJphScore(), Integer.parseInt(convertNum)));		scorerecords.setAfterScore(user.getJphScore()==null?0:user.getJphScore());		scorerecords.setIsvalid(true);		scorerecords.setCreatetime(new Timestamp(System.currentTimeMillis()));		scorerecords.setValidityTime(new Timestamp(DateUtil.addDay2Date(180, new Date()).getTime()));		scorerecords.setScore(Integer.parseInt(convertNum));		scorerecords.setScoretype("您把"+convertNum+"聚品惠金币,转为了积分(转换比例是1:1)");		scorerecords.setRemark("您把"+convertNum+"聚品惠金币,转为了积分(转换比例是1:1)");		scorerecords.setType(17);		//scorerecords.setAdminuserId(adminUser.getId());		//scorerecords.setForeignId(Integer.parseInt(presenterId));		scorerecords.setUsers(user);		jphScorerecordsDAO.save(scorerecords);				Scorerecords scorerecord = new Scorerecords();		scorerecord.setBeforeScore((int)CalcUtil.sub(user.getScore(), Integer.parseInt(convertNum)));		scorerecord.setAfterScore(user.getScore());		scorerecord.setIsvalid(true);		scorerecord.setCreatetime(new Timestamp(System.currentTimeMillis()));		scorerecord.setValidityTime(new Timestamp(DateUtil.addDay2Date(180, new Date()).getTime()));		scorerecord.setScore(Integer.parseInt(convertNum));		scorerecord.setScoretype("聚品惠金币转换积分");		scorerecord.setRemark("聚品惠金币转换积分");		scorerecord.setType(17);		//scorerecords.setAdminuserId(adminUser.getId());		//scorerecords.setForeignId(Integer.parseInt(presenterId));		scorerecord.setUsers(user);		scorerecordsDao.save(scorerecord);														data.put("totalGoldCoins", Double.valueOf(user.getJphScore()));		data.put("totalScores",Double.valueOf(user.getScore()));				statusMap.put("status", 1);		statusMap.put("message", "请求成功");		statusMap.put("data", data);		return statusMap;	}		@Override	public Map<String, Object> checkReceiverInfo(HttpServletRequest request,			HttpServletResponse response) {					Map<String, Object> statusMap = new HashMap<String, Object>();		Map<String,Object> dataMap = new HashMap<String,Object>();		Parameter parameter = ParameterUtil.getParameter(request);		if (parameter == null) {			return JsonResponseUtil.getJson(-0x02,"参数data不是合法的json字符串");		}		String userId = parameter.getUserId();//赠送用户id		String receiverPhone = parameter.getData().getString("receiverPhone");//被赠送用户手机				Users user = null;		if (StringUtils.isNotBlank(userId)) {			user = userDao.findById(Integer.parseInt(userId));		}else{			statusMap.put("status", -2);			statusMap.put("message", "用户未登录");			return statusMap;		}				Users preUser = null;		QueryModel query = new QueryModel();		query.combPreEquals("phone",receiverPhone);		List<Users> presenterUser = dataBaseDao.findLists(Users.class, query);		if(presenterUser.size()>0 && presenterUser != null){			preUser = presenterUser.get(0);			dataMap.put("nickName", preUser.getName());				}else{			statusMap.put("status", -2);			statusMap.put("message", "被赠送用户不属于聚品惠用户,请先注册");			return statusMap;		}				statusMap.put("status", 1);		statusMap.put("message", "可以赠送积分");		statusMap.put("data", dataMap);		return statusMap;	}	}