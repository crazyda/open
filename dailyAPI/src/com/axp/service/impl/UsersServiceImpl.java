package com.axp.service.impl;import java.awt.AlphaComposite;import java.awt.Graphics2D;import java.awt.image.BufferedImage;import java.io.File;import java.io.FileWriter;import java.io.IOException;import java.io.PrintWriter;import java.io.UnsupportedEncodingException;import java.net.URL;import java.sql.Timestamp;import java.text.DecimalFormat;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Collections;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Map.Entry;import java.util.Random;import javax.annotation.Resource;import javax.imageio.ImageIO;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.commons.lang.StringUtils;import org.hibernate.Session;import org.hibernate.SessionFactory;import org.hibernate.Transaction;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.cache.annotation.Cacheable;import org.springframework.stereotype.Service;import org.springframework.transaction.interceptor.TransactionAspectSupport;import org.springframework.web.servlet.mvc.support.RedirectAttributes;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.axp.dao.AdminUserDAO;import com.axp.dao.DateBaseDAO;import com.axp.dao.GetmoneyRecordDAO;import com.axp.dao.ICashmoneyRecordDao;import com.axp.dao.IReFeedbackDao;import com.axp.dao.IReUserAddressConfigDao;import com.axp.dao.IUsersDao;import com.axp.dao.ProvinceEnumDAO;import com.axp.dao.SellerAccountNumberDao;import com.axp.dao.UserDarwDAO;import com.axp.dao.UserFriendsInfoConcernDAO;import com.axp.dao.UserFriendsInfoDAO;import com.axp.dao.UserFriendsInfoReplyDAO;import com.axp.dao.UserProfitsDAO;import com.axp.domain.AdminUser;import com.axp.domain.AdminUserScoreRecord;import com.axp.domain.AdminuserCashpointRecord;import com.axp.domain.AdminuserWithdrawals;import com.axp.domain.Captcha;import com.axp.domain.CashmoneyRecord;import com.axp.domain.ChangeOrder;import com.axp.domain.CommodityType;import com.axp.domain.DLScoreMark;import com.axp.domain.FreeVoucherRecord;import com.axp.domain.GameActivity;import com.axp.domain.GetmoneyRecord;import com.axp.domain.ItalkGroup;import com.axp.domain.ItalkGroupMember;import com.axp.domain.Members;import com.axp.domain.MembersBonusRecord;import com.axp.domain.MessageCenter;import com.axp.domain.PartnerAdminuserPidDistribute;import com.axp.domain.ReBaseGoods;import com.axp.domain.ReFeedback;import com.axp.domain.ReGoodsOfChangeMall;import com.axp.domain.ReGoodsorderItem;import com.axp.domain.ReUserAddressConfig;import com.axp.domain.SJScoreMark;import com.axp.domain.ScoreMark;import com.axp.domain.Scorerecords;import com.axp.domain.Seller;import com.axp.domain.SellerAccountNumber;import com.axp.domain.SellerMainPage;import com.axp.domain.SignCalc;import com.axp.domain.TkldPid;import com.axp.domain.UserDarw;import com.axp.domain.UserDarwRecord;import com.axp.domain.UserFriendsInfo;import com.axp.domain.UserFriendsInfoConcern;import com.axp.domain.UserFriendsInfoReply;import com.axp.domain.UserLoginRecord;import com.axp.domain.UserProfits;import com.axp.domain.UserScoreMark;import com.axp.domain.Users;import com.axp.domain.UsersMonitor;import com.axp.domain.Bonus;import com.axp.domain.ProvinceEnum;import com.axp.service.GameActivityService;import com.axp.service.IAppPageService;import com.axp.service.IReGoodsOfLockMallService;import com.axp.service.ISellerService;import com.axp.service.IUsersService;import com.axp.service.ItalkGroupMemberService;import com.axp.service.ItalkGroupService;import com.axp.service.ScoreMarkService;import com.axp.service.TkldPidService;import com.axp.service.UserSystemMessageService;import com.axp.util.AESUtil;import com.axp.util.CalcUtil;import com.axp.util.CityUtil;import com.axp.util.DateUtil;import com.axp.util.JsonResponseUtil;import com.axp.util.MD5Util;import com.axp.util.Parameter;import com.axp.util.ParameterUtil;import com.axp.util.QueryModel;import com.axp.util.SSLClient;import com.axp.util.StringUtil;import com.axp.util.ToolSpring;import com.axp.util.UploadUtil;import com.axp.util.UrlUtil;import com.google.gson.Gson;import com.monitor360.util.MonitorUtil;import com.rongcloud.models.TokenResult;import com.weixin.config.WeixinConfig;import com.weixin.util.WeixinUtil;@Servicepublic class UsersServiceImpl extends BaseServiceImpl<Users> implements IUsersService {	@Resource	private DateBaseDAO dateBaseDAO;	@Resource	private IUsersDao usersDao;		@Resource	private AdminUserDAO aminUserDao;	@Autowired	private IReUserAddressConfigDao userAddressConfigDao;	@Autowired	private IReFeedbackDao feedbackDao;	@Autowired	private IReUserAddressConfigDao addressConfigDao;		@Autowired	private GetmoneyRecordDAO getmoneyRecordDao;		@Autowired	private ICashmoneyRecordDao moneyDao ;	@Autowired	private ISellerService sellerService;	@Autowired	private SellerAccountNumberDao sellerAccountNumberDao;		@Autowired	private ICashmoneyRecordDao cashmoneyRecordDao;		@Resource	UserSystemMessageService userSystemMessageService;	@Autowired	private TkldPidService tkldPidService;	@Autowired	private ItalkGroupMemberService italkGroupMemberService;	@Autowired	private ItalkGroupService italkGroupService;	@Autowired	private IReGoodsOfLockMallService reGoodsOfLockMallService;	@Autowired	private GameActivityService gameActivityService;	@Autowired	private ScoreMarkService scoreMarkService;		@Autowired	private ProvinceEnumDAO provinceEnumDAO;	@Autowired	private IAppPageService  appPageService;	@Autowired	private UserFriendsInfoDAO userFriendsInfoDAO;	@Autowired	private UserFriendsInfoConcernDAO userFriendsInfoConcernDAO;		@Autowired	private UserProfitsDAO userProfitsDAO;	@Autowired	private UserFriendsInfoReplyDAO userFriendsInfoReplyDAO;		/**	 * 使用用户名和密码登录；	 */	@Override	public Map<String, Object> loginByUsernameAndPassword(HttpServletRequest request,String username, String password, String channelId,String app,String tokenId,String captcha,String Invitecode,String os) {			List<Users> userList = new ArrayList<Users>();	        String basePath = request.getServletContext().getAttribute("RESOURCE_LOCAL_URL").toString();	        Boolean isUserVersion =  ParameterUtil.getParameter(request).getData().getBoolean("isUserVersion")==null?false: ParameterUtil.getParameter(request).getData().getBoolean("isUserVersion");			boolean isSeller="SELLER".equals(app)?true:false;			Parameter parameter = ParameterUtil.getParameter(request);			String v = parameter.getAppVersion();	        String version = "";	        char[] charArray = v.toCharArray();	    	for (int i = 0; i < charArray.length; i++) {				if(".".equals(String.valueOf(charArray[i]))){					continue;				}				   version+=charArray[i];			}			if(!isSeller){				userList = usersDao.getUserByUsername(username);			}						 Users user=null;							if (userList != null && userList.size() >= 1) {				if(userList.size()>0){					 user = userList.get(0);				}				if(user.getOpenId() == null || user.getOpenId() == ""){					Map<String, Object> map = new HashMap<String, Object>();					map.put("status", -0x0018);					map.put("message", "手机用户需要先绑定微信!");					return map;				}				if(StringUtils.isNotBlank(captcha) && StringUtils.isBlank(password)){					Map<String, Object> checkmap = captchaDao.checkCaptcha(username, captcha);					Integer status= Integer.parseInt(checkmap.get("status").toString());					if(status < 0){						Map<String, Object> map = new HashMap<String, Object>();						map.put("status", -0x0013);						map.put("message", "验证码错误！");						return map;					}				}else if(StringUtil.isEmpty(user.getPwd()) || !user.getPwd().equals(MD5Util.GetMD5Code(password))){					Map<String, Object> map = new HashMap<String, Object>();					map.put("status", -0x0011);					map.put("message", "用户登录密码错误");					return map;				}					//存在用户，且用户名和密码都正确；				return registerNotify(user, channelId, tokenId,os,basePath,false,app);							}else if(!"SELLER".equals(app)&&StringUtils.isNotBlank(captcha)){				 Map<String, Object> checkMap = checkCaptcha(username, captcha, Invitecode);				 Integer status=Integer.parseInt(checkMap.get("status").toString());				 if(status>0){					 user=(Users) checkMap.get("users");					 if(user.getOpenId() == null || user.getOpenId() == ""){							Map<String, Object> map = new HashMap<String, Object>();							map.put("status", -0x0018);							map.put("message", "手机用户需要先绑定微信!");							return map;						}					 return registerNotify(user, channelId, tokenId,os,basePath,false,app);				 }else{  					 return checkMap;				 }			}else {				userList = usersDao.getUserByUsername(username);				if (userList != null && userList.size() >= 1) {					if(userList.size()>0){						 user = userList.get(0);					}				}else{					Map<String, Object> map = new HashMap<String, Object>();					map.put("status", -0x0012);					map.put("message", "该手机号还不是每天积分用户,请先在用户版注册并登录!");					return map;				}				if(user.getIsSeller()==null || !user.getIsSeller()){					Map<String, Object> map = new HashMap<String, Object>();					map.put("status", -0x0012);					map.put("message", "请先在用户版填写店铺资料并提交,平台审核通过方可登录商家版");					return map;				}				String axpUserName=null;				String phone = username;				if(!username.startsWith("axp")){					axpUserName="axp"+username;				}				//获取用户；				AdminUser au =null;				au=aminUserDao.getLoginAdminUser(username);				if(au==null&&axpUserName!=null){					au=adminUserDao.getLoginAdminUser(axpUserName);				}				if(au!=null){					if(isUserVersion){ //不验证商家密码 true											}else{						if(Integer.valueOf(version)<104){														if (StringUtil.isEmpty(au.getPassword()) || !au.getPassword().equals(MD5Util.GetMD5Code(password))) {//密码错误情况；								Map<String, Object> map = new HashMap<String, Object>();								map.put("status", -0x0011);								map.put("message", "用户登录密码错误");								return map;							}						}else{														if(!"18700004848".equals(phone)){								Map<String, Object> checkmap = captchaDao.checkCaptcha(phone, captcha);								Integer status= Integer.parseInt(checkmap.get("status").toString());								if(status < 0){									Map<String, Object> map = new HashMap<String, Object>();									map.put("status", -0x0012);									map.put("message", "验证码错误！");									return map;								}							}																				}											}										Map<String, Object> map = new HashMap<String, Object>();					map.put("status", 1);					map.put("message", "登陆成功");					Map<String, Object> m1 = new HashMap<String, Object>();															Seller seller=null;					Users users =null;					List<Seller> slist = sellerDao.getSellerListByAdminId(au.getId());					if(slist!=null && slist.size()>0){						seller = slist.get(0);					}						                if(seller !=null){	                	List<SellerAccountNumber> sanlist = sellerAccountNumberDao.queryListByParameterTwo("seller.id", seller.getId());	    				if(sanlist.size()>0){	    					SellerAccountNumber san = sanlist.get(0);	    					users=san.getUser();	    				}	    					    				SellerMainPage sellerMainPage = sellerMainPageDAO.findOneBySellerId(seller.getId());	    				String sellerLogo=StringUtil.sellerHead;	    				if(sellerMainPage!=null  ){		    				if(StringUtils.isBlank(sellerMainPage.getSellerLogo())||StringUtils.isNotBlank(sellerMainPage.getSellerLogo())&&sellerMainPage.getSellerLogo().length()<50){		    					sellerLogo=StringUtil.sellerHead;		    				}else{		    					sellerLogo=basePath+sellerMainPage.getSellerLogo();		    				}	    				}						TokenResult tokenResult = rongCloudService.getToken("axp"+au.getId().toString(),seller.getName(),sellerLogo);						m1.put("token",tokenResult.getToken());						m1.put("sellerLogo",sellerLogo);						m1.put("sellerName",seller.getName()==null?"商家":seller.getName());	                    m1.put("sellerId", seller.getId()+"");	                }else{	                	m1.put("token","-1");						m1.put("sellerLogo","");						m1.put("sellerName","");	                		                	if(au.getLevel()>60){	                		m1.put("sellerId", 772+"");	                	}	                		                }	                m1.put("adminuserId", au.getId()+"");	                m1.put("axpAdminUserId", "axp"+au.getId()+"");	                					if(users!=null){						m1.put("userId", users.getId()+"");					}else{						m1.put("userId", "");					}										map.put("data", m1);										//商家版单点登录					sellerSingleSignOn(au, channelId, tokenId);						return map;									}else{					userList = usersDao.getUserByUsername(username);					if (userList != null && userList.size() >= 1) {						if(userList.size()>0){							 user = userList.get(0);						}						if(StringUtils.isNotBlank(captcha) && StringUtils.isBlank(password)){							Map<String, Object> checkmap = captchaDao.checkCaptcha(username, captcha);							Integer status= Integer.parseInt(checkmap.get("status").toString());							if(status < 0){								Map<String, Object> map = new HashMap<String, Object>();								map.put("status", -0x0012);								map.put("message", "验证码错误！");								return map;							}						}else if(StringUtil.isEmpty(user.getPwd()) || !user.getPwd().equals(MD5Util.GetMD5Code(password))){							Map<String, Object> map = new HashMap<String, Object>();							map.put("status", -0x0011);							map.put("message", "用户登录密码错误");							return map;						}							//存在用户，且用户名和密码都正确；						return registerNotify(user, channelId, tokenId,os,basePath,true,app);											}else{						Map<String, Object> map = new HashMap<String, Object>();						map.put("status", -0x0012);						map.put("message", "账号不存在");						return map;					}													}			}										}		//商家登录方法	public Map<String, Object> loginByUsernameAndPassword(AdminUser au, String password, String channelId,String tokenId){				if(au!=null){						if (StringUtil.isEmpty(au.getPassword()) || !au.getPassword().equals(MD5Util.GetMD5Code(password))) {//密码错误情况；				Map<String, Object> map = new HashMap<String, Object>();				map.put("status", -0x0011);				map.put("message", "用户登录密码错误");								return map;			}else{						Map<String, Object> map = new HashMap<String, Object>();			map.put("status", 1);			map.put("message", "登陆成功");			Map<String, Object> m1 = new HashMap<String, Object>();									Seller seller=null;			Users users =null;			List<Seller> slist = sellerDao.getSellerListByAdminId(au.getId());			if(slist!=null && slist.size()>0){				seller = slist.get(0);			}						au.setChannelid(channelId);			au.setDevicetoken(tokenId);			adminUserDao.update(au);            if(seller !=null){            	List<SellerAccountNumber> sanlist = sellerAccountNumberDao.queryListByParameterTwo("seller.id", seller.getId());				if(sanlist.size()>0){					SellerAccountNumber san = sanlist.get(0);					users=san.getUser();				}            	                m1.put("sellerId", seller.getId()+"");            }else{            	if(au.getLevel()>60){            		m1.put("sellerId", 772+"");            	}            	            }            m1.put("adminuserId", au.getId()+"");			if(users!=null){				m1.put("userId", users.getId()+"");			}else{				m1.put("userId", "");			}			map.put("data", m1);			return map;			}		}else{				Map<String, Object> map = new HashMap<String, Object>();		map.put("status", -0x0012);		map.put("message", "账号不存在");		return map;		}	}	//商家登录方法		public Map<String, Object> loginByUsernameAndPasswordForUsers(Users user, String password, String channelId,String tokenId){			Map<String, Object> map = new HashMap<String, Object>();			if (StringUtil.isEmpty(user.getPwd()) || !user.getPwd().equals(MD5Util.GetMD5Code(password))) {//密码错误情况；				map.put("status", -0x0011);				map.put("message", "用户登录密码错误");								return map;			} else{//存在用户，且用户名和密码都正确；								map.put("status", 1);				map.put("message", "登陆成功");				Map<String, Object> m1 = new HashMap<String, Object>();				m1.put("userId", user==null?"-1":user.getId().toString());				Seller seller = sellerService.getSellerByUsersId2(user.getId());                if(seller !=null){                	if(seller.getAdminUser()!=null){                		m1.put("adminuserId", seller.getAdminUser().getId()+"");                	}else{                		m1.put("adminuserId", "");                	}                    m1.put("sellerId", seller.getId()+"");                }else{                	m1.put("adminuserId", "");                    m1.put("sellerId", "");                }								map.put("data", m1);				System.out.println("这里开始---------------");				this.singleSignOn(user, channelId,tokenId);				System.out.println("这里结束---------------");				try{					this.registorUsersMonitor(user);				}catch(Exception e){					System.out.println("注册监控异常");					e.printStackTrace();					TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();				}				return map;			}		}			/**	 * 用户注册的业务逻辑；	 */	@Override	public Map<String, Object> register(String loginname,String username, String password, String captcha,String invitecode,String headImage,String basePath) {		//定义返回值；		Map<String, Object> map = new HashMap<String, Object>();				//检查验证码；		Map<String, Object> checkmap = captchaDao.checkCaptcha(username, captcha);		Integer status= Integer.parseInt(checkmap.get("status").toString());		if (status==-1||status==-2) {			return checkmap;		}		//查重；		List<Users> userByUsername = usersDao.getUserByUsername(username);		if (userByUsername != null && userByUsername.size() > 0) {			map.put("status", -0x0021);			map.put("message", "账号名已存在");			return map;		}				AdminUser au = null;			if(!StringUtils.isEmpty(invitecode)){				List<Users> idlist = usersDao.findUsersByInvitecode(invitecode);			if( idlist.size() > 0){				Users inviteUser = idlist.get(0);//增加判断是否为下级用户有				au=inviteUser.getAdminUser();			}else{				List<AdminUser> aulist = adminUserDao.getAdminUserByInvitecode(invitecode);				if(aulist!=null && aulist.size()>0){					au =aulist.get(0);				}else{					map.put("status", -0x0023);					map.put("message", "邀请码不存在");					return map;				}			}		}		//创建新用户；		Users user = createUsersByUsernameAndPassword(loginname,username, password, invitecode,au,headImage,basePath);		map.put("status", 0x01);		map.put("message", "注册成功");		Map<String, Object> m2 = new HashMap<String, Object>();		m2.put("userId", user.getId());		m2.put("sellerId", user.getSellerId()==null?"":user.getSellerId()+"");		m2.put("adminuserId", user.getAdminUser()==null?"":user.getAdminUser().getId()+"");		m2.put("loginname", "axp"+username.substring(username.length()-7));		m2.put("name", username);		m2.put("pwd", password);		map.put("data", m2);		return map;	}	/**	 * 获取用户基本信息；	 */	@Override	public Map<String, Object> getBaseInfo(Integer userId) {				return null;	}	/**	 * 第三方登录	 * 1，如果有用户就查找这个用户；	 * 2，如果没有用户就创造用户；	 * @param openId	 * @return	 */	@Override	public Users loginByThirdMethod(String openId,String unionId,String app) {		Users user = findUsersByOpenId(openId,null);//先查找用户；		if (user == null) {			user = findUsersByOpenId(null,unionId);//先查找用户；			if(user == null && "USERS".equals(app)){				user = createUserByOpenId(openId ,unionId);//如果没有，就创建用户；								if(unionId != null){					String param = "unionId="+unionId+"&linkType=1";					UrlUtil.sendGzhMsg(4, param);				}			}		}		return user;	}	/**	 * @param unionId	 * @return	 */	private Users findUsersByUnionId(String unionId) {				return null;	}	/**	 * 根据用户名和密码创建新用户；	 * @param username	 * @param password	 * @return	 */	public Users createUsersByUsernameAndPassword(String loginname,String username, String password, String invitecode) {		Users user = new Users();		user.setIsvalid(true);		user.setCreatetime(new Timestamp(System.currentTimeMillis()));		user.setName(username);		user.setLoginname("axp"+username.substring(username.length()-7));		user.setPwd(MD5Util.GetMD5Code(password));		user.setLevel(0);		user.setScore(0);//数据库要求score不能为null；		user.setInvitecode(invitecode);//数据库要求，邀请码不能为null；		save(user);		user.setMycode("2"+user.getId());		usersDao.update(user);		return user;	}		/**	 * 根据用户名和密码创建新用户；	 * @param username	 * @param password	 * @return	 */	public Users createUsersByUsernameAndPassword(String loginname,String username, String password, String invitecode,AdminUser au,String headImage,String basePath) {		Users user = new Users();		user.setIsvalid(true);		user.setCreatetime(new Timestamp(System.currentTimeMillis()));		user.setLoginname("axp"+username.substring(username.length()-7));		user.setName(username);		user.setPwd(MD5Util.GetMD5Code(password));		user.setAdminUser(au);		user.setLevel(0);		user.setScore(0);//数据库要求score不能为null；		user.setInvitecode(invitecode);//数据库要求，邀请码不能为null；		user.setHeadimage(headImage); //basePath+headImage 第三方登录 不许要前缀		user.setImgUrl(headImage);		save(user);		user.setMycode("6"+user.getId());		usersDao.update(user);		return user;	}		/**	 * 根据第三方登录传来的openID创建用户；	 * @param openId	 * @return	 */	public Users createUserByOpenId(String openId,String unionId) {		Users user = new Users();		user.setName("");		user.setPwd(MD5Util.GetMD5Code("888888"));		user.setLoginname("axp"+openId.substring(openId.length()-7));		user.setIsvalid(true);		user.setCreatetime(new Timestamp(System.currentTimeMillis()));		user.setScore(0);//数据库要求score不能为null；		user.setOpenId(openId);		user.setLevel(2);		userDao.save(user);		int id = user.getId();		user.setName(id+"");		user.setMycode("6"+id);		user.setUnionId(unionId);		userDao.saveOrUpdate(user);		return user;	}	/**	 * 根据第三方登录传来的openId，寻找用户；	 * @param openId	 * @return	 */	public Users findUsersByOpenId(String openId,String unionId) {		List<Users> list = null;		if(openId != null){			list = usersDao.findUsersByOpenId(openId,null);					}		if(unionId != null ){			list = usersDao.findUsersByOpenId(null,unionId);		}		if (list != null && list.size() > 0) {			return list.get(0);		}		return null;	}	//获取用户信息	@Override	public Map<String,Object> getUserMap(Integer userId,String basePath){		Map<String,Object> map = new HashMap<String, Object>();		QueryModel model = new QueryModel();		model.combPreEquals("id", userId);		Users user = (Users) dateBaseDAO.findOne(Users.class, model);		if (user == null) {//错误的参数；			try {				map.put("status", -0x0041);				map.put("message", "用户不存在");							} catch (Exception e) {				e.printStackTrace();				TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();			}			return map;		}								boolean isPaiedForStore = false;		String verifyStatus = "";//店铺审核状态		String openStoreMoney = "0";		String storeIntroduceImg = "http://jifen.aixiaoping.cn:8080/dailyRes/cashshop_type/1/nomal/1368410304093543200.png";		//----dab		String uri="http://jifen.aixiaoping.cn:8080/dailyAPI/invoke/users/hhrExplain";		Map<String,Object> map2 = new HashMap<String, Object>();		List<CashmoneyRecord> isOpenStore = null;		if(user.getIsSeller()==null || !user.getIsSeller()){			//找出充值记录			model.clearQuery();			model.combPreEquals("isvalid", true);			model.combPreEquals("usersByUserId.id", userId,"userId");			model.combPreEquals("type", 5);			isOpenStore = dateBaseDAO.findPageList(CashmoneyRecord.class, model, 0, 1);			if(isOpenStore != null && isOpenStore.size()>0){				isPaiedForStore  = true;				storeIntroduceImg = "http://jifen.aixiaoping.cn:8080/dailyRes/cashshop_type/1/nomal/1368411204105449100.png";				map2.put("tk_uri", uri+"?tyep=1");				map2.put("tk_show", "店主");				map2.put("ispartenr", 2);				map2.put("store", "店铺");			}else{				map2.put("tk_uri", uri+"?type=2");				map2.put("tk_show", "每天积分粉丝");				map2.put("ispartenr", 0);				map2.put("store", "开店");			}		}else{			isPaiedForStore = true;			storeIntroduceImg = "http://jifen.aixiaoping.cn:8080/dailyRes/cashshop_type/1/nomal/1368411204105449100.png";			map2.put("tk_uri", uri+"?tyep=1");			map2.put("tk_show", "店主");			map2.put("ispartenr", 2);			map2.put("store", "店铺");		}				if(user.getLevel() == 65){			map2.put("tk_uri", uri+"?type=3");			map2.put("tk_show", "合伙人");			map2.put("ispartenr", 1);			map2.put("store", "开店");		}				model.clearQuery();		model.combEquals("isvalid",1);		model.combPreEquals("users.id",userId,"user_id");		Seller seller = null;		List<Seller> sellerList = dateBaseDAO.findPageList(Seller.class, model, 0 , 1);		if(sellerList.size()>0){		    seller = sellerList.get(0);			verifyStatus = seller.getVerifyStatus()==null?"":seller.getVerifyStatus().toString();//店铺审核状态			openStoreMoney = "1";		}else{			model.clearQuery();			model.combPreEquals("user.id", userId, "userId");			model.combPreEquals("isValid", true);			List<SellerAccountNumber> acounts = dateBaseDAO.findPageList(SellerAccountNumber.class, model, 0, 1);			if(acounts.size()>0){				seller = acounts.get(0).getSeller();				if(seller!=null){					verifyStatus = seller.getVerifyStatus()==null?"":seller.getVerifyStatus().toString();				}else{					verifyStatus = String.valueOf(-1);//普通用户店铺审核状态				}			}else{				verifyStatus = String.valueOf(-1);//普通用户店铺审核状态			}		}		 if(seller !=null){			 if(seller.getAdminUser()!=null){				 map2.put("adminuserId", seller.getAdminUser().getId()+"");			 }else{				 map2.put("adminuserId", "");			 }			 map2.put("sellerId", seller.getId()+"");         }else{        	 map2.put("adminuserId", "");        	 map2.put("sellerId", "");         }		map2.put("userId",user.getId()+"");		map2.put("verifyStatus", verifyStatus+"");		map2.put("isPaiedForStore", isPaiedForStore); //是否交钱		map2.put("openStoreMoney", "1");//显示交多少钱的		map2.put("storeIntroduceImg",storeIntroduceImg);				//联盟商家的图片和连接		if(user.getLevel()==65){			map2.put("leagueImg",basePath + StringUtil.fenyong);			map2.put("leagueLink", "http://jifen.aixiaoping.cn:8080/dailyAPI/invoke/users/profit?id="+user.getId());		}else{			map2.put("leagueImg","");			map2.put("leagueLink", "");		}				map.put("data",map2 );				return map;										}			//获取用户信息		@Override		public Map<String,Object> getUserMap(String adminuserId,String sellerId,Integer userId,String basePath,Integer zoneid,String appVersion){			Map<String,Object> map = new HashMap<String, Object>();			QueryModel model = new QueryModel();			model.combPreEquals("id", userId);			Users user = (Users) dateBaseDAO.findOne(Users.class, model);			if (user == null) {//错误的参数；				try {					map.put("status", -0x0041);					map.put("message", "用户不存在");									} catch (Exception e) {					e.printStackTrace();					TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();				}				return map;			}												String show ="0";			StringBuffer sb = new StringBuffer();			sb.append("[{\"status\":0x01}");						String realname = StringUtils.isBlank(user.getRealname())?user.getName():user.getRealname();			if(!user.getId().toString().equals(user.getName())){				user.setPhone(user.getName());				usersDao.update(user);			}			String phone  = user.getPhone()==null?"":user.getPhone();			String address = user.getAddress()==null?"":user.getAddress();			String sex = user.getSex()==null?"":user.getSex().toString();			if(sex.equals("1")){				sex = "男";			}else if(sex.equals("2")){				sex = "女";			}else{				sex = "保密";			}			String imgUrl =StringUtil.getUserDefaultHead(user, basePath);						String invitecode = user.getMycode()==null?"2"+user.getId():user.getMycode();			String birthday = "";			String score = user.getScore().toString();			String cashpoint  = user.getCashPoints()==null?"0":user.getCashPoints()+"";						String quantity = "";			String sellerCashpoint = "";			String sellerScore = "";			String sellerName = "";			//String sellerId = "";			String verifyStatus = "";//店铺审核状态			boolean isPaiedForStore = false;			String openStoreMoney = "0";			String storeIntroduceImg = "http://jifen.aixiaoping.cn:8080/dailyRes/cashshop_type/1/nomal/738070628085722000.png";			//----dab			String uri="http://jifen.aixiaoping.cn:8080/dailyAPI/invoke/users/hhrExplain";			Map<String,Object> map2 = new HashMap<String, Object>();			List<CashmoneyRecord> isOpenStore = null;			if(user.getIsSeller()==null || !user.getIsSeller()){				//找出充值记录				model.clearQuery();				model.combPreEquals("isvalid", true);				model.combPreEquals("usersByUserId.id", userId,"userId");				model.combPreEquals("type", 5);				isOpenStore = dateBaseDAO.findPageList(CashmoneyRecord.class, model, 0, 1);				if(isOpenStore != null && isOpenStore.size()>0){					isPaiedForStore = true;					storeIntroduceImg = "http://jifen.aixiaoping.cn:8080/dailyRes/cashshop_type/1/nomal/3346371021072356400.png";					map2.put("tk_uri", uri+"?tyep=1");					map2.put("tk_show", "店主");					map2.put("ispartenr", 2);									}else{					map2.put("tk_uri", uri+"?type=2");					map2.put("tk_show", "每天积分粉丝");					map2.put("ispartenr", 0);				}			}else{				isPaiedForStore = true;				storeIntroduceImg = "http://jifen.aixiaoping.cn:8080/dailyRes/cashshop_type/1/nomal/3346371021072356400.png";				map2.put("tk_uri", uri+"?tyep=1");				map2.put("tk_show", "店主");				map2.put("ispartenr", 2);			}			/*if(isOpenStore != null && isOpenStore.size()>0){				isPaiedForStore = true;				storeIntroduceImg = "http://jifen.aixiaoping.cn:8080/dailyRes/cashshop_type/1/nomal/3346371021072356400.png";				map2.put("tk_uri", uri+"?tyep=1");				map2.put("tk_show", "店主");				map2.put("ispartenr", 2);			}else {				map2.put("tk_uri", uri+"?type=2");				map2.put("tk_show", "每天积分粉丝");				map2.put("ispartenr", 0);			}*/						if(user.getLevel() == 65){				map2.put("tk_uri", uri+"?type=3");				map2.put("tk_show", "合伙人");				map2.put("ispartenr", 1);							}						model.clearQuery();			model.combEquals("isvalid",1);			model.combPreEquals("users.id",userId,"user_id");			Seller seller = null;			List<Seller> sellerList = dateBaseDAO.findPageList(Seller.class, model, 0 , 1);			if(sellerList.size()>0){			    seller = sellerList.get(0);			    quantity = seller.getQuantity()==null?"":seller.getQuantity().toString();				sellerCashpoint = seller.getCashPoints()==null?"":seller.getCashPoints().toString();				sellerScore = seller.getScore()==null?"":seller.getScore().toString();				sellerName = seller.getName()==null?"":seller.getName();				sellerId = seller.getId()+"";				verifyStatus = seller.getVerifyStatus()==null?"":seller.getVerifyStatus().toString();//店铺审核状态								openStoreMoney = "1";			}else{				model.clearQuery();				model.combPreEquals("user.id", userId, "userId");				model.combPreEquals("isValid", true);				List<SellerAccountNumber> acounts = dateBaseDAO.findPageList(SellerAccountNumber.class, model, 0, 1);				if(acounts.size()>0){					seller = acounts.get(0).getSeller();					if(seller!=null){						quantity = seller.getQuantity() == null ? "" : seller.getQuantity().toString();						sellerCashpoint = seller.getCashPoints() == null ? "" : seller.getCashPoints().toString();						sellerScore = seller.getScore() == null ? "" : seller.getScore().toString();						sellerName = seller.getName() == null ? "" : seller.getName();						sellerId = seller.getId() + "";						verifyStatus = seller.getVerifyStatus()==null?"":seller.getVerifyStatus().toString();											}else{						verifyStatus = String.valueOf(-1);//普通用户店铺审核状态					}				}else{					verifyStatus = String.valueOf(-1);//普通用户店铺审核状态				}			}									Timestamp ts = user.getBirthday();			String sign = user.getSign()==null?"":user.getSign();			if(ts!=null){				java.text.SimpleDateFormat df = new java.text.SimpleDateFormat("yyyy-MM-dd");				birthday=df.format(ts);			}			//粉丝个数						model.clearQuery();			model.combPreEquals("isValid", true);			model.combPreEquals("invitecode", user.getMycode());			int recommend = dateBaseDAO.findCount(Users.class, model);						model.clearQuery();			model.combPreEquals("users.id", user.getId(),"userId");			model.combPreEquals("isValid", true);			model.combPreEquals("status", 0);			model.combCondition("endTime > '"+DateUtil.formatDate("yyyy-MM-dd HH:mm:ss",DateUtil.getNow())+"'");							int count = 0;			try {				count = dateBaseDAO.findCount(FreeVoucherRecord.class, model);			} catch (Exception e) {				e.printStackTrace();				TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();			}							//会员属性			String vipType = "0";			model.clearQuery();			model.combPreEquals("users.id",user.getId(), "userId");			model.combPreEquals("isActivate",true);			model.combPreEquals("isValid",true);			Members vip = (Members) dateBaseDAO.findOne(Members.class, model);			if(vip!=null){				vipType = vip.getMembersConfig().getId()+"";			}			//临时限制会员商城的显示			String isShow = "1";//			try{//				if(user.getAdminUser().getParentAdminUser().getIsOpenVipMall()!=null&&//						user.getAdminUser().getParentAdminUser().getIsOpenVipMall()){//					isShow = "1";//				}//			}catch(Exception e){//					e.printStackTrace();//			}							Double vipCentFinal = user.getMoney();			if(vipCentFinal==null){				vipCentFinal = 0.00;			}		    model.clearQuery();		    model.combCondition("type in (1,2)");		    model.combPreEquals("isValid", true);		    model.combPreEquals("users.id", user.getId(),"userId");		    model.combPreEquals("isEffect", false);		    double vipCentFrozen = dateBaseDAO.findSum(MembersBonusRecord.class, "value", model);		    vipCentFrozen = CalcUtil.add(vipCentFrozen, 0.00, 2);		   		    		    String isbinding = "0";		    String binding = "";		    if(!user.getId().toString().equals(user.getName())){		    	isbinding = "1";		    	binding = user.getName();		    }						map.put("status", 0x01+"");			map.put("message", "获取成功");						 if(seller !=null){				 if(seller.getAdminUser()!=null){					 map2.put("adminuserId", seller.getAdminUser().getId()+"");				 }else{					 map2.put("adminuserId", "");				 }				 				 map2.put("sellerId", seller.getId()+"");             }else{            	 map2.put("adminuserId", "");            	 map2.put("sellerId", "");             }						 String userName=user.getRealname()==null?user.getName():user.getRealname();			 TokenResult token = rongCloudService.getToken(userId.toString(), userName, StringUtil.userHead);			 if(token!=null){				 map2.put("token", token.getToken()); 			 }else{				 map2.put("token", ""); 			 }			  			map2.put("userId",user.getId()+"");			map2.put("name",user.getName());			map2.put("isShow",isShow+"" );			map2.put("username",realname);			map2.put("realname",realname );			map2.put("phone",phone );			map2.put("address",address );			map2.put("sex",sex );			map2.put("birthday",birthday );			map2.put("headimage",imgUrl);			map2.put("invitecode",invitecode );			map2.put("sign",sign );			map2.put("isbinding",isbinding+"" );			map2.put("binding",binding+"" );			map2.put("recommend",recommend +"");			map2.put("cashpoint",cashpoint+"" );			map2.put("score",score+"" );			map2.put("quantity",quantity+"" );			map2.put("sellerCashpoint",sellerCashpoint+"" );			map2.put("sellerScore",sellerScore+"" );			map2.put("sellerName",sellerName );			map2.put("vipType",vipType+"" );			map2.put("freeCount",count +"");			map2.put("unavailablemoney",vipCentFrozen+"" );			map2.put("availablemoney",user.getMoney()==null?"0.00":user.getMoney() +"");			//map2.put("sellerId", sellerId+"");			map2.put("fansNumber", recommend);			map2.put("tdCode", "http://39.104.160.116:8080/jupinhuiAPI/invoke/download");//二维码链接			map2.put("showChange", show);//显示换货会 1为显示，0为不显示			map2.put("verifyStatus", verifyStatus+"");										map2.put("isPaiedForStore", isPaiedForStore);//			map2.put("openStoreMoney", "1");			map2.put("storeIntroduceImg",storeIntroduceImg);						//联盟商家的图片和连接			if(user.getLevel()==65){				map2.put("leagueImg",basePath + StringUtil.fenyong);				map2.put("leagueLink", "http://jifen.aixiaoping.cn:8080/dailyAPI/invoke/users/profit?id="+user.getId());			}else{				map2.put("leagueImg","");				map2.put("leagueLink", "");			}						QueryModel queryModel=new QueryModel();			queryModel.combEquals("isValid", 1);			queryModel.combEquals("status", 0);			queryModel.combPreEquals("acceptUsers.id", user.getId(), "accept_id");			List<ChangeOrder> colist = dateBaseDAO.findLists(ChangeOrder.class, queryModel);			if (colist.size()>0) {				map2.put("isHasChangeInvite", true);//是否有换货邀约  true 有 false 无			}else{				map2.put("isHasChangeInvite", false);			}			//==============================ZL================================//			String version="";			char[] charArray = appVersion.toCharArray();			for (int i = 0; i < charArray.length; i++) {				if(".".equals(String.valueOf(charArray[i]))){					continue;				}				   version+=charArray[i];			}								if(user.getInvitecode()==null||StringUtils.isBlank(user.getInvitecode())){				map2.put("bindingInviter", false);//绑定推荐人			}else if("1".equals(user.getInvitecode().substring(0, 1))){				model.clearQuery();				model.combPreEquals("invitecode", StringUtils.isBlank(user.getInvitecode())?"0":user.getInvitecode());				model.combPreEquals("isvalid", true);				List<AdminUser> adUsers = dateBaseDAO.findPageList(AdminUser.class, model, 0 , 1);				AdminUser adUser = null;				if(adUsers.size()>0){					adUser = adUsers.get(0);										map2.put("bindingInviter", true);//绑定推荐人					if(adUser.getSellerId()!=null){						Seller sell = sellerDAO.findById(adUser.getSellerId());											map2.put("inviterImg",basePath+sell.getLogo());//邀请人头像							map2.put("inviterName",sell.getName());//邀请人昵称					}									}else{					map2.put("bindingInviter", false);//绑定推荐人				}			}else if("6".equals(user.getInvitecode().substring(0, 1)) || "000".equals(user.getInvitecode().substring(0, 3))){				model.clearQuery();				model.combPreEquals("mycode", StringUtils.isBlank(user.getInvitecode())?"0":user.getInvitecode());				model.combPreEquals("isvalid", true);				List<Users> pUsers = dateBaseDAO.findPageList(Users.class, model, 0 , 1);				Users pUser = null;				if(pUsers.size()>0){					pUser = pUsers.get(0);					if(StringUtils.isBlank(pUser.getHeadimage())){						map2.put("inviterImg",basePath+pUser.getImgUrl() );//邀请人头像					}else{						map2.put("inviterImg",pUser.getHeadimage() );//邀请人头像					}															StringBuilder sbu=new StringBuilder();					if(pUser.getRealname()!=null){						sbu.append(pUser.getRealname().replace("\r\n",""));					}										sbu.append("(");					sbu.append(pUser.getMycode());					sbu.append(")");					map2.put("inviterName",sbu.toString());//邀请人昵称					map2.put("bindingInviter", true);//绑定推荐人				}else{					map2.put("bindingInviter", false);//绑定推荐人				}			}					map.put("data",map2 );						return map;		}						/**\		 * 查询订单四种状态 1 待付款 2 待支付 3 待评价 4 退单售后		 * @param request		 * @param response		 * @return		 */		@Override		public Map<String, Object> getOrderStatusNum(HttpServletRequest request, HttpServletResponse response){			String xcx = request.getParameter("xcx");			String userId = "";						if(xcx != null){				userId = request.getParameter("userId");							}else{								Parameter parameter = ParameterUtil.getParameter(request);				if (parameter == null) {//错误的参数；					return  JsonResponseUtil.getJson(-0x02,"参数data不是合法的json字符串");				}				String v = parameter.getAppVersion();				userId = parameter.getUserId();				 String version = "";		            char[] charArray = v.toCharArray();		        	for (int i = 0; i < charArray.length; i++) {						if(".".equals(String.valueOf(charArray[i]))){							continue;						}						   version+=charArray[i];					}								 			}			Map<String, Object> map=new HashMap<>();			Map<String, Object> map2=new HashMap<>();			map.put("status", 1);			map.put("message","请求成功" );				try {				 if(StringUtils.isNotBlank(userId) && !"-1".equals(userId)){					 Users users = usersDao.findById(Integer.parseInt(userId));					 Object[] orderNum = reGoodsorderDao.getOrderStatusNumByUserIdNew(users);					 map2.put("payment", orderNum[0]); //待付款					 map2.put("share", orderNum[1]); //分享					 map2.put("sendOutGoods", orderNum[2]); //待发货					 map2.put("receive", orderNum[3]); //待收货					 map2.put("chargeback", orderNum[4]); //退单售后					 map2.put("evaluate", orderNum[5]);//待评价订单数量				 }				 else{					 map2.put("payment", "0"); //待付款					 map2.put("share", "0"); //分享					 map2.put("sendOutGoods","0"); //待发货					 map2.put("receive", "0"); //待收货					 map2.put("chargeback", ""); //退单售后				 }										 				} catch (Exception e) {					map.put("status", -1);					map.put("message","数据异常" );					e.printStackTrace();				}							map.put("data",map2 );				return map;		}						public String getTkuri(Integer uid){			QueryModel model = new QueryModel();			model.clearQuery();			model.combPreEquals("users.id", uid,"usersId");			model.combPreEquals("isvalid", true);			List<PartnerAdminuserPidDistribute> papdlist = dateBaseDAO.findPageList(PartnerAdminuserPidDistribute.class, model, 0 , 1);			String  uri="";			if(papdlist!=null && papdlist.size()>0){				PartnerAdminuserPidDistribute papd  = papdlist.get(0);				uri ="http://www.518wtk.com/datainfo.php?username="+papd.getCityAdminuserPidDistribute().getAdminuserTaokePid().getTkLoginLoginname()+"&password="+papd.getCityAdminuserPidDistribute().getAdminuserTaokePid().getTkLoginPassword();			}												return uri;		}				/**	 * 修改密码	 */	@Override	public Map<String,Object> changePassword(Integer userId, String oldpwd, String newpwd){		Map<String,Object> map = new HashMap<String, Object>();		map.put("status", 0x01);		map.put("message", "修改成功");				Users user = usersDao.findById(userId);		if(user==null){			map.put("status", -0x0041);			map.put("message", "用户不存在");			return map;		}		if(!MD5Util.GetMD5Code(oldpwd).equals(user.getPwd())){			map.put("status", -0x0061);			map.put("message", "旧密码不正确");			return map;		}		if(oldpwd.equals(newpwd)){			map.put("status", -0x0062);			map.put("message", "新旧密码相同");			return map;		}				user.setPwd(MD5Util.GetMD5Code(newpwd));		usersDao.update(user);		return map;	}			/**	 * 忘记密码Seller版	 */	@Override	public Map<String, Object> forgetPasswordFromSeller(String confirmpwd,			String newpwd, String phone, String captcha) {		Map<String,Object> map = new HashMap<String, Object>();		try{			map.put("status", 0x01);			map.put("message", "修改成功");			List<AdminUser> adminUser = adminUserDao.queryListByParameterByIsvalid("phone", phone);			if(adminUser.size()==0){				map.put("status", -0x0041);				map.put("message", "用户不存在");				return map;			}			AdminUser user = adminUser.get(0);			//			//检查验证码；//			Map<String, Object> checkmap = captchaDao.checkCaptcha(phone, captcha);//			Integer status= Integer.parseInt(checkmap.get("status").toString());//			if (status==-1||status==-2) {//				return checkmap;//			}						if(!confirmpwd.equals(newpwd)){				map.put("status", -0x01);				map.put("message", "两次密码不一致");				return map;			}						user.setPassword(MD5Util.GetMD5Code(newpwd));			adminUserDao.saveOrUpdate(user);			}catch(Exception e){								e.printStackTrace();				TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();			}			return map;	}		/**	 * 忘记密码User版	 */	@Override	public Map<String,Object> forgetPassword(String confirmpwd, String newpwd, String phone, String captcha){		Map<String,Object> map = new HashMap<String, Object>();				try{		map.put("status", 0x01);		map.put("message", "修改成功");				List<Users> users = usersDao.getUserByUsername(phone);		if(users.size()==0){			map.put("status", -0x0041);			map.put("message", "用户不存在");			return map;		}		Users user = users.get(0);		//		//检查验证码；//		Map<String, Object> checkmap = captchaDao.checkCaptcha(phone, captcha);//		Integer status= Integer.parseInt(checkmap.get("status").toString());//		if (status==-1||status==-2) {//			return checkmap;//		}//				if(!confirmpwd.equals(newpwd)){			map.put("status", -0x01);			map.put("message", "两次密码不一致");			return map;		}				user.setPwd(MD5Util.GetMD5Code(newpwd));		usersDao.update(user);		}catch(Exception e){						e.printStackTrace();			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();		}		return map;	}		/**	 * 单点登录	 */	@Override	public void singleSignOn(Users user, String channelId,String tokenId) {		try {			//Users user = usersDao.findById(userId);						if (StringUtil.hasLength(channelId)&&!channelId.equals(user.getUserid())) {				if (StringUtils.isNotBlank(user.getUserid())) {					appInformation.pushLoginMessageSingle("" + user.getId() + "",							channelId,user.getUserid());				}				//usersDao.findUsersByChannleId(channelId);				user.setUserid(channelId);				user.setDevicetoken(tokenId);							}					usersDao.saveOrUpdate(user);		} catch (Exception e) {			e.printStackTrace();			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();		}	}		/**	 * 商家版单点登录	 */	public void sellerSingleSignOn(AdminUser au, String channelId,String tokenId) {		try {			if (StringUtil.hasLength(channelId)&&!channelId.equals(au.getChannelid())) {				if (StringUtils.isNotBlank(au.getChannelid())) {					appInformation.pushLoginSellerMessageSingle("" + au.getId() + "",							channelId,au.getChannelid());				}				au.setChannelid(channelId);				au.setDevicetoken(tokenId);			}			adminUserDao.saveOrUpdate(au);		} catch (Exception e) {			e.printStackTrace();			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();		}	}		/**	 * 添加收货地址	 * @throws UnsupportedEncodingException 	 */	public Map<String,Object> putAddress(HttpServletRequest request, HttpServletResponse response){		String xcx = request.getParameter("xcx");		String userId = null;		String name = null;		String phone =null;		String province = null;		String city = null;		String district = null;		String detailedAddress = null; 		String defaultAddress = null;		if(xcx != null){			userId = request.getParameter("userId");			name = request.getParameter("name");			phone = request.getParameter("phone");			province = request.getParameter("province");			city = request.getParameter("city");			district = request.getParameter("district");			detailedAddress = request.getParameter("detailedAddress");			defaultAddress = request.getParameter("defaultAddress");		}else{			Parameter parameter = ParameterUtil.getParameter(request);			if (parameter == null) {//错误的参数；				return  JsonResponseUtil.getJson(-0x02,"参数data不是合法的json字符串");			}			userId = parameter.getUserId()==null?"":parameter.getUserId();			name = (String) (parameter.getData().get("name")==null?"":parameter.getData().get("name"));			phone = (String) (parameter.getData().get("phone")==null?"":parameter.getData().get("phone"));			province = (String) (parameter.getData().get("province")==null?"":parameter.getData().get("province"));			city = (String) (parameter.getData().get("city")==null?"":parameter.getData().get("city"));			district = (String) (parameter.getData().get("district")==null?"":parameter.getData().get("district"));			detailedAddress = (String) (parameter.getData().get("detailedAddress")==null?"":parameter.getData().get("detailedAddress"));			defaultAddress = (String) (parameter.getData().get("defaultAddress")==null?"":parameter.getData().get("defaultAddress"));					}		Users user = usersDao.findById(Integer.parseInt(userId));				ReUserAddressConfig ruac = new ReUserAddressConfig();		ruac.setIsValid(true);		//ruac.setIsDefaul(false);		ruac.setUser(user);		ruac.setName(name);		ruac.setPhone(phone);		ruac.setProvince(province);		ruac.setCity(city);		ruac.setDistrict(district);		ruac.setDetailedAddress(detailedAddress);		ruac.setCreateTime(new Timestamp(System.currentTimeMillis()));		ruac.setIsDefaul(Boolean.valueOf(defaultAddress));		QueryModel queryModel = new QueryModel();		queryModel.clearQuery();		queryModel.combPreEquals("isValid", true);		queryModel.combPreEquals("user.id", Integer.parseInt(userId),"userId");		int count = dateBaseDAO.findCount(ReUserAddressConfig.class ,queryModel);		if(count<1){			ruac.setIsDefaul(true);		}else if(count>=1){			if(Boolean.valueOf(defaultAddress)){				queryModel.clearQuery();				queryModel.combPreEquals("isValid", true);				queryModel.combPreEquals("isDefaul", true);				ReUserAddressConfig ruacbefore =  (ReUserAddressConfig) dateBaseDAO.findOne(ReUserAddressConfig.class, queryModel);				ruacbefore.setIsDefaul(false);				userAddressConfigDao.update(ruacbefore);			}		}		userAddressConfigDao.save(ruac);		return  JsonResponseUtil.getJson(0x01,"添加成功");	}	@Override	public Map<String, Object> getAddressList(HttpServletRequest request,			HttpServletResponse response) {			String xcx = request.getParameter("xcx");			String userId = null;			Integer pageIndex = 1;									if(xcx != null){				userId = request.getParameter("userId");				if(StringUtil.isEmpty(userId) || userId == "undefined"){					userId = "-1";					return JsonResponseUtil.getJson(-0x02,"请先登录注册");				}				pageIndex = Integer.valueOf(request.getParameter("pageIndex"));			}else{				Parameter parameter = ParameterUtil.getParameter(request);				if (parameter == null) {//错误的参数；					return JsonResponseUtil.getJson(-0x02,"参数data不是合法的json字符串");				}				userId = parameter.getUserId()==null?"":parameter.getUserId();			    pageIndex = parameter.getData().get("pageIndex")==null?1:parameter.getData().getInteger("pageIndex");							}			QueryModel queryModel = new QueryModel();			queryModel.combPreEquals("user.id", Integer.parseInt(userId),"userId");			queryModel.combPreEquals("isValid",true );			StringBuffer orderby = new StringBuffer();			orderby.append(" isDefaul desc ");				queryModel.setOrder(orderby.toString());			int count = dateBaseDAO.findCount(ReUserAddressConfig.class, queryModel);			List<ReUserAddressConfig> ruacList = dateBaseDAO.findPageList(ReUserAddressConfig.class, queryModel,(pageIndex-1)*8, 8);						Map<String,Object> dataMap = new HashMap<>();			List<Map<String,Object>> dataList = new ArrayList<>();			Map<String,Object> map = null;			for(ReUserAddressConfig r : ruacList){				map = new HashMap<>();				map.put("addressId",r.getId() );				map.put("name",r.getName() );				map.put("phone", r.getPhone());				map.put("province", r.getProvince());				map.put("city",r.getCity() );				map.put("district",r.getDistrict() );				map.put("detailedAddress", r.getDetailedAddress());				map.put("address",r.getProvince()+r.getCity()+r.getDistrict()+r.getDetailedAddress());				map.put("defaultAddress",r.getIsDefaul() );				dataList.add(map);			}			dataMap.put("pageSize", count%8==0?count/8:(count/8+1));			dataMap.put("pageIndex", pageIndex);			dataMap.put("pageItemCount", 8);			dataMap.put("dataList", dataList); 			Map<String,Object> bigDataMap = new HashMap<>();			bigDataMap.put("data", dataMap);			bigDataMap.put("status", 0x01);			bigDataMap.put("message", "请求成功");			return bigDataMap;	}	@Override	public Map<String, Object> getDefaultAddress(HttpServletRequest request,			HttpServletResponse response) {			String xcx = request.getParameter("xcx");			String userId = null;			if(xcx != null){				userId = request.getParameter("userId");			}else{				Parameter parameter = ParameterUtil.getParameter(request);				if (parameter == null) {//错误的参数；						return JsonResponseUtil.getJson(-0x02,"参数data不是合法的json字符串");				}				userId = parameter.getUserId()==null?"":parameter.getUserId();							}			if (StringUtils.isBlank(userId)) {//错误的参数；					return JsonResponseUtil.getJson(-0x02,"找不到当前用户");			}			QueryModel queryModel = new QueryModel();			queryModel.clearQuery();			queryModel.combPreEquals("user.id", Integer.parseInt(userId),"userId");			queryModel.combPreEquals("isValid",true );			queryModel.combPreEquals("isDefaul", true);			queryModel.setOrder(" createTime desc");			List<ReUserAddressConfig> racfList = (List<ReUserAddressConfig>) dateBaseDAO.findList(ReUserAddressConfig.class, queryModel);			ReUserAddressConfig racf =null;  						if(racfList.size()>0){				racf=racfList.get(0);			}						if(racf == null){				queryModel.clearQuery();				queryModel.combPreEquals("user.id", Integer.parseInt(userId),"userId");				queryModel.combPreEquals("isValid",true );				int count = dateBaseDAO.findCount(ReUserAddressConfig.class, queryModel);				if(count<1){							return JsonResponseUtil.getJson(-0x02,"没有默认地址");				}				racf = (ReUserAddressConfig) dateBaseDAO.findPageList(ReUserAddressConfig.class, queryModel,0, 1).get(0);				racf.setIsDefaul(true);				userAddressConfigDao.update(racf);			}			Map<String,Object> dataMap = new HashMap<>();			Map<String,Object> map = new HashMap<>();			map.put("addressId",racf.getId() );			map.put("name",racf.getName() );			map.put("phone", racf.getPhone());			map.put("province", racf.getProvince());			map.put("city",racf.getCity() );			map.put("district",racf.getDistrict() );			map.put("detailedAddress", racf.getDetailedAddress());			map.put("address",racf.getProvince()+racf.getCity()+racf.getDistrict()+racf.getDetailedAddress());			map.put("defaultAddress",racf.getDetailedAddress() );			dataMap.put("data", map);			dataMap.put("status", 0x01);			dataMap.put("message", "请求成功");			return dataMap;	}	@Override	public Map<String, Object> setDefaultAddress(HttpServletRequest request,			HttpServletResponse response) {			String xcx = request.getParameter("xcx");			String userId = null;			String  addressId = null;			if(xcx != null){				userId = request.getParameter("userId");				addressId = request.getParameter("addressId");			}else{				Parameter parameter = ParameterUtil.getParameter(request);				if (parameter == null) {//错误的参数；					return JsonResponseUtil.getJson(-0x02,"参数data不是合法的json字符串");				}				userId = parameter.getUserId()==null?"":parameter.getUserId();				addressId = (String) (parameter.getData().get("addressId")==null?"":parameter.getData().get("addressId"));							}			QueryModel queryModel = new QueryModel();			queryModel.clearQuery();			queryModel.combPreEquals("user.id", Integer.parseInt(userId),"userId");			queryModel.combPreEquals("isValid",true );			queryModel.combPreEquals("isDefaul", true);			ReUserAddressConfig racfBefore = (ReUserAddressConfig) dateBaseDAO.findOne(ReUserAddressConfig.class, queryModel);						if(racfBefore != null){				racfBefore.setIsDefaul(false);				userAddressConfigDao.update(racfBefore);			}			queryModel.clearQuery();			queryModel.combPreEquals("id",Integer.parseInt(addressId));			ReUserAddressConfig racfAfter = (ReUserAddressConfig) dateBaseDAO.findOne(ReUserAddressConfig.class, queryModel);			if(racfAfter != null){				racfAfter.setIsDefaul(true);				userAddressConfigDao.update(racfAfter);				return JsonResponseUtil.getJson(0x01,"修改成功");			}					return null;	}	@Override	public Map<String, Object> updateAddress(HttpServletRequest request,			HttpServletResponse response) {			String xcx = request.getParameter("xcx");			String userId = null;			String addressId = null;			String name = null;			String phone = null;			String province = "";			String city = "";			String district = "";			String detailedAddress = ""; 			String defaultAddress = "";			if(xcx != null){				userId = request.getParameter("userId");				addressId = request.getParameter("addressId");				name = request.getParameter("name");				phone = request.getParameter("phone");				String provinces = request.getParameter("province");								String [] p = provinces.split(",");				for(int i=0;i<p.length;i++){					if(i==0){						province = p[0];					}					if(i==1){						city = p[1];					}					if(i==2){						district = p[2];					}				}				detailedAddress = request.getParameter("detailedAddress");				defaultAddress = request.getParameter("defaultAddress");			}else{				Parameter parameter = ParameterUtil.getParameter(request);				if (parameter == null) {//错误的参数；					return JsonResponseUtil.getJson(-0x02,"参数data不是合法的json字符串");				}								userId = parameter.getUserId()==null?"":parameter.getUserId();				addressId = (parameter.getData().get("addressId")==null?"":parameter.getData().get("addressId")).toString();				name = (String) (parameter.getData().get("name")==null?"":parameter.getData().get("name"));				phone = (String) (parameter.getData().get("phone")==null?"":parameter.getData().get("phone"));				province = (String) (parameter.getData().get("province")==null?"":parameter.getData().get("province"));				city = (String) (parameter.getData().get("city")==null?"":parameter.getData().get("city"));				district = (String) (parameter.getData().get("district")==null?"":parameter.getData().get("district"));				detailedAddress = (String) (parameter.getData().get("detailedAddress")==null?"":parameter.getData().get("detailedAddress"));				defaultAddress = (parameter.getData().get("defaultAddress")==null?"":parameter.getData().get("defaultAddress")).toString();							}						QueryModel queryModel = new QueryModel();			queryModel.clearQuery();			queryModel.combPreEquals("id", Integer.parseInt(addressId));			ReUserAddressConfig ruac = (ReUserAddressConfig) dateBaseDAO.findOne(ReUserAddressConfig.class, queryModel);						ruac.setName(name);			ruac.setPhone(phone);			ruac.setProvince(province);			ruac.setCity(city);			ruac.setDistrict(district);			ruac.setDetailedAddress(detailedAddress);			ruac.setCreateTime(new Timestamp(System.currentTimeMillis()));			ruac.setIsDefaul(Boolean.valueOf(defaultAddress));						queryModel.clearQuery();			queryModel.combPreEquals("isValid", true);			queryModel.combPreEquals("user.id", Integer.parseInt(userId),"userId");									int count = dateBaseDAO.findCount(ReUserAddressConfig.class ,queryModel);			if(count==1){				ruac.setIsDefaul(true);			}else if(count>1){				if(Boolean.valueOf(defaultAddress)){					queryModel.clearQuery();					queryModel.combPreEquals("isValid", true);					queryModel.combPreEquals("isDefaul", true);					queryModel.combPreEquals("user.id", Integer.parseInt(userId),"userId");					queryModel.combCondition(" id != "+ruac.getId());					ReUserAddressConfig ruacbefore =  (ReUserAddressConfig) dateBaseDAO.findOne(ReUserAddressConfig.class, queryModel);					if(ruacbefore!=null){					ruacbefore.setIsDefaul(false);					userAddressConfigDao.update(ruacbefore);					}				}			}			userAddressConfigDao.update(ruac);			return JsonResponseUtil.getJson(0x01,"修改成功");	}	@Override	public Map<String, Object> deleteAddress(HttpServletRequest request,			HttpServletResponse response) {			String xcx = request.getParameter("xcx");			String userId = "";			String addressId = "";			if(xcx != null){				userId = request.getParameter("userId");				addressId = request.getParameter("addressId");			}else{				Parameter parameter = ParameterUtil.getParameter(request);				if (parameter == null) {//错误的参数；					return JsonResponseUtil.getJson(-0x02,"参数data不是合法的json字符串");				}				userId = parameter.getUserId()==null?"":parameter.getUserId();				addressId = (String) (parameter.getData().get("addressId")==null?"":parameter.getData().get("addressId"));						}								QueryModel queryModel = new QueryModel();			queryModel.clearQuery();			queryModel.combPreEquals("id", Integer.parseInt(addressId));			ReUserAddressConfig ruac = (ReUserAddressConfig) dateBaseDAO.findOne(ReUserAddressConfig.class, queryModel);					ruac.setIsValid(false);			userAddressConfigDao.update(ruac);						queryModel.clearQuery();			queryModel.combPreEquals("isValid", true);			queryModel.combPreEquals("user.id", Integer.parseInt(userId),"userId");			int count = dateBaseDAO.findCount(ReUserAddressConfig.class ,queryModel);					if(count>0){				if(ruac.getIsDefaul()){					queryModel.clearQuery();					queryModel.combPreEquals("isValid", true);					queryModel.combPreEquals("user.id", Integer.parseInt(userId),"userId");					ReUserAddressConfig ruacbefore =  (ReUserAddressConfig) dateBaseDAO.findPageList(ReUserAddressConfig.class, queryModel,0, 1).get(0);					if(ruacbefore!=null){					ruacbefore.setIsDefaul(true);					userAddressConfigDao.update(ruacbefore);					}				}			}			return JsonResponseUtil.getJson(0x01,"删除成功");	}	@Override	public Map<String, Object> getFansList(HttpServletRequest request,			HttpServletResponse response) {		Parameter parameter = ParameterUtil.getParameter(request);		if (parameter == null) {//错误的参数；			return JsonResponseUtil.getJson(-0x02,"参数data不是合法的json字符串");		}		String basePath = request.getServletContext().getAttribute("RESOURCE_LOCAL_URL").toString();		Integer userId =Integer.parseInt(parameter.getUserId());		Integer pageIndex = Integer.parseInt(parameter.getData().getString("pageIndex"));		Users currentUser = usersDao.findById(userId);		QueryModel queryModel = new QueryModel();		queryModel.clearQuery();		queryModel.combPreEquals("invitecode", currentUser.getMycode());		queryModel.combPreEquals("isValid", true);		Integer count =  dateBaseDAO.findCount(Users.class, queryModel);		List<Users> usersList = dateBaseDAO.findPageList(Users.class, queryModel, (pageIndex-1)*16, 16);		List<Map<String,Object>> fansList = new ArrayList<>();		Map<String,Object> fansMap = null;		for(Users fan : usersList){			fansMap = new HashMap<>();			fansMap.put("name", StringUtils.isBlank(fan.getRealname())?fan.getName():fan.getRealname());//			if(user.getSex().equals((Integer)1)||user.getSex().equals((Integer)2)){//				fansMap.put("sex", user.getSex()==1?"女":"男");//			}			if(fan.getSex()!=null&&fan.getSex().intValue()<3){				fansMap.put("sex", fan.getSex().intValue()==1?"女":"男");			}else{				fansMap.put("sex", "保密");			}			fansMap.put("date",DateUtil.formatDate("yyyy-MM-dd HH:mm:ss",fan.getCreatetime()) );			if(fan.getImgUrl()!=null){				if(StringUtils.isNotBlank(fan.getImgUrl()))				fansMap.put("headImage", basePath+fan.getImgUrl());			}else{				fansMap.put("headImage", fan.getHeadimage());			}			fansList.add(fansMap);		}		Map<String,Object> dataMap = new HashMap<>();		dataMap.put("dataList", fansList);		dataMap.put("pageSize", count%16==0?count/16:(count/16+1));		dataMap.put("pageIndex", pageIndex);		dataMap.put("pageItemCount", 16);		Map<String,Object> bigDataMap = new HashMap<>();		bigDataMap.put("data",dataMap);		bigDataMap.put("status", 0x01);		bigDataMap.put("message", "请求成功");		return bigDataMap;	}		@Override	public Map<String, Object> bangdingContacts(HttpServletRequest request,			HttpServletResponse response) {		String xcx = request.getParameter("xcx");		Integer userId = 0;		String invitecode = "";				if(xcx != null){			userId = Integer.valueOf(request.getParameter("userId"));			invitecode = request.getParameter("invitecode");					}else{						Parameter parameter = ParameterUtil.getParameter(request);			if (parameter == null) {//错误的参数；				return JsonResponseUtil.getJson(-0x02,"参数data不是合法的json字符串");			}			userId =Integer.parseInt(parameter.getUserId());			invitecode = parameter.getData().getString("invitecode");		}		QueryModel model = new QueryModel();		String invitecode2 = "";		model.combPreEquals("isvalid", true);		Integer findIdByInvitecode = 0;		Users  users= usersDao.findById(userId);		Map<String,Object> dataMap = new HashMap<String,Object>();		String name = "";		//商家邀请码		if("1".equals(invitecode.substring(0, 1))){			model.combPreEquals("invitecode", invitecode);			findIdByInvitecode = dateBaseDAO.findCount(AdminUser.class, model);			AdminUser adminUser = (AdminUser) dateBaseDAO.findPageList(AdminUser.class, model, 0, 1).get(0);			users.setAdminUser(adminUser);			name = adminUser.getUsername();		}		//粉丝邀请码		if("6".equals(invitecode.substring(0, 1))||"000".equals(invitecode.substring(0,3))){			List<Users> idlist = usersDao.findUsersByInvitecode(invitecode); //找到mycodeUsers			if(idlist.size()>0){				//当前邀请码的拥有者				Users u = idlist.get(0);				invitecode2=u.getInvitecode();				findIdByInvitecode = u.getId();				AdminUser au = u.getAdminUser();								if(au==null){					name = u.getRealname()==null?MD5Util.hidePhone(u):u.getRealname();				}else{					users.setAdminUser(au);				}			}		}				if(findIdByInvitecode==0){			return JsonResponseUtil.getJson(-0x0042, "该邀请码不属于每天积分粉丝");		}				if(users.getInvitecode()!=null&&StringUtils.isNotBlank(users.getInvitecode())){			return JsonResponseUtil.getJson(-0x0043, "该粉丝已有邀请码");		}		if(users.getMycode().equals(invitecode)){			return JsonResponseUtil.getJson(-0x0044, "粉丝不能邀请自己");		}		if(users.getMycode().equals(invitecode2)){			return JsonResponseUtil.getJson(-0x0044, "粉丝不能邀请自己");		}		users.setInvitecode(invitecode);		if(users.getUnionId() != null){						String unionId = users.getUnionId();			String param = "unionId="+unionId+"&linkType=4";			UrlUtil.sendGzhMsg(1, param);					}				Map<String,Object> bigDataMap = new HashMap<>();		bigDataMap.put("name", name);		bigDataMap.put("status", 0x01);		bigDataMap.put("message", "请求成功");		return bigDataMap;	}	@Override	public Map<String, Object> getExemptList(HttpServletRequest request,			HttpServletResponse response) {		Parameter parameter = ParameterUtil.getParameter(request);		if (parameter == null) {//错误的参数；			return JsonResponseUtil.getJson(-0x02,"参数data不是合法的json字符串");		}		Integer userId =Integer.parseInt(parameter.getUserId());		Integer pageIndex = Integer.parseInt(parameter.getData().getString("pageIndex"));		QueryModel queryModel = new QueryModel();		queryModel.combPreEquals("isValid", true);		queryModel.combPreEquals("users.id", userId,"userId");		queryModel.setOrder("endTime asc");		queryModel.setOrder("status asc");		Integer count = dateBaseDAO.findCount(FreeVoucherRecord.class, queryModel);		List<FreeVoucherRecord>  fvrList = dateBaseDAO.findPageList(FreeVoucherRecord.class, queryModel,(pageIndex-1)*16, 16);		List<Map<String,Object>> dataList = new ArrayList<>();		Map<String,Object> fvrMap = null;		Long nowTime = System.currentTimeMillis();//当前时间毫秒值		for(FreeVoucherRecord fvr :fvrList){			//免单券类型			fvrMap = new HashMap<>();			fvrMap.put("name", fvr.getFreeVoucher().getName());			//免单券状态  	1：可使用 2：已使用 3：已过期					if(fvr.getStatus()==0){				Long endTime = fvr.getEndTime().getTime();				if(nowTime<endTime){					fvrMap.put("type", "1");				}else{					fvrMap.put("type", "3");				}			}else{				fvrMap.put("type", "2");			}			fvrMap.put("date", DateUtil.formatDate("yyyy-MM-dd HH:mm:ss",fvr.getEndTime()));			dataList.add(fvrMap);		}		Map<String,Object> dataMap = new HashMap<>();		dataMap.put("dataList", dataList);		dataMap.put("pageSize", count%16==0?count/16:(count/16+1));		dataMap.put("pageIndex", pageIndex);		dataMap.put("pageItemCount", 16);		Map<String,Object> bigDataMap = new HashMap<>();		bigDataMap.put("data",dataMap);		bigDataMap.put("status", 0x01);		bigDataMap.put("message", "请求成功");		return bigDataMap;	}	@Override	public Map<String, Object> feedback(HttpServletRequest request,			HttpServletResponse response) {		Parameter parameter = ParameterUtil.getParameter(request);		if (parameter == null) {//错误的参数；			return JsonResponseUtil.getJson(-0x02,"参数data不是合法的json字符串");		}		String userId = parameter.getUserId()==""?"-1":parameter.getUserId();		String content = parameter.getData().getString("content");		String images = parameter.getData().getString("Images");		String connectPhone=parameter.getData().getString("connectPhone");		String fbType = parameter.getData().getString("fbType");		String v = parameter.getAppVersion();		String app = parameter.getApp();				 String version = "";         char[] charArray = v.toCharArray();     	for (int i = 0; i < charArray.length; i++) {				if(".".equals(String.valueOf(charArray[i]))){					continue;				}				   version+=charArray[i];			}						if(!"SELLER".equals(app)){			if(StringUtils.isEmpty(userId)){				return JsonResponseUtil.getJson(-0xb0,"请登录！");			}		}						String phone="";		Timestamp nowTime = new Timestamp(System.currentTimeMillis());		ReFeedback reFeedback = new ReFeedback();		reFeedback.setCreateTime(nowTime);		reFeedback.setIsValid(true);		reFeedback.setContent(content);		reFeedback.setConnectPhone(connectPhone);				if(userId!=null&&StringUtils.isNotBlank(userId)){			Users users = usersDao.findById(Integer.parseInt(userId));			phone=users==null?"":users.getName();						reFeedback.setUser(users);		}		if(images!=null){			List<String> imagesArray = JSONArray.parseArray(images,String.class);			JSONArray jsonArray = new JSONArray();			for(String img : imagesArray){				JSONObject jsonObject = new JSONObject();				jsonObject.put("image", img);				jsonArray.add(jsonObject);			}			reFeedback.setImages(jsonArray.toString());		}					if(Integer.valueOf(version)>103){			reFeedback.setFbType(fbType);			if("1".equals(fbType)){ // 意见反馈								userSystemMessageService.saveMessage("意见反馈","每天积分粉丝"+phone+" 提交了意见反馈！内容是：'"+content+"'");							}else {				userSystemMessageService.saveMessage("商务合作","每天积分粉丝"+phone+" 提交了商务合作！内容是：'"+content+"'");			}					}else{			userSystemMessageService.saveMessage("意见反馈","每天积分粉丝"+phone+" 提交了意见反馈！内容是：'"+content+"'");		}						feedbackDao.save(reFeedback);				return JsonResponseUtil.getJson(0x01,"提交成功");	}	@Override	public Map<String, Object> changeBaseInfo(HttpServletRequest request,			HttpServletResponse response) {		Parameter parameter = ParameterUtil.getParameter(request);		if (parameter == null) {//错误的参数；			return JsonResponseUtil.getJson(-0x02,"参数data不是合法的json字符串");		}		Integer userId = Integer.parseInt(parameter.getUserId());		Users user = usersDao.get(userId);				String userName = parameter.getData().getString("username");		String birthday = parameter.getData().getString("birthday");		String phone = parameter.getData().getString("phone");		String sex = parameter.getData().getString("sex");		String detailedAddress = parameter.getData().getString("detailedAddress");		String captcha  = parameter.getData().getString("captcha");		String headimage = parameter.getData().getString("headimage");		if(userName!=null){			user.setRealname(userName);			return JsonResponseUtil.getJson(0x01, "名称修改成功");		}		if(birthday!=null){			if(StringUtils.isNotBlank(birthday)){				SimpleDateFormat sdf = new SimpleDateFormat("yyyy年MM月dd日");				try {					Timestamp bir = new Timestamp(sdf.parse(birthday).getTime());					user.setBirthday(bir);					return JsonResponseUtil.getJson(0x01, "日期修改成功");				} catch (ParseException e) {					e.printStackTrace();					TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();				}			}		}		if(phone!=null&&captcha!=null){			//检查验证码；			Map<String, Object> checkmap = captchaDao.checkCaptcha(phone, captcha);				Integer status= Integer.parseInt(checkmap.get("status").toString());			if (status==-1||status==-2) {				return checkmap;			}						List<Users> luser = usersDao.getUserByUsername(phone);			if(luser!=null && luser.size()>0){				return JsonResponseUtil.getJson(-0x02, "号码已是每天积分用户，请使用此号码登录或改用其他手机号绑定！");			}			user.setPhone(phone);			user.setName(phone);			user.setPwd(MD5Util.GetMD5Code("888888"));			return JsonResponseUtil.getJson(0x01,"手机修改成功");		}		if(sex!=null){			Integer sexInteger = Integer.parseInt(sex);			user.setSex(sexInteger);			return JsonResponseUtil.getJson(0x01, "性别修改成功");		}		if(!StringUtils.isEmpty(detailedAddress)){			user.setAddress(detailedAddress);			return JsonResponseUtil.getJson(0x01, "用户地址成功");		}		if(headimage!=null){			user.setImgUrl(headimage);			return JsonResponseUtil.getJson(0x01, "头像修改成功");		}		return JsonResponseUtil.getJson(-0x02, "修改失败");	}	@Override	public void userInstallationProtocol(HttpServletRequest request) {		 QueryModel queryModel = new QueryModel();		 queryModel.combPreEquals("isValid",true);		 queryModel.combPreEquals("type",10);		 MessageCenter messageCenter = (MessageCenter) dateBaseDAO.findOne(MessageCenter.class, queryModel);		 request.setAttribute("content", messageCenter.getContent());	}	@Override	public void seeStrategy(HttpServletRequest request) {		QueryModel queryModel = new QueryModel();		queryModel.combPreEquals("isValid", true);		queryModel.combPreEquals("type", 20);		MessageCenter messageCenter = (MessageCenter) dateBaseDAO.findOne(				MessageCenter.class, queryModel);		request.setAttribute("content", messageCenter.getContent());	}	@Override	public void about(HttpServletRequest request) {		QueryModel queryModel = new QueryModel();		queryModel.combPreEquals("isValid", true);		queryModel.combPreEquals("type", 30);		MessageCenter messageCenter = (MessageCenter) dateBaseDAO.findOne(				MessageCenter.class, queryModel);		request.setAttribute("content", messageCenter.getContent());	}		@Override	public void notReceivedIdentifyingCode(HttpServletRequest request) {		QueryModel queryModel = new QueryModel();		queryModel.combPreEquals("isValid", true);		queryModel.combPreEquals("type", 40);		MessageCenter messageCenter = (MessageCenter) dateBaseDAO.findOne(				MessageCenter.class, queryModel);		request.setAttribute("content", messageCenter.getContent());	}		/**	 * 监控账号注册	 */	@Override	public void registorUsersMonitor(Users user) {		QueryModel queryModel = new QueryModel();		queryModel.combPreEquals("user.id", user.getId(), "userId");		queryModel.combPreEquals("isValid", true);		UsersMonitor usersMonitor = (UsersMonitor) dateBaseDAO.findOne(				UsersMonitor.class, queryModel);		if(usersMonitor==null&&!user.getName().equals(user.getId().toString())){			String name = user.getName();			String pwd = "axp888888";//			pwd = MD5Util.GetMD5Code(pwd);			String result = MonitorUtil.addUser(name, pwd);			if(result.equals(MonitorUtil.SUC) || result.equals(MonitorUtil.EXIST) ){				usersMonitor = new UsersMonitor();				usersMonitor.setCreateTime(new Timestamp(System.currentTimeMillis()));				usersMonitor.setIsValid(true);				usersMonitor.setName(name);				usersMonitor.setPwd(pwd);				usersMonitor.setUser(user);				usersMonitorDao.save(usersMonitor);			}		}	}		@Override	public Map<String, Object> getMonitorAccount(HttpServletRequest request){		Parameter parameter = ParameterUtil.getParameter(request);		if (parameter == null) {//错误的参数；			return JsonResponseUtil.getJson(-0x02,"参数data不是合法的json字符串");		}		if(StringUtils.isEmpty(parameter.getUserId())){			return JsonResponseUtil.getJson(-0x38,"请先注册");		}		Integer userId = Integer.parseInt(parameter.getUserId());				Users u = usersDao.findById(userId);		if(u.getId().toString().equals(u.getName())){			return JsonResponseUtil.getJson(-0x50,"请先绑定手机号！");		}		QueryModel queryModel = new QueryModel().setOrder("id desc");		queryModel.combPreEquals("user.id", userId, "userId");		queryModel.combPreEquals("isValid", true);		List<UsersMonitor> usersMonitors = dateBaseDAO.findPageList(UsersMonitor.class, queryModel, 0, 1);		if(usersMonitors.size()>0){			UsersMonitor mo = usersMonitors.get(0);			Map<String, Object> dataMap = new HashMap<String, Object>();			Map<String, Object> statusMap = new HashMap<String, Object>();			statusMap.put("status", 0x01);			statusMap.put("message", "请求成功");			statusMap.put("data", dataMap);			dataMap.put("name", mo.getName());			dataMap.put("pwd", mo.getPwd());			return statusMap;		}else{			try{				Users user = usersDao.findById(userId);				registorUsersMonitor(user);				usersMonitors = dateBaseDAO.findPageList(UsersMonitor.class, queryModel, 0, 1);				UsersMonitor mo = usersMonitors.get(0);				Map<String, Object> dataMap = new HashMap<String, Object>();				Map<String, Object> statusMap = new HashMap<String, Object>();				statusMap.put("status", 0x01);				statusMap.put("message", "请求成功");				statusMap.put("data", dataMap);				dataMap.put("name", mo.getName());				dataMap.put("pwd", mo.getPwd());				return statusMap;			}catch(Exception e){				e.printStackTrace();				TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();				return JsonResponseUtil.getJson(-0x39,"进入监控失败");			}		}	}	//验证绑定手机号	@Override	public Map<String, Object> getCheckPhone(HttpServletRequest request) {		Parameter parameter = ParameterUtil.getParameter(request);		if (parameter==null) {			return JsonResponseUtil.getJson(-0x02,"参数data不是合法的json字符串");		}		Map<String, Object> statusMap = new HashMap<String, Object>();		try {			Integer userId = Integer.parseInt(parameter.getUserId());			Users u = usersDao.findById(userId);			if(u.getId().toString().equals(u.getName())){				return JsonResponseUtil.getJson(-0x50,"请先绑定手机号！");			}			statusMap.put("status", 1);			statusMap.put("message", "请求成功");		} catch (NumberFormatException e) {			e.printStackTrace();			statusMap.put("status", -1);			statusMap.put("message", "请求失败");			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();		}		return statusMap;	}	@Override	public Map<String, Object> getUsersMoney(HttpServletRequest request) {		String xcx = request.getParameter("xcx");		String basePath = request.getServletContext().getAttribute("RESOURCE_LOCAL_URL").toString();		Integer pageIndex = 1;		String userId = "";		if(xcx != null){			pageIndex = Integer.valueOf(request.getParameter("pageIndex"));			userId = request.getParameter("userId");					}else{			Parameter parameter = ParameterUtil.getParameter(request);						if (parameter == null) {//错误的参数；				return JsonResponseUtil.getJson(-0x02,"参数data不是合法的json字符串");			}			pageIndex = Integer.parseInt(parameter.getData().getString("pageIndex"));			userId = parameter.getUserId();		}				Map<String, Object> statusMap = new HashMap<String, Object>();				try{			Users user = usersDao.findById(Integer.parseInt(userId));			if(userId==null||StringUtils.isBlank(userId) || user==null){				return JsonResponseUtil.getJson(-0x02,"参数data不是合法的json字符串");			}								Map<String,Object> data =new HashMap<String,Object>();			List<Map<String,Object>> newsList =new ArrayList<Map<String,Object>>();			QueryModel queryModel=new QueryModel();			queryModel.clearQuery();			queryModel.combEquals("isValid", 1);			queryModel.combEquals("usersByUserId.id", userId);			Integer count =  dateBaseDAO.findCount(CashmoneyRecord.class, queryModel);			List<CashmoneyRecord> acrlist=dateBaseDAO.findPageList(CashmoneyRecord.class, queryModel, (pageIndex-1)*10, 10);			for (CashmoneyRecord cr :acrlist) {				Map<String,Object> temp =new HashMap<String, Object>();				String remark = cr.getRemark();				if(cr.getType()==-1){					remark=remark.concat("(未确认)");				}				temp.put("remark", remark);				temp.put("createtime",DateUtil.formatDate("yyyy-MM-dd HH:mm:ss",cr.getCreateTime()));				temp.put("money",cr.getMoney()+"");				newsList.add(temp);			}						queryModel.clearQuery();			queryModel.combEquals("isValid", 1);			queryModel.combEquals("usersByUserId.id", userId);			queryModel.combEquals("type", -1);			double sum = dateBaseDAO.findSum(CashmoneyRecord.class, "money", queryModel);						data.put("dataList", newsList);			data.put("allMoney", user.getMoney()==null?"0:00":user.getMoney()+"");			data.put("title", "钱包余额(未确认:"+sum+")");												data.put("pageSize", count%10==0?count/10:(count/10+1));			data.put("pageIndex", pageIndex);			data.put("pageItemCount", 10+"");									statusMap.put("data", data);			statusMap.put("status", 1);			statusMap.put("message", "请求成功");						}catch(Exception e){			e.printStackTrace();			statusMap.put("status", -2);			statusMap.put("message", "获取金额失败");			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();		}		return statusMap;			}	@Override	public Map<String, Object> applyWithdrawals(HttpServletRequest request) {		Parameter parameter = ParameterUtil.getParameter(request);		String basePath = request.getServletContext().getAttribute("RESOURCE_LOCAL_URL").toString();		if (parameter == null) {//错误的参数；			return JsonResponseUtil.getJson(-0x02,"参数data不是合法的json字符串");		}						String phone = parameter.getData().getString("phone");		String inviteCode = parameter.getData().getString("inviteCode");						//检查验证码；		Map<String, Object> checkmap = captchaDao.checkCaptcha(phone, inviteCode);		Integer status= Integer.parseInt(checkmap.get("status").toString());		if (status==-1||status==-2) {			return checkmap;		}				    Map<String, Object> statusMap = new HashMap<String, Object>();		try{						String userId = parameter.getUserId();			Users user = usersDao.findById(Integer.parseInt(userId));			if(userId==null||StringUtils.isBlank(userId) || user==null){				return JsonResponseUtil.getJson(-0x02,"用户不存在");			}			Map<String,Object> data =new HashMap<String,Object>();			List<Map<String,Object>> newsList =new ArrayList<Map<String,Object>>();			QueryModel queryModel=new QueryModel();			queryModel.clearQuery();			queryModel.combEquals("isValid", 1);			queryModel.combEquals("users.id", userId);			queryModel.setOrder("id desc");			List<GetmoneyRecord> acrlist=dateBaseDAO.findPageList(GetmoneyRecord.class, queryModel, 0, 1);						if(acrlist!=null && acrlist.size()>0){				data.put("account", acrlist.get(0).getAccount());				data.put("name",acrlist.get(0).getName());				data.put("address",acrlist.get(0).getAddress());			}else{				data.put("account", "");				data.put("name","");				data.put("address","");			}			data.put("totalMoney", user.getMoney()==null?"0:00":user.getMoney()+"");			data.put("title", "提现金额为100元起，提交后3个工作日内到账，手续费按银行标准收取，单笔最低2元。");			data.put("minMoney", "100");			statusMap.put("data", data);			statusMap.put("status", 1);			statusMap.put("message", "请求成功");						}catch(Exception e){			e.printStackTrace();			statusMap.put("status", -2);			statusMap.put("message", "获取金额失败");			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();		}		return statusMap;	}	@Override	public Map<String, Object> withdrawals(HttpServletRequest request) {		Map<String, Object> statusMap = new HashMap<String, Object>();		try {			Parameter parameter=ParameterUtil.getParameter(request);			if (parameter==null) {				return JsonResponseUtil.getJson(-2,"参数data不是合法的json字符串");			}			String userId = parameter.getUserId();			Users user = usersDao.findById(Integer.parseInt(userId));						if(user.getMoney()==null || user.getMoney()==0){				return JsonResponseUtil.getJson(-2,"余额不足");			}					String name = parameter.getData().getString("name");			String money = parameter.getData().getString("money");			double moneyd=Double.parseDouble(money);			String bankCode = parameter.getData().getString("bankCode");			String address =parameter.getData().getString("address");			String type = parameter.getData().getString("type")==null?"1":parameter.getData().getString("type");			double fee= CalcUtil.mul(moneyd, 0.005, 2)<2.00?2.0:CalcUtil.mul(moneyd, 0.005, 2);									double total = moneyd+fee;			if(user.getMoney()<total){				return JsonResponseUtil.getJson(-2,"提现金额"+moneyd+"加手续费"+fee+"大于用户余额！");			}						GetmoneyRecord gr = new GetmoneyRecord();			gr.setAccount(bankCode);			gr.setUsers(user);			gr.setAddress(address);			gr.setCounterFee(fee);			gr.setMoney(moneyd);			gr.setName(name);			gr.setCreateTime(new java.sql.Timestamp(System.currentTimeMillis()));			gr.setIsValid(true);			gr.setStatus(0);			gr.setType(Integer.valueOf(type));			getmoneyRecordDao.save(gr);									CashmoneyRecord cr1 = new CashmoneyRecord();			cr1.setUsersByUserId(user);			cr1.setMoney(-moneyd);			cr1.setCreateTime(new java.sql.Timestamp(System.currentTimeMillis()));			cr1.setIsValid(true);			cr1.setUsersByFromUsers(user);			cr1.setBeforeMoney(user.getMoney());			cr1.setRemark("提现扣除金额"+moneyd);			cr1.setType(Integer.valueOf(type));			CashmoneyRecord cr2 = new CashmoneyRecord();			cr2.setUsersByUserId(user);			cr2.setMoney(-fee);			cr2.setCreateTime(new java.sql.Timestamp(System.currentTimeMillis()));			cr2.setIsValid(true);			cr2.setUsersByFromUsers(user);			cr2.setBeforeMoney(user.getMoney());			cr2.setRemark("提现手续费扣除金额"+fee);			cr2.setType(Integer.valueOf(type));			moneyDao.save(cr1);			moneyDao.save(cr2);						user.setMoney(user.getMoney()-total);						usersDao.update(user);												statusMap.put("status", 1);			statusMap.put("message", "请求成功");		} catch (Exception e) {			e.printStackTrace();			statusMap.put("status", -2);			statusMap.put("message", "请求失败");			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();		}	return statusMap;	}	@Override	public Map<String, Object> getwithdrawalsInfoForPay(			HttpServletRequest request) {		Map<String, Object> statusMap = new HashMap<String, Object>();		try {			Parameter parameter=ParameterUtil.getParameter(request);			if (parameter==null) {				return JsonResponseUtil.getJson(-2,"参数data不是合法的json字符串");			}			Integer pageIndex = Integer.parseInt(parameter.getData().getString("pageIndex"));			String userId = parameter.getUserId();			Users user = usersDao.findById(Integer.parseInt(userId));			Map<String,Object> data =new HashMap<String,Object>();			List<Map<String,Object>> newsList =new ArrayList<Map<String,Object>>();			QueryModel queryModel=new QueryModel();			queryModel.clearQuery();			queryModel.combEquals("isValid", 1);			queryModel.combPreEquals("users.id", user.getId(), "userId");			queryModel.combEquals("status", GetmoneyRecord.yi_zhi_fu);			Integer count =  dateBaseDAO.findCount(GetmoneyRecord.class, queryModel);			List<GetmoneyRecord> Wdrawalslist=dateBaseDAO.findPageList(GetmoneyRecord.class, queryModel, (pageIndex-1)*16, 16);			int totalMoney=0;			for (int i = 0; i < Wdrawalslist.size(); i++) {				Map<String,Object> temp =new HashMap<String, Object>();				String bankCode = Wdrawalslist.get(i).getAccount();				temp.put("bankCode", "尾号"+bankCode.substring(bankCode.length()-4, bankCode.length()));				temp.put("bankName", "银行");				temp.put("totalMoney", Wdrawalslist.get(i).getMoney()==null?"":Wdrawalslist.get(i).getMoney()+"");				temp.put("counterFee", Wdrawalslist.get(i).getCounterFee()==null?"0.5":Wdrawalslist.get(i).getCounterFee()+"");				temp.put("createtime",DateUtil.formatDate("yyyy-MM-dd HH:mm:ss", Wdrawalslist.get(i).getCreateTime()));				temp.put("payState", "（已支付）");				totalMoney+= Wdrawalslist.get(i).getMoney()==null?0: Wdrawalslist.get(i).getMoney();				newsList.add(temp);			}			data.put("dataList", newsList);									data.put("pageSize", count%16==0?count/16:(count/16+1));			data.put("pageIndex", pageIndex);			data.put("allMoney", totalMoney+"");			data.put("pageItemCount", 16);			statusMap.put("data", data);			statusMap.put("status", 1);			statusMap.put("message", "请求成功");		} catch (Exception e) {			e.printStackTrace();			statusMap.put("status", -2);			statusMap.put("message", "请求失败");			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();		}	return statusMap;	}	@Override	public Map<String, Object> getwithdrawalsInfo(HttpServletRequest request) {		Map<String, Object> statusMap = new HashMap<String, Object>();		try {			Parameter parameter=ParameterUtil.getParameter(request);			if (parameter==null) {				return JsonResponseUtil.getJson(-2,"参数data不是合法的json字符串");			}			Integer pageIndex = Integer.parseInt(parameter.getData().getString("pageIndex"));			String userId = parameter.getUserId();			Users user = usersDao.findById(Integer.parseInt(userId));			Map<String,Object> data =new HashMap<String,Object>();			List<Map<String,Object>> newsList =new ArrayList<Map<String,Object>>();			QueryModel queryModel=new QueryModel();			queryModel.clearQuery();			queryModel.combEquals("isValid", 1);			queryModel.combPreEquals("users.id", user.getId(), "userId");						queryModel.combCondition(" ( status="+GetmoneyRecord.wei_zhi_fu+" "			+ "or status="+GetmoneyRecord.yi_shen_he+" or status="+GetmoneyRecord.zhi_fu_cheng_gong+")");						Integer count =  dateBaseDAO.findCount(GetmoneyRecord.class, queryModel);			List<GetmoneyRecord> Wdrawalslist=dateBaseDAO.findPageList(GetmoneyRecord.class, queryModel, (pageIndex-1)*16, 16);			int totalMoney=0;			for (int i = 0; i < Wdrawalslist.size(); i++) {				Map<String,Object> temp =new HashMap<String, Object>();				String bankCode = Wdrawalslist.get(i).getAccount();				temp.put("bankCode", "尾号"+bankCode.substring(bankCode.length()-4, bankCode.length()));				temp.put("bankName", "银行");				temp.put("totalMoney", Wdrawalslist.get(i).getMoney()==null?"":Wdrawalslist.get(i).getMoney()+"");				temp.put("counterFee", Wdrawalslist.get(i).getCounterFee()==null?"0.5":Wdrawalslist.get(i).getCounterFee()+"");				temp.put("createtime",DateUtil.formatDate("yyyy-MM-dd HH:mm:ss", Wdrawalslist.get(i).getCreateTime()));				temp.put("payState", GetmoneyRecord.getStatus(Wdrawalslist.get(i).getStatus()));				totalMoney+= Wdrawalslist.get(i).getMoney()==null?0: Wdrawalslist.get(i).getMoney();				newsList.add(temp);			}			data.put("dataList", newsList);									data.put("pageSize", count%16==0?count/16:(count/16+1));			data.put("pageIndex", pageIndex);			data.put("allMoney", totalMoney+"");			data.put("pageItemCount", 16);			statusMap.put("data", data);			statusMap.put("status", 1);			statusMap.put("message", "请求成功");		} catch (Exception e) {			e.printStackTrace();			statusMap.put("status", -2);			statusMap.put("message", "请求失败");			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();		}	return statusMap;	}		/**	 * 检查手机验证码	 */	@Override	public Map<String, Object> checkCaptcha(String phoneNumber, String captcha,String Invitecode) {				Captcha captchaMoel = captchaDao.getCaptchaByPhone(phoneNumber);				Map<String, Object> map=new HashMap<String, Object>();		//如果等于空 说明验证码发送记录表中 没有这个手机号码		if(captchaMoel==null){			 map.put("status", -1);			 map.put("message", "无记录手机号");			 return map;		}else if(!captchaMoel.getCode().equals(captcha)){			 map.put("status", -2);			 map.put("message","验证码错误");			 return map;		}else{			//查询Users表是否存在该用户 如不存在则新建一个  手机号作为账号   			Users users=findUserByPhoneNumber(phoneNumber);			if(users==null){ 				Invitecode=StringUtils.isNotBlank(Invitecode)?Invitecode:"";				users=createUserByPhoneNumber(phoneNumber,Invitecode);  //创建用户				map.put("status", 2);				map.put("users", users);				map.put("message","注册用户并验证成功,");				return map;			}			 map.put("users", users);			 map.put("status", 1);			 map.put("message","验证成功");			 return map;		}	}	@SuppressWarnings("null")	@Override	public Users findUserByPhoneNumber(String phoneNumber) {						QueryModel queryModel=new QueryModel();			AdminUser adminUser=null;			Users users = new Users();			queryModel.combEquals("isValid", 1);			queryModel.combPreEquals("phone",phoneNumber,"phone");						 users=(Users) dateBaseDAO.findOne(Users.class, queryModel);			//可能手机号在user不存在   而adminUser存在			if(users==null){					List<AdminUser> adminUsers = dateBaseDAO.findLists(AdminUser.class, queryModel);			//	adminUser=(AdminUser) dateBaseDAO.findOne(AdminUser.class, queryModel);				if(adminUsers!=null && adminUsers.size()>0){					adminUser = adminUsers.get(0);					users.setPwd(adminUser.getPassword());					users.setName(adminUser.getLoginname());				}			}					return users;	}	@Override	public Users createUserByPhoneNumber(String phoneNumber,String Invitecode) {		Users user = new Users();		user.setIsvalid(true);		user.setCreatetime(new Timestamp(System.currentTimeMillis()));		user.setLoginname("axp"+phoneNumber.substring(phoneNumber.length()-7));		user.setName(phoneNumber);		user.setPwd(MD5Util.GetMD5Code("888888"));		user.setAdminUser(null);		user.setLevel(0);		user.setPhone(phoneNumber);		user.setScore(0);//数据库要求score不能为null;			user.setInvitecode(Invitecode);		save(user);		user.setMycode("6"+user.getId());		usersDao.update(user);		return user;	}	@Override	public boolean findUserIsMyFans(Users users, String invitecode) {				//判断绑定的邀请码是不是自己的粉丝		QueryModel queryModel=new QueryModel();		queryModel.combEquals("isValid",1);		queryModel.combPreEquals("invitecode", users.getInvitecode(), "invitecode");		List<Users> userList = (List<Users>) dateBaseDAO.findList(Users.class, queryModel);		for (Users u : userList) {			if(invitecode.equals(u.getMycode())){				//当前用户的粉丝已经查了出来    如果粉丝的mycode等于填写的邀请码  那么该邀请码就是粉丝的				return true;			}		}		return false;	}	@Override	public Map<String, Object> getDefaultMsg(HttpServletRequest request,			HttpServletResponse response) {			Parameter parameter = ParameterUtil.getParameter(request);			if (parameter == null) {//错误的参数；					return JsonResponseUtil.getJson(-0x02,"参数data不是合法的json字符串");			}			Map<String, Object> map=new HashMap<String, Object>();			 map.put("message", "【每天积分】朋友，想你了，全新积分兑换体验等你享受。快来下载吧！http://t.cn/EyxwJtS");			 map.put("status", 1);		return map;	}	private Map<String, Object> registerNotify(Users user,String channelId,String tokenId,String os,String basePath,boolean isSeller,String app){		Map<String, Object> map = new HashMap<String, Object>();		map.put("status", 1);		map.put("message", "登陆成功");				try{		//存在用户，且用户名和密码都正确；				Map<String, Object> m1 = new HashMap<String, Object>();		m1.put("userId", user==null?"-1":user.getId().toString());			Seller seller = sellerService.getSellerByUsersId2(user.getId());		AdminUser adminUser=null;        if(seller !=null){        	adminUser=seller.getAdminUser();        	if(seller.getAdminUser()!=null){        		m1.put("adminuserId", seller.getAdminUser().getId()+"");        		m1.put("axpAdminUserId", "axp"+seller.getAdminUser().getId()+"");        	}else{        		m1.put("adminuserId", "");        	}            m1.put("sellerId", seller.getId()+"");        }else{        	m1.put("adminuserId", "");            m1.put("sellerId", "");            m1.put("axpAdminUserId","");        }           	String imgUrl="";		TokenResult tokenResult = null;				if(isSeller){				if(adminUser!=null&&seller!=null){										adminUser.setDevicetoken(tokenId); 					adminUser.setChannelid(channelId);					adminUserDao.update(adminUser);					SellerMainPage sellerMainPage = sellerMainPageDAO.findOneBySellerId(seller.getId());										imgUrl=StringUtils.isBlank(sellerMainPage.getSellerLogo())?StringUtil.sellerHead:basePath+sellerMainPage.getSellerLogo();					tokenResult = rongCloudService.getToken("axp"+adminUser.getId().toString(),seller.getName()==null?"商家":seller.getName(),imgUrl);						m1.put("token",tokenResult.getToken());					m1.put("sellerLogo",imgUrl);					m1.put("sellerName",seller.getName()==null?"商家":seller.getName());				}else{					m1.put("token","");					m1.put("sellerLogo","");					m1.put("sellerName","");				}		}else{						imgUrl =StringUtil.getUserDefaultHead(user, basePath);			if("WEB".equals(os)){				m1.put("userName",user.getName());				 m1.put("userHead",imgUrl);			}else{				 tokenResult = rongCloudService.getToken(user.getId().toString(),user.getName(),imgUrl);					 m1.put("token",tokenResult.getToken());				 m1.put("userHead",imgUrl);				 m1.put("userName",StringUtils.isBlank(user.getRealname())?user.getName():user.getRealname());			}		}				map.put("data", m1);		if(!"WEB".equals(os)&&"Users".equals(app)){  //WEB端登录  不进入单点登录			System.out.println("这里开始---------------3");			this.singleSignOn(user, channelId,tokenId);			System.out.println("这里结束---------------3");		}		//商家版单点登录		if(isSeller&&adminUser!=null&&"SELLER".equals(app)){			this.sellerSingleSignOn(adminUser, channelId, tokenId);		}			//this.registorUsersMonitor(user);		}catch(Exception e){			System.out.println("注册监控异常");			e.printStackTrace();			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();		}		return map;	}	//意见反馈小提示	@Override	public Map<String, Object> feedbackTips(HttpServletRequest request,			HttpServletResponse response) {		Map<String, Object> statusMap = new HashMap<String, Object>();		String xcx = request.getParameter("xcx");		if(xcx != null ){			return JsonResponseUtil.getJson(-0x02, "请求出错!");		}else{				    	Parameter parameter = ParameterUtil.getParameter(request);	    	if (parameter==null) {				return JsonResponseUtil.getJson(-0x02, "参数data不是合法的json字符串");	    	}		}    	try {    		Map<String, Object> map = new HashMap<String, Object>();    		map.put("QQ", "");    		map.put("WeChat","");    		map.put("Phone","");							statusMap.put("data", map);			statusMap.put("status", 1);			statusMap.put("message", "请求成功");		} catch (Exception e) {			e.printStackTrace();			statusMap.put("status", -1);			statusMap.put("message", "请求失败");			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();		}    	return statusMap;    }	//上传日志	@Override	public Map<String, Object> uploadLog(HttpServletRequest request,			HttpServletResponse response) {		Map<String, Object> statusMap = new HashMap<String, Object>();    	statusMap.put("status", 1);    	statusMap.put("message","上传成功");		try {			Parameter parameter=ParameterUtil.getParameter(request);			if (parameter==null) {				return JsonResponseUtil.getJson(-2,"参数data不是合法的json字符串");			}			String userId=parameter.getUserId()==null?"uid==null":parameter.getUserId();			String log=parameter.getData().getString("log");			StringBuilder sb=new StringBuilder();			String os=parameter.getOs();			sb.append("/2t/jboss-as/standalone/error").append(File.separator).append("axpLog").append(File.separator).toString();			String path="";			boolean isExist=true;			String strDate=DateUtil.formatDate("yyyy-MM-dd", new Date());						sb.append(strDate).append(File.separator);						//applog/2017-08-09/Ios/userLog_811.txt;						if("IOS".equals(os)){				path="ios";			}else if("ANDROID".equals(os)){				path="android";			}			sb.append(path);						File catalog = new File(sb.toString());			if (!catalog.isDirectory()) {				catalog.mkdirs();  //如果不存在 则创建文件夹			} 						sb.append(File.separator).append("userLog_").append(userId).append(".txt");						//创建文件			File fileName=new File(sb.toString());			if(!fileName.exists()){				isExist=false;				fileName.createNewFile();			}						 FileWriter writer = new FileWriter(fileName, true);			 			//写入日志			if(isExist){ 				  writer.write("\r\n");			}				writer.write(log);				writer.flush();		        writer.close();					}catch(Exception e){			statusMap.put("status", -1);	    	statusMap.put("message","上传失败");			e.printStackTrace();		}    	return statusMap;	}	@Override	public Map<String, Object> getUserInfo(HttpServletRequest request,			HttpServletResponse response) {		Map<String, Object> statusMap = new HashMap<String, Object>();		statusMap.put("status", 1);		statusMap.put("message", "请求成功");				Map<String, Object> data = new HashMap<String, Object>();				try {			Parameter parameter = ParameterUtil.getParameter(request);			if (parameter == null) {				return JsonResponseUtil.getJson(-2, "参数data不是合法的json字符串");			}			String basePath = request.getServletContext().getAttribute("RESOURCE_LOCAL_URL").toString();			Map<String, Object> map = new HashMap<String, Object>();			JSONObject dataJson = parameter.getData();				String userId=	dataJson.getString("userId");						Users users=null;			AdminUser adminUser=null;			if(userId.startsWith("axp")){				userId = userId.substring(3,userId.length());				adminUser = adminUserDao.findById(Integer.parseInt(userId));				  Integer sellerId = adminUser.getSellerId();				  Seller seller=sellerDAO.findById(sellerId);				  data.put("name",StringUtils.isBlank(seller.getName())?adminUser.getLoginname():seller.getName());				SellerMainPage sellerMainPage = sellerMainPageDAO.findOneBySellerId(seller.getId());				data.put("portraitUri",						StringUtils.isBlank(sellerMainPage.getSellerLogo())?StringUtil.sellerHead:basePath+sellerMainPage.getSellerLogo());											}else{				users=usersDao.findById(Integer.parseInt(userId));				String name=StringUtils.isBlank(users.getRealname())?users.getName():users.getRealname();				data.put("name", name);				data.put("portraitUri",StringUtil.getUserDefaultHead(users, basePath));			}						List<Map<String,Object>> groupInfos = new ArrayList<Map<String,Object>>();			//查询群头像 群名字 群Id 返回			QueryModel queryModel = new QueryModel();			queryModel.clearQuery();			queryModel.combPreEquals("isValid",true);			queryModel.combPreEquals("users.id", Integer.parseInt(userId),"usersId");			List<ItalkGroupMember> ItalkGroupMemberList = dateBaseDAO.findLists(ItalkGroupMember.class, queryModel);			for(ItalkGroupMember italks: ItalkGroupMemberList){				ItalkGroup italkGroup = italks.getItalkGroup();				map.put("groupName", italkGroup.getName());				map.put("groupId", italkGroup.getGroupId().toString());				map.put("groupIcon", basePath+italkGroup.getImgUrl());				groupInfos.add(map);			}			data.put("userId", userId);			data.put("groupInfos", groupInfos);			statusMap.put("data", data);		} catch (Exception e) {			e.getMessage();			System.out.println(e.getMessage());			statusMap.put("status", -1);			statusMap.put("message", "请求失败");		}		return statusMap;	}				public Map<String, Object> getSellerFansList(HttpServletRequest request,			HttpServletResponse response) {		Parameter parameter = ParameterUtil.getParameter(request);		if (parameter == null) {// 错误的参数；			return JsonResponseUtil.getJson(-0x02, "参数data不是合法的json字符串");		}		String basePath = request.getServletContext().getAttribute		("RESOURCE_LOCAL_URL").toString();		Integer userId = Integer.parseInt(parameter.getUserId());		//userId = 49701;		Users currentUser = usersDao.findById(userId);		QueryModel queryModel = new QueryModel();		queryModel.clearQuery();		queryModel.combPreEquals("invitecode", currentUser.getMycode());		queryModel.combPreEquals("isValid", true);		List<Users> usersList = dateBaseDAO.findPageList(Users.class,				queryModel, 0, 3000);		List<Map<String, Object>> fansList = new ArrayList<>();		Map<String, Object> fansMap = null;		for (Users fan : usersList) {			fansMap = new HashMap<>();			fansMap.put("name",					StringUtils.isBlank(fan.getRealname()) ? fan.getName					() : fan.getRealname());			fansMap.put("fansId", fan.getId());			if (fan.getSex() != null && fan.getSex().intValue() < 3) {				fansMap.put("sex", fan.getSex().intValue() == 1 ? "女" : "男");			} else {				fansMap.put("sex", "保密");			}			fansMap.put(					"date",					DateUtil.formatDate("yyyy-MM-dd HH:mm:ss",							fan.getCreatetime())			);			fansMap.put("headImage", StringUtil.getUserDefaultHead(fan, basePath));			fansList.add(fansMap);		}		Map<String, Object> dataMap = new HashMap<>();		// recommender 推荐人		List<Users> recommender = usersDao.findUsersByInvitecode(currentUser				.getInvitecode());		Map<String, String> recommenderMap = new HashMap<>();		;		if (recommender.size() > 0) {			Users recommenderUser = recommender.get(0);			recommenderMap					.put("recommenderName",							recommenderUser.getRealname()							== null ? recommenderUser.getName()									: recommenderUser.getRealname());			recommenderMap.put(					"recommenderHeadImage",					recommenderUser.getImgUrl()					== null ? StringUtil.userHead : basePath							+ recommenderUser.getImgUrl());			recommenderMap.put("recommenderId", recommenderUser.getId()					.toString());		}		dataMap.put("recommender", recommenderMap); // 推荐人信息		dataMap.put("FansGroupHeadImage", StringUtil.userHead); // 粉丝群头像		dataMap.put("dataList", fansList);		dataMap.put("pageSize", 3000 % 16 == 0 ? 3000 / 16 : (3000 / 16 + 1));		//dataMap.put("pageIndex", pageIndex);		dataMap.put("pageItemCount", 16);		Map<String, Object> bigDataMap = new HashMap<>();		bigDataMap.put("data", dataMap);		bigDataMap.put("status", 0x01);		bigDataMap.put("message", "请求成功");		return bigDataMap;	}	@Override	public Map<String, Object> getFansList2(HttpServletRequest request,			HttpServletResponse response) {		String xcx = request.getParameter("xcx");		Integer userId = 0;		String pageIndex = "1";		String basePath = request.getServletContext().getAttribute("RESOURCE_LOCAL_URL").toString();				Map<String, Object> dataMap = new HashMap<>();		if(xcx != null){			userId = Integer.valueOf(request.getParameter("userId"));			pageIndex = request.getParameter("pageIndex");			dataMap.put("targetUrl", StringUtil.targetUrl);		}else{						Parameter parameter = ParameterUtil.getParameter(request);			if (parameter == null) {// 错误的参数；				return JsonResponseUtil.getJson(-0x02, "参数data不是合法的json字符串");			}			if (parameter.getApp().equals("SELLER")) {				return getSellerFansList(request, response);			}						userId = Integer.parseInt(parameter.getUserId());			pageIndex = parameter.getData().getString("pageIndex");			String v = parameter.getAppVersion();									String version = "";			char[] charArray = v.toCharArray();			for (int i = 0; i < charArray.length; i++) {				if(".".equals(String.valueOf(charArray[i]))){					continue;				}				version+=charArray[i];			}					}		Users currentUser = usersDao.findById(userId);						if(StringUtils.isNotBlank(pageIndex) && Integer.parseInt(pageIndex)>1){			return JsonResponseUtil.getJson(-0x02, "已是最后一页");		}						QueryModel queryModel = new QueryModel();		queryModel.clearQuery();		queryModel.combPreEquals("invitecode", currentUser.getMycode());		queryModel.combPreEquals("isValid", true);		queryModel.setOrder("id desc");		Integer count = dateBaseDAO.findCount(Users.class, queryModel);		List<Users> usersList = null;				usersList = dateBaseDAO.findLists(Users.class, queryModel);					List<Map<String, Object>> fansList = new ArrayList<>();		Map<String, Object> fansMap = null;		Integer sellerCount = 0;		Integer OrdinaryCount = 0;		Integer fansCount = 0;		Integer groupCount = 0;//群数量				//把对应等级的群放入粉丝的fansMap 中的name fansId headImage		queryModel.clearQuery();		queryModel.combPreEquals("isValid", true);		queryModel.combPreEquals("users.id", userId,"usersId");		queryModel.setOrder("createTime DESC");		List<ItalkGroupMember> italkGroupMemberList = dateBaseDAO.findLists(ItalkGroupMember.class, queryModel);		if(italkGroupMemberList!=null && italkGroupMemberList.size()>0){			for(ItalkGroupMember ikgm:italkGroupMemberList){				groupCount++;				ItalkGroup group = ikgm.getItalkGroup();				fansMap = new HashMap<>();				fansMap.put("name", group.getName());				fansMap.put("fansId", group.getGroupId()+"");				fansMap.put("headImage", basePath+group.getImgUrl());				fansMap.put("usersType", "3");				fansMap.put("conversationType", 1);								fansList.add(fansMap);			}					}				for (Users fan : usersList) {			fansMap = new HashMap<>();			fansMap.put("name",StringUtils.isBlank(fan.getRealname()) ? fan.getName() : fan.getRealname());			fansMap.put("fansId", fan.getId()+"");			if (fan.getSex() != null && fan.getSex().intValue() < 3) {				fansMap.put("sex", fan.getSex().intValue() == 1 ? "女" : "男");			} else {				fansMap.put("sex", "保密");			}			fansMap.put("date",DateUtil.formatDate("yyyy-MM-dd HH:mm:ss",fan.getCreatetime())			);			fansMap.put("headImage", StringUtil.getUserDefaultHead(fan, basePath));			fansMap.put("conversationType", 0);						QueryModel queryModelseller = new QueryModel();			queryModelseller.clearQuery();			queryModelseller.combPreEquals("users.id",fan.getId(),"userId");			queryModelseller.combPreEquals("isValid", true);			List<TkldPid> tkldPidSellerList = null;			tkldPidSellerList = dateBaseDAO.findLists(TkldPid.class,queryModelseller);			if(tkldPidSellerList!=null && tkldPidSellerList.size()>0){				TkldPid tkldpid = tkldPidSellerList.get(0);				if(tkldpid.getLevel()==3){					OrdinaryCount++;					fansMap.put("usersType", "1");//合伙人				}else if(tkldpid.getLevel()==2 ){					sellerCount++;					fansMap.put("usersType", "2");//事业合伙人														}else{					fansCount++;					fansMap.put("usersType", "0");//粉丝				}							}else{				fansCount++;				fansMap.put("usersType", "0");//粉丝							}			fansList.add(fansMap);		}												// recommender 推荐人		List<Users> recommender = usersDao.findUsersByInvitecode(currentUser				.getInvitecode());				Map<String, String> recommenderMap = new HashMap<>();				if (recommender.size() > 0) {			Users recommenderUser = recommender.get(0);			String name = (recommenderUser.getRealname()== null ? recommenderUser.getName(): recommenderUser.getRealname())+"("+recommenderUser.getInvitecode()+")";			recommenderMap.put("recommenderName",name);			recommenderMap.put("recommenderHeadImage",StringUtil.getUserDefaultHead(recommenderUser, basePath));			recommenderMap.put("recommenderId", recommenderUser.getId().toString());			dataMap.put("bindingInviter", false);//绑定推荐人		}else{			dataMap.put("bindingInviter", true);//绑定推荐人		}		dataMap.put("fansNum", count);		dataMap.put("sellerCount", sellerCount);		dataMap.put("fansCount", fansCount);		dataMap.put("groupCount", groupCount);		dataMap.put("OrdinaryCount", OrdinaryCount);		dataMap.put("FansGroupHeadImage", StringUtil.fansGroupHead);		dataMap.put("recommender", recommenderMap); // 推荐人信息		dataMap.put("dataList", fansList);		dataMap.put("pageSize", 1);		//dataMap.put("pageIndex", pageIndex);		dataMap.put("pageItemCount", 16);		dataMap.put("HeadImage",StringUtil.getUserDefaultHead(currentUser, basePath));		dataMap.put("mycode", currentUser.getMycode());		Map<String, Object> bigDataMap = new HashMap<>();		bigDataMap.put("data", dataMap);		bigDataMap.put("status", 0x01);		bigDataMap.put("message", "请求成功");		return bigDataMap;	}	@Override	public Map<String, Object> bindingPhone(HttpServletRequest request) {		Map<String, Object> statusMap = new HashMap<String, Object>();		Parameter parameter = ParameterUtil.getParameter(request);		try {			String userId = parameter.getData().getString("userId");			String phone = parameter.getData().getString("phone");			String captcha = parameter.getData().getString("captcha");			Users users = null;			Users puser=null;					if (StringUtils.isNotBlank(userId)) {				users = usersDao.findById(Integer.parseInt(userId));//登陆的用户				if (users==null || !users.getIsvalid()) {					 return JsonResponseUtil.getJson(-2, "用户数据异常！");				}				List<Captcha> clist = captchaDao.checkCaptchByPhone(phone, captcha);				if (clist.size()<=0) {					 return JsonResponseUtil.getJson(-2, "验证码错误！");				}else{					//List<Users> phoneUser = null ;					List<Users> phoneUser= usersDao.getUserByName(phone);					if(phoneUser!=null && phoneUser.size()>0){								puser= phoneUser.get(0);						if(puser.getOpenId()==null || "".equals(puser.getOpenId())){							puser.setOpenId(users.getOpenId());							puser.setUnionId(users.getUnionId());							users.setIsvalid(false);							if(users.getMoney()>0){								double money =puser.getMoney()==null?0:puser.getMoney();								puser.setMoney(CalcUtil.add(money, users.getMoney()));																								CashmoneyRecord causeMoneyRecord=new CashmoneyRecord();								causeMoneyRecord.setUsersByUserId(puser);								causeMoneyRecord.setBeforeMoney(money);								causeMoneyRecord.setMoney(users.getMoney());																double sum=CalcUtil.add(users.getMoney(),money,2 );								causeMoneyRecord.setAfterMoney(sum);																causeMoneyRecord.setRemark("账号合并，金额累加");								causeMoneyRecord.setIsValid(true);								causeMoneyRecord.setCreateTime(new Timestamp(new Date().getTime()));								causeMoneyRecord.setUsersByFromUsers(users);								causeMoneyRecord.setType(1);								cashmoneyRecordDao.save(causeMoneyRecord);							}						}else{							return JsonResponseUtil.getJson(-2, "已绑定有第三方账号！不能重复绑定！");						}																	}else{						users.setName(phone);						users.setPhone(phone);					}															usersDao.saveOrUpdate(users);					if(puser!=null){						userId=puser.getId()+"";						usersDao.saveOrUpdate(puser);					}				}							}						Map<String ,String> datamap= new HashMap<String ,String>();						datamap.put("usersId", userId);			statusMap.put("data", datamap);			statusMap.put("status", 1);			statusMap.put("message","绑定手机号成功！");		} catch (Exception e) {			statusMap.put("status", -1);			statusMap.put("message","绑定手机号失败！");			e.printStackTrace();		}		return statusMap;	}	@Override	public Map<String, Object> group(HttpServletRequest request,HttpServletResponse response) {		Parameter parameter = ParameterUtil.getParameter(request);		Map<String,Object> dataMap = new HashMap<String,Object>();    		if(parameter == null){    		return JsonResponseUtil.getJson(-0x02, "参数data不是合法的json字符串");    	}    	//判断app版本号    	String v = parameter.getAppVersion();		String version = "";		//判断APP版本号		char[] charArray = v.toCharArray();		for (int i = 0; i < charArray.length; i++) {			if(".".equals(String.valueOf(charArray[i]))){				continue;			}			 version+=charArray[i];		}    	String userId = parameter.getUserId();    	QueryModel queryModel = new QueryModel();    	queryModel.clearQuery();    	queryModel.combPreEquals("users.id",Integer.parseInt(userId),"userId");    	queryModel.combPreEquals("isValid", true);				List<ItalkGroupMember> italkList = dateBaseDAO.findLists(ItalkGroupMember.class,queryModel);    	List<Map<String,Object>> italks = new ArrayList();    	Map<String, Object> map = new HashMap<String, Object>();    	for(ItalkGroupMember g :italkList ){    		map.put("group", g.getItalkGroup().getGroupId());    		map.put("type", g.getType());    		map.put("createTime", g.getCreateTime());    		map.put("isValid", g.getIsValid());    		map.put("userid", g.getUsers().getId());    		italks.add(map);    	}    	Map<String, Object> statusMap = new HashMap<String, Object>();    	    	dataMap.put("groupMembers", italks);    	statusMap.put("data", dataMap);		statusMap.put("status", 1);		statusMap.put("message","成功！");		return statusMap;	}	@Override	public Map<String, Object> getJoinGroup(HttpServletRequest request,			HttpServletResponse response) {				return null;	}	@Override	public Map<String, Object> wxusers(HttpServletRequest request,			HttpServletResponse response) {		Parameter parameter = ParameterUtil.getParameter(request);		Map<String,Object> statusMap = new HashMap<String,Object>();				try {			String openId = parameter.getData().getString("openId");			String unionId = parameter.getData().getString("unionId");						QueryModel model = new QueryModel();			model.combPreEquals("unionId", unionId);			model.combPreEquals("isValid", true);			Users user= (Users) dateBaseDAO.findOne(Users.class, model);						if(user != null){				//不等于空的就更新这个用户								statusMap.put("updateUser", user);			}else{  //没有这个用户的,				Users userNew = createUserByOpenId(openId,unionId);				statusMap.put("createUser", userNew);			}		} catch (Exception e) {			e.getMessage();		}						return statusMap;	}	@Override	public Map<String, Object> userBySignCalc(HttpServletRequest request,			HttpServletResponse response) {						String userId = "";		Integer zoneId = 0 ;		String xcx = request.getParameter("xcx");		if(xcx != null){			userId = request.getParameter("userId");			String lats = request.getParameter("lat");			String lngs = request.getParameter("lng");						Map<String,Double> map = CityUtil.map_tx2bd(Double.valueOf(lats), Double.valueOf(lngs));	    				Double lat = map.get("lat");			Double lng = map.get("lng");			Map<String,Object> result = (Map<String, Object>) UrlUtil.getBaiduMapToXCX(String.valueOf(lat), String.valueOf(lng)).get("addressComponent");			String city = result.get("city")==null?"":result.get("city").toString(); //城市			QueryModel model = new QueryModel();			model.clearQuery();			model.combPreLike("name", city);			List<ProvinceEnum> enumList = dateBaseDAO.findLists(ProvinceEnum.class, model);			ProvinceEnum enums = new ProvinceEnum();			if(enumList!=null && enumList.size()>0){				enums = enumList.get(0);				zoneId = enums.getId();			}		}else{						Parameter parameter = ParameterUtil.getParameter(request);						if(parameter == null){				return JsonResponseUtil.getJson(-0x02, "参数data不是合法的json字符串");			}			userId = parameter.getUserId();			zoneId = Integer.valueOf(parameter.getZoneId());		}						Map<String,Object> statusMap = new HashMap<String,Object>();		Map<String,Object> dataMap = new HashMap<String,Object>();								Users user = usersDao.findById(Integer.valueOf(userId));		if(user == null){			return JsonResponseUtil.getJson(-0x02, "您未登录,请先进行登录!");		}				GameActivity game = gameActivityService.getZoneId(zoneId);		if(game==null){			return JsonResponseUtil.getJson(-0x02, "获取签到信息异常,请刷新");		}		String[]array1 = game.getOneScore().split("-");		Integer days = user.getContinueDays();		Integer dayScore = Integer.valueOf(array1[days]); //第几天签到 获得的积分				try {			int day = 0;			if(user.getSignCalcTime()!=null){				if(DateUtil.belongCalendar(DateUtil.transToDate(user.getSignCalcTime()), DateUtil.getDayStart(new Date()), DateUtil.getDayEnd(new Date())) ){					dataMap.put("isTodaySigned", true);					statusMap.put("status", -2);					statusMap.put("message","今天已经签到!明天再签到吧!");					return statusMap;				}				 Date aday = DateUtil.addDay2Date(-1, new Date());				if(DateUtil.belongCalendar(DateUtil.transToDate(user.getSignCalcTime()), DateUtil.getDayStart(aday), DateUtil.getDayEnd(aday))){					user.setContinueDays(user.getContinueDays()+1);				}else{					user.setContinueDays(1);				}								//day = (Math.abs((int) user.getSignCalcTime().getTime() - (int) new Date().getTime()) / 3600000) / 24;//			 	day =DateUtil.getDiffDays(sdf.parse(sdf.format(user.getSignCalcTime())), sdf.parse(sdf.format(new Date())));				// DateUtil.getTrueDays(user.getSignCalcTime(), timestamp);				//前一天是否有签到,//				if(day == 1){ //					user.setContinueDays(user.getContinueDays()+1);//				}else{//					user.setContinueDays(1);//				}			}else{				user.setContinueDays(1);			}			Timestamp timestamp = new Timestamp(System.currentTimeMillis());			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");			SignCalc signCalc = new SignCalc();			signCalc.setCreateTime(timestamp);			signCalc.setSignCalcTime(timestamp);			signCalc.setUsers(user);			signCalc.setReward(dayScore);//签到奖励			signCalc.setSignDatil("签到成功获得积分"+dayScore);			signCalcDao.save(signCalc);						Scorerecords score = new Scorerecords();			score.setCreatetime(timestamp);			score.setBeforeScore(user.getScore());			score.setIsvalid(true);			score.setUsers(user);			score.setAdminuserId(1);			score.setType(17);			score.setAfterScore(user.getScore()+dayScore);			score.setScore(dayScore);			score.setRemark("签到获得积分");			score.setScoretype("签到获得积分");			user.setScore((user.getScore()==null?0:user.getScore())+dayScore);			//判断是否签到有8天以上 		/*	if(user.getContinueDays() == 8){				score.setAfterScore(user.getScore()+10);				score.setScore(10);				score.setRemark("连续签到8天,获得10积分,签到天数清零");				score.setScoretype("连续签到8天,获得10积分,签到天数清零");				user.setScore((user.getScore()==null?0:user.getScore())+10);			}else{				score.setAfterScore(user.getScore()+1);				score.setScore(1);				score.setRemark("今天签到成功,获得1积分");				score.setScoretype("今天签到成功,获得1积分");				user.setScore((user.getScore()==null?0:user.getScore())+1);			}			*/			user.setSignCalcTime(timestamp);			user.setIsSignRemaid(0);//>3 标记今天不提醒用户签到						scorerecordsDao.save(score);			userDao.update(user);			scoreMarkService.appointByScore(user, dayScore,1,game);									if(user.getUnionId() != null && user.getUnionId() != ""){				//发送获得积分				String param1 = "unionId="+user.getUnionId()+"&linkType=1&integral="+dayScore;				UrlUtil.sendGzhMsg(6, param1);				//发送提醒签到				String param2 = "unionId="+user.getUnionId()+"&linkType=2&day="+(8-user.getContinueDays());				UrlUtil.sendGzhMsg(4, param2);			}									statusMap.put("status", 1);			statusMap.put("message","请求成功");		} catch (Exception e) {			// TODO Auto-generated catch block			e.printStackTrace();			statusMap.put("status", -1);			statusMap.put("message","请求失败");		}		statusMap.put("data", dataMap);						return statusMap;	}			@Override	public Map<String, Object> signCalc(HttpServletRequest request,			HttpServletResponse response) {		String xcx = request.getParameter("xcx");		Integer zoneId = 0;		String userId = "";		String basePath = request.getServletContext().getAttribute("RESOURCE_LOCAL_URL").toString();		if(xcx != null){			userId = request.getParameter("userId");			String lats = request.getParameter("lat");			String lngs = request.getParameter("lng");			Map<String,Double> map = CityUtil.map_tx2bd(Double.valueOf(lats), Double.valueOf(lngs));	    				Double lat = map.get("lat");			Double lng = map.get("lng");			Map<String,Object> result = (Map<String, Object>) UrlUtil.getBaiduMapToXCX(String.valueOf(lat), String.valueOf(lng)).get("addressComponent");			String city = result.get("city")==null?"":result.get("city").toString(); //城市			QueryModel model = new QueryModel();			model.clearQuery();			model.combPreLike("name", city);			List<ProvinceEnum> enumList = dateBaseDAO.findLists(ProvinceEnum.class, model);			ProvinceEnum enums = new ProvinceEnum();			if(enumList!=null && enumList.size()>0){				enums = enumList.get(0);				zoneId = enums.getId();			}					}else{						Parameter parameter = ParameterUtil.getParameter(request);						if(parameter == null){				return JsonResponseUtil.getJson(-0x02, "参数data不是合法的json字符串");			}			//获取该地区是否签到活动, 按照zongId 找到对应代理,然后然后按照时间排序取第一个			zoneId = Integer.valueOf(parameter.getZoneId());			userId = parameter.getUserId();		}				Map<String,Object> statusMap = new HashMap<String,Object>();		Map<String,Object> dataMap = new HashMap<String,Object>();					GameActivity game = gameActivityService.getZoneId(zoneId);		if(game.getId()==null){			return JsonResponseUtil.getJson(-0x02, "获取签到信息失败");		}				//获取签到图		List<Map<String,Object>> prizeImgs = new ArrayList<Map<String,Object>>();		String content = game.getContent();		String oneScore = game.getOneScore();		String[]array1 = oneScore.split("-");		JSONArray array = new JSONArray();		if(StringUtil.hasLength(content)&&content.startsWith("[")){			array = JSONArray.parseArray(content);		}else{			array = null;		}				for(int i=0;i<array1.length;i++){			Map<String,Object> map = new HashMap<String,Object>();								if(array != null && i<array.size()){					String a = array.getJSONObject(i).getString("imgUrl");					content = basePath  + a;  //da					map.put("image", content);				}else{					map.put("image", "");				}				map.put("info", "签到可获得"+array1[i]+"积分");				prizeImgs.add(map);					}				//获取广告图		List<String> advertImgs = new ArrayList<String>();		String coverPic = game.getCoverPics();		if(StringUtil.hasLength(coverPic)&&coverPic.startsWith("[")){			JSONArray array2 = JSONArray.parseArray(coverPic);			if(array.size()>0){				for(int i=0;i<array2.size();i++){					String a = array2.getJSONObject(i).getString("imgUrl");					coverPic = basePath  + a;  //da					advertImgs.add(coverPic);				}			}		}else{			coverPic="";		}				dataMap.put("prizeImgs", prizeImgs);		dataMap.put("advertImgs", advertImgs);				Users user = usersDao.findById(Integer.valueOf(userId));		if(user == null){			return JsonResponseUtil.getJson(-0x02, "您未登录,请先进行登录!");		}		try {			if(user.getSignCalcTime()!=null){				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");				Date aday = DateUtil.addDay2Date(-1, new Date());				if(DateUtil.belongCalendar(DateUtil.transToDate(user.getSignCalcTime()), DateUtil.getDayStart(new Date()), DateUtil.getDayEnd(new Date())) ){					dataMap.put("isTodaySigned", true);				}else{					if(!DateUtil.belongCalendar(DateUtil.transToDate(user.getSignCalcTime()), DateUtil.getDayStart(aday), DateUtil.getDayEnd(aday))							&& !DateUtil.belongCalendar(DateUtil.transToDate(user.getSignCalcTime()), DateUtil.getDayStart(new Date()), DateUtil.getDayEnd(new Date())) ){						user.setContinueDays(0);					}										dataMap.put("isTodaySigned", false);				}			}else{				user.setContinueDays(0);				dataMap.put("isTodaySigned", false);			}			int continueDays  = 0;			if(user.getContinueDays()==null){				user.setContinueDays(0);			}else{				continueDays = user.getContinueDays();			}			userDao.saveOrUpdate(user);						if(continueDays!=0 && continueDays%8 == 0){				dataMap.put("signInDay", continueDays);				boolean day = DateUtil.belongCalendar(DateUtil.transToDate(user.getSignCalcTime()), DateUtil.getDayStart(new Date()), DateUtil.getDayEnd(new Date())) ;				if(day){					dataMap.put("signInDay", continueDays);				}else{					user.setContinueDays(0);					userDao.saveOrUpdate(user);					dataMap.put("signInDay", 0);				}			}else{								dataMap.put("signInDay", continueDays);			}			dataMap.put("tips", game.getDetail());		} catch (Exception e) {			// TODO Auto-generated catch block			e.printStackTrace();			return JsonResponseUtil.getJson(-0x02, "请求出错");		}				statusMap.put("data", dataMap);		statusMap.put("status", 1);		statusMap.put("message","请求成功");				return statusMap;	}	@Override	public Map<String, Object> getPrizeInfo(HttpServletRequest request,			HttpServletResponse response) {		Parameter parameter = ParameterUtil.getParameter(request);		if(parameter == null){			return JsonResponseUtil.getJson(-0x02, "参数data不是合法的json字符串");		}				String basePath = request.getServletContext().getAttribute("RESOURCE_LOCAL_URL").toString();		String userId = parameter.getUserId();		String v = parameter.getAppVersion();		String os = parameter.getOs();		String version = "";        char[] charArray = v.toCharArray();    	for (int i = 0; i < charArray.length; i++) {			if(".".equals(String.valueOf(charArray[i]))){				continue;			}			   version+=charArray[i];		}    			Map<String,Object> statusMap = new HashMap<String,Object>();		Map<String,Object> dataMap = new HashMap<String,Object>();		Users user = usersDao.findById(Integer.valueOf(userId));				if(user == null){			return JsonResponseUtil.getJson(-0x02, "您未登录,请先进行登录!");		}		try {			UserDarw gameDarw = userDarwDao.findById(1);//查询这个游戏的相关内容			QueryModel model = new QueryModel();			model.clearQuery();			model.combPreEquals("isvalid", true);			model.combPreEquals("users.id", user.getId(),"userId");			List<UserDarw> userDarw = dateBaseDAO.findLists(UserDarw.class, model);			UserDarw darw = null;			if(userDarw == null || userDarw.size()==0){ //存在的				darw = new UserDarw();				darw.setSurplus(gameDarw.getDrawNum()); //剩余次数				darw.setIsvalid(true); 				darw.setUsers(user);				userDarwDao.save(darw);				dataMap.put("leftCount", gameDarw.getDrawNum());//			}else{				darw = userDarw.get(0);				dataMap.put("leftCount", (darw.getSurplus())<=0?0:(darw.getSurplus()));//			}			//获取八个奖项			model.clearQuery();			model.combPreEquals("isValid", true);			model.combPreEquals("commodityType.id", 266,"gameType");			List<GameActivity> list = dateBaseDAO.findLists(GameActivity.class, model);			List<String> picList = new ArrayList<String>();			if(list != null && list.size()>0){				for(GameActivity g: list){					String covers = g.getContent();					if(g.getContent()!=null){						covers = basePath + covers.replaceAll("\\\\", "/");					}else{						covers=basePath+"cashshop_type/1/nomal/3419590117090011000.png";					}					picList.add(covers);				}			}else{				return JsonResponseUtil.getJson(-0x02, "没有查询到奖品");			}			if(picList.size()<8){				for(int i=0;i<(8-picList.size());i++){					picList.add(basePath+StringUtil.darwXXCY);									}			}						//广告轮播			List<String> coverPicList = new ArrayList<String>();			String coverPic = gameDarw.getCoverPic();			if(StringUtil.hasLength(coverPic)&&coverPic.startsWith("[")){				JSONArray array = JSONArray.parseArray(coverPic);				if(array.size()>0){					for(int i=0;i<array.size();i++){						String a = array.getJSONObject(i).getString("imgUrl");						coverPic = basePath + "/" + a;  						coverPicList.add(coverPic);					}				}							}else{				coverPic=basePath + "cashshop_type/1/nomal/3419590117090011000.png";				coverPicList.add(coverPic);			}			dataMap.put("defaultImgs", picList);			dataMap.put("consumeScore", gameDarw.getScore());			dataMap.put("cardCount", 8);//			if(Integer.valueOf(version)>=1108 && "IOS".equals(os)){//				List rolls = new ArrayList();//				dataMap.put("rolls", rolls);//				dataMap.put("pic",coverPicList);//			}else 							if(Integer.valueOf(version)>=105){				dataMap.put("pic",coverPicList);				dataMap.put("rolls", reGoodsOfLockMallService.rolls());			}else{				dataMap.put("pic",basePath + "upload-res/gameImg/47/nomal/3342361125113302700.jpg");				dataMap.put("rolls", reGoodsOfLockMallService.rolls());				}			dataMap.put("details", gameDarw.getDetails());																	} catch (Exception e) {			// TODO Auto-generated catch block			e.printStackTrace();			return JsonResponseUtil.getJson(-0x02, "请求出错");		}		statusMap.put("data", dataMap);		statusMap.put("status", 1);		statusMap.put("message","请求成功");		return statusMap;	}		public int getPrizeIndex(List<GameActivity> prizes) {		DecimalFormat df = new DecimalFormat("######0.00"); 		int random = -1;		try{ 			//计算总权重 			double sumWeight = 0; 			for(GameActivity p : prizes){ 				sumWeight += p.getChanceScore();				}			//产生随机数			double randomNumber;			randomNumber = Math.random(); 			//根据随机数在所有奖品分布的区域并确定所抽奖品 			double d1 = 0; 			double d2 = 0; 			for(int i=0;i<prizes.size();i++){ 				d2 += Double.parseDouble(String.valueOf(prizes.get(i).getChanceScore()))/sumWeight; 				if(i==0){ 					d1 = 0; 					}else{ 						d1 +=Double.parseDouble(String.valueOf(prizes.get(i-1).getChanceScore()))/sumWeight; 						} 				if(randomNumber >= d1 && randomNumber <= d2){ 					random = i; 					break; 				} 						} 			}catch(Exception e){ 				System.out.println("生成抽奖随机数出错，出错原因：" +e.getMessage());				} 		return random; 			}					@Override	public Map<String, Object> openCards_1(HttpServletRequest request,			HttpServletResponse response) {		Parameter parameter = ParameterUtil.getParameter(request);		if(parameter == null){			return JsonResponseUtil.getJson(-0x02, "参数data不是合法的json字符串");		}		String order = parameter.getData().getString("order");		String userId = parameter.getUserId();		String basePath = request.getServletContext().getAttribute("RESOURCE_LOCAL_URL").toString();				Map<String,Object> statusMap = new HashMap<String,Object>();		Map<String,Object> dataMap = new HashMap<String,Object>();		Users user = usersDao.findById(Integer.valueOf(userId));				if(user == null){			return JsonResponseUtil.getJson(-0x02, "您未登录,请先进行登录!");		}		/*try {*/			UserDarw gameDarw = userDarwDao.findById(1);//查询这个游戏的相关内容			if(user.getScore()<gameDarw.getScore()){				return JsonResponseUtil.getJson(-0x02, "积分不足");			}			QueryModel model = new QueryModel();			model.clearQuery();			model.combPreEquals("isvalid", true);			model.combPreEquals("users.id", user.getId(),"userId");			List<UserDarw> userDarws = dateBaseDAO.findLists(UserDarw.class, model);			if(userDarws == null || userDarws.size()<0){				return JsonResponseUtil.getJson(-0x02, "没有找到相关信息,重新登录");			}			if(userDarws.get(0).getSurplus()==0){				return JsonResponseUtil.getJson(-0x03, "今天抽奖次数已经用完!");			}			UserDarw userDarw = userDarws.get(0);			userDarw.setSurplus(userDarw.getSurplus()-1);									//用户积分减少			scoreMarkService.saveScoreToform_1(user, gameDarw.getScore(), null, 2 ,null);						user.setScore(user.getScore()-gameDarw.getScore()); 			usersDao.update(user);			//积分交易记录			Scorerecords scorerecords = new Scorerecords();			scorerecords.setCreatetime(new Timestamp(System.currentTimeMillis()));			scorerecords.setIsvalid(true);			scorerecords.setAfterScore(user.getScore()-gameDarw.getScore());			scorerecords.setScore(gameDarw.getScore());			scorerecords.setBeforeScore(user.getScore());			scorerecords.setUsers(user);			scorerecords.setType(14);			scorerecords.setRemark("参与幸运抽奖消耗"+gameDarw.getScore()+"积分");			scorerecords.setAdminuserId(1);			scorerecords.setScoretype("参与活动");			scorerecordsDao.save(scorerecords);			//获取八个奖项			model.clearQuery();			model.combPreEquals("isValid", true);			model.setOrder("chanceScore ASC");			model.combPreEquals("commodityType.id", 266,"gameType");			List<GameActivity> list = dateBaseDAO.findLists(GameActivity.class, model);						int selected = getPrizeIndex(list); //得到概率大的奖品, 			GameActivity select = list.get(selected);			List<GameActivity> listCopy = new ArrayList<GameActivity>();			listCopy.addAll(list);			Collections.shuffle(listCopy);			listCopy.set(Integer.valueOf(order)-1, select);									List<Map<String,Object>> cardsResult = new ArrayList<Map<String,Object>>();			//中奖记录 			for(int i=0;i<listCopy.size();i++){				Map<String,Object> map = new HashMap<String,Object>();								map.put("id", listCopy.get(i).getId());				int type = listCopy.get(i).getDrawYlassify().getId();					if(type == 18){ // 奖品积分的						map.put("image",basePath + StringUtil.darwScore);						map.put("name", listCopy.get(i).getScore()+"积分");					}else if(type == 20){ //谢谢惠顾						map.put("image", basePath + StringUtil.darwXXCY);						map.put("name", listCopy.get(i).getDrawYlassify().getName());					}else if(type == 19){ //奖品是商品的						//为多图添加前序   						String covers = listCopy.get(i).getReGoodsOfSellerMall().getSnapshotGoods().getCoverPic();						if(StringUtil.hasLength(covers)&&covers.startsWith("[")){							JSONArray array = JSONArray.parseArray(covers);							if(array.size()>0){								String a = array.getJSONObject(0).getString("imgUrl");								covers = basePath  + a;  							}						}else{							covers="";						}						map.put("image", covers);						map.put("name", listCopy.get(i).getReGoodsOfSellerMall().getSnapshotGoods().getName());					}				cardsResult.add(map);			}									//保存中奖记录			UserDarwRecord userDarwRecord = new UserDarwRecord();			userDarwRecord.setCreateTime(new Timestamp(System.currentTimeMillis()));			userDarwRecord.setGameActivity(select);			userDarwRecord.setUsers(user);			userDarwRecord.setIsvalid(true);			userDarwRecordDao.save(userDarwRecord);			//抽奖相当于购买虚拟商家商品			AdminUser adminUser = adminUserDao.findById(1786); 			double money = CalcUtil.mul(gameDarw.getScore(), 0.16,4);			adminUser.setMoney(CalcUtil.add(money, adminUser.getMoney()));			adminUserDao.saveOrUpdate(adminUser);						AdminuserCashpointRecord smr = new AdminuserCashpointRecord();			smr.setAdminUser(adminUser);			smr.setAfterpoint(adminUser.getMoney());			smr.setBeforepoint(CalcUtil.sub(adminUser.getMoney(), money));			smr.setCashpoint(money);			smr.setIsValid(true);			smr.setType(1);			smr.setIsDeposit(1);			smr.setUsers(user);			smr.setCreateTime(new Timestamp(System.currentTimeMillis()));			smr.setRemark("用户:"+user.getName()+"参加抽奖活动,获得分佣:"+money+"元");						 if(user.getUnionId() != null){				String param = "unionId="+user.getUnionId()+"&linkType=2&price="+money;				UrlUtil.sendGzhMsg(9, param);			}									adminuserCashpointRecordDao.save(smr);						int ify = select.getDrawYlassify().getId();			//翻牌提示			if(ify == 18){ //积分				//处理积分走向				scoreMarkService.appointByScore(user, select.getScore(),2,null);				Scorerecords scores = new Scorerecords();				scores.setCreatetime(new Timestamp(System.currentTimeMillis()));				scores.setIsvalid(true);				scores.setAfterScore(user.getScore()+select.getScore());				scores.setScore(select.getScore());				scores.setBeforeScore(user.getScore());				scores.setUsers(user);				scores.setType(17);				scores.setRemark("参与幸运抽奖获得"+select.getScore()+"积分");				scores.setAdminuserId(1);				scores.setScoretype("参与幸运抽奖活动");				scorerecordsDao.save(scores);				//用户积分增加				user.setScore(user.getScore()+select.getScore()); 				usersDao.update(user);				dataMap.put("info", select.getScore());				if(user.getUnionId() != null){										String unionId = user.getUnionId();					String param = "unionId="+unionId+"&linkType=4&goodsName="+select.getScore()+"积分";					UrlUtil.sendGzhMsg(8, param);				}							}else if(ify == 19){ //商品				dataMap.put("info", "恭喜您抽奖了"+select.getReGoodsOfSellerMall().getSnapshotGoods().getName());				dataMap.put("goodsId", select.getReGoodsOfSellerMall().getGoodsOrder());				if(user.getUnionId() != null){										String unionId = user.getUnionId();					String param = "unionId="+unionId+"&linkType=4&goodsName="+select.getReGoodsOfSellerMall().getSnapshotGoods().getName();					UrlUtil.sendGzhMsg(8, param);				}							}else if(ify == 20){ //谢谢参与				dataMap.put("info", "再接再厉!");			}			dataMap.put("cardsResult", cardsResult);			dataMap.put("leftCount", userDarw.getSurplus());			userDarwDao.saveOrUpdate(userDarw);										/*} catch (Exception e) {			// TODO Auto-generated catch block			e.printStackTrace();			return JsonResponseUtil.getJson(-0x02, "请求出错");		}*/		statusMap.put("data", dataMap);		statusMap.put("status", 1);		statusMap.put("message","请求成功");		return statusMap;	}	class saveUserDarw  implements  Runnable{				public Users user;				public GameActivity gameActivity;				 		@Override		public void run() {			UserDarwRecord userDarwRecord = new UserDarwRecord();			userDarwRecord.setCreateTime(new Timestamp(System.currentTimeMillis()));			userDarwRecord.setGameActivity(gameActivity);			userDarwRecord.setUsers(user);			userDarwRecord.setIsvalid(true);			userDarwRecordDao.save(userDarwRecord);								}				}	@Override	public Map<String, Object> getRecordList(HttpServletRequest request,			HttpServletResponse response) {		Parameter parameter = ParameterUtil.getParameter(request);		if(parameter == null){			return JsonResponseUtil.getJson(-0x02, "参数data不是合法的json字符串");		}				String userId = parameter.getUserId();		Integer pageIndex = parameter.getData().getInteger("pageIndex");		Map<String,Object> statusMap = new HashMap<String,Object>();		Map<String,Object> dataMap = new HashMap<String,Object>();		List<Map<String,Object>> recordList = new ArrayList<Map<String,Object>>();		try {			Users user = usersDao.findById(Integer.valueOf(userId));			if(user == null){				return JsonResponseUtil.getJson(-0x02, "您未登录,请先进行登录");			}			if(user.getScore()<=0){				return JsonResponseUtil.getJson(-0x02, "用户积分不足");			}			QueryModel model = new QueryModel();			model.clearQuery();			model.combPreEquals("isValid", true);			model.combPreEquals("users.id", user.getId(),"userId");											int	count = dateBaseDAO.findCount(UserDarwRecord.class, model);			int pageItemCount = 20;			int totalPage = (count % pageItemCount) > 0 ? ((count / pageItemCount) + 1)					: (count / pageItemCount);			int start = (pageIndex - 1) * pageItemCount;						//查询结果；			List<UserDarwRecord> darwRecords = dateBaseDAO.findPageList(UserDarwRecord.class, model,start,pageItemCount);			for(UserDarwRecord d:darwRecords ){				Map<String,Object> map = new HashMap<String,Object>();				map.put("prizeTime",DateUtil.formatDate("yyyy-MM-dd HH:mm",d.getCreateTime()));				if(d.getGameActivity().getDrawYlassify().getId()==18){ //积分的					map.put("prizeContent", "恭喜您抽中"+d.getGameActivity().getScore()+"积分");									}else if(d.getGameActivity().getDrawYlassify().getId()==19){					map.put("prizeContent", "恭喜您抽中"+d.getGameActivity().getReGoodsOfSellerMall().getSnapshotGoods().getName());				}				recordList.add(map);			}			dataMap.put("recordList", recordList);			dataMap.put("pageSize", totalPage);			return JsonResponseUtil.getJson(0x01, "请求成功",dataMap);		} catch (NumberFormatException e) {			// TODO Auto-generated catch block			e.printStackTrace();			return JsonResponseUtil.getJson(-0x02, "请求出错");		}					}	@Override	public Map<String, Object> profit(Integer id ,HttpServletRequest request,			HttpServletResponse response) {		Map<String,Object> dataMap = new HashMap<String,Object>();		Users user = usersDao.findById(id);		if(user == null){			return JsonResponseUtil.getJson(-0x02, "您未登录,请先进行登录");		}				String basePath = "";		if(user.getLevel()!=65){ //不是联盟合伙人			return JsonResponseUtil.getJson(-0x02, "您还不是联盟合伙人,升级合伙人请联系您的代理!");		}		QueryModel model = new QueryModel();		model.clearQuery();		model.combPreEquals("isValid", true);		model.combPreEquals("phone", user.getPhone());		model.combPreEquals("users.id", user.getId(),"fansId"); //对应联盟合伙人的fansId		List<AdminUser> adminUsers = dateBaseDAO.findLists(AdminUser.class, model);		AdminUser adminUser = null ;		if(adminUsers !=null && adminUsers.size()>0){			adminUser = adminUsers.get(0);		}else{			return JsonResponseUtil.getJson(-0x02, "您还不是联盟合伙人,升级合伙人请联系您的代理!");		}				//查询联盟合伙人上级, 也就是代理, 代理对应的 总奖金, 总积分		AdminUser adminUserdl = adminUser.getParentAdminUser();		model.clearQuery();		model.combPreEquals("adminUser.id", adminUserdl.getId(),"adminUserId");		double maid = dateBaseDAO.findSum(Bonus.class, "maid", model); //奖金池 总奖金						model.combCondition(" DATEDIFF(createTime,NOW())=0");		double todayMaid = dateBaseDAO.findSum(Bonus.class, "maid", model); //今天总奖金				double maidhhr = CalcUtil.mul(CalcUtil.mul(maid, 0.75, 6), adminUser.getLmUnion(),6); //合伙人可获得分佣,		double todayMaidhhr = CalcUtil.mul(CalcUtil.mul(todayMaid, 0.75, 6), adminUser.getLmUnion(), 6); //合伙人今天可获得分佣,		//		model.clearQuery();//		model.combPreEquals("isValid", true);//		int scoreSum = dateBaseDAO.findCount(ScoreMark.class, model); //总积分 总部名下的可用积分				model.clearQuery();		model.combPreEquals("isValid", true);		model.combPreEquals("adminUser.id", adminUserdl.getId(),"adminuserId");		model.combIsNull("adminUserSeller.id");		int scoreCount = dateBaseDAO.findCount(DLScoreMark.class, model); // 代理池总积分(可用积分)								//分佣记录		model.clearQuery();		model.combEquals("isValid", 1);		model.combEquals("type", 2); //分佣记录		model.combPreEquals("usersByUserId.id", user.getId(), "userId");		double yjsMoney = dateBaseDAO.findSum(CashmoneyRecord.class, "money", model); //已结算		List<CashmoneyRecord> getMoneys = dateBaseDAO.findLists(CashmoneyRecord.class, model);//结算列表						double money   = CalcUtil.sub(maidhhr, yjsMoney); // 可结算				//dateBaseDAO.findSum(GetmoneyRecord.class, "money", );				//判断该用户是否关注了公众号, 关注了提现可用,没有光柱提示先关注		if(user.getGzhOpenId()==null){			request.setAttribute("gzhOpenId",0);			request.setAttribute("gzhImg",StringUtil.gzhImg);//给他公众号的二维码		}else{			request.setAttribute("gzhOpenId",1);		}				request.setAttribute("maid", CalcUtil.mul(maid, 0.75, 6));//群体总		request.setAttribute("todayMaid",CalcUtil.mul(todayMaid, 0.75, 6));		request.setAttribute("maidhhr", maidhhr);//合伙人分佣		request.setAttribute("todayMaidhhr", todayMaidhhr);//今天合伙人分佣		request.setAttribute("money",money<0?0:money);		request.setAttribute("scoreSum",adminUserdl.getScoreMax()); 		request.setAttribute("scoreCount",scoreCount);//可用积分		request.setAttribute("getMoneys",getMoneys);		request.setAttribute("yjsMoney", yjsMoney);		request.setAttribute("adminUserId",adminUser.getId());				return dataMap;	}			@Override	public String getCheckPhone(Integer id, HttpServletRequest request,			HttpServletResponse response) {		Map<String, Object> statusMap = new HashMap<String, Object>();		try {					Users u = usersDao.findById(id);			if(u.getId().toString().equals(u.getName())){				return "-1";			}			statusMap.put("status", 1);			statusMap.put("message", "请求成功");		} catch (NumberFormatException e) {			e.printStackTrace();			statusMap.put("status", -1);			statusMap.put("message", "请求失败");			return "-2";		}		return "1";	}	@Override	public Map<String,Object> webWithdrawals(Integer id,HttpServletRequest request,HttpServletResponse response) {		Map<String, Object> statusMap = new HashMap<String, Object>();		try {			AdminUser adminUser = adminUserDao.findById(id);			Users user = adminUser.getUsers();			String money = request.getParameter("money");			double moneyd=Double.parseDouble(money);			double userMoney = user.getMoney()==null?0:user.getMoney();			CashmoneyRecord crc = new CashmoneyRecord();			crc.setAfterMoney(CalcUtil.add(userMoney,moneyd));			crc.setBeforeMoney(user.getMoney());			crc.setCreateTime(new java.sql.Timestamp(System.currentTimeMillis()));			crc.setIsValid(true);			crc.setType(2);			crc.setRemark("结算合伙人分佣"+moneyd+"元");			crc.setMoney(moneyd);			crc.setUsersByFromUsers(user);			crc.setUsersByUserId(user);			cashmoneyRecordDao.save(crc);						user.setMoney(CalcUtil.add(userMoney,moneyd));						usersDao.update(user);									statusMap.put("id",user.getId());			statusMap.put("status", 1);			statusMap.put("message", "申请结算成功");		} catch (Exception e) {			e.printStackTrace();			statusMap.put("status", -2);			statusMap.put("message", "结算失败");			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();		}		return statusMap;					}	@Override	public int doCash(Integer id,HttpServletRequest request,			HttpServletResponse response) {		AdminUser adminUser = adminUserDao.findById(id);						request.setAttribute("id",id);		request.setAttribute("phone",adminUser.getPhone());		return 0;	}		@Override	public Map<String, Object> xcxLogin(HttpServletResponse response,			HttpServletRequest request) {		String code = request.getParameter("code");		String encryptedData = request.getParameter("encryptedData");		String iv = request.getParameter("iv");		String invitecode = request.getParameter("invitecode");		invitecode = StringUtil.hasValue(invitecode);		Map<String, Object> doPostMap;		Users user = null;		 Map<String,Object> statusMap = new HashMap<String,Object>();		try {			String url = "https://api.weixin.qq.com/sns/jscode2session";			Map<String,String> paramMap = new HashMap<String,String>();			paramMap.put("appid", WeixinConfig.xcx_appid);			paramMap.put("secret", WeixinConfig.xcx_app_secret);			paramMap.put("js_code", code);			paramMap.put("grant_type", "authorization_code");						String doPost = SSLClient.doPost(url, paramMap, "UTF-8");			doPostMap = (Map<String, Object>)JSON.parse(doPost);			if(doPostMap.get("errcode")!=null && !"0".equals(doPostMap.get("errcode").toString())){				return JsonResponseUtil.getJson(Integer.valueOf(doPostMap.get("errcode").toString()), doPostMap.get("errMsg").toString());			}			String openId = doPostMap.get("openid").toString();			String sessionKey = doPostMap.get("session_key").toString();			String unionId = doPostMap.get("unionid")==null ?"":doPostMap.get("unionid").toString();			String result = AESUtil.decrypt(WeixinConfig.xcx_appid, encryptedData, sessionKey, iv);			JSONObject userInfoJSON = com.alibaba.fastjson.JSON.parseObject(result);			if(userInfoJSON!=null){				//这步应该set进实体类				Map<String,Object> userInfo = new HashMap<String,Object>();				userInfo.put("openId", userInfoJSON.get("openId"));				userInfo.put("nickName", userInfoJSON.get("nickName"));				userInfo.put("gender", userInfoJSON.get("gender"));				userInfo.put("city", userInfoJSON.get("city"));				userInfo.put("province", userInfoJSON.get("province"));				userInfo.put("country", userInfoJSON.get("country"));				userInfo.put("avatarUrl", userInfoJSON.get("avatarUrl"));				// 解密unionId & openId;				if (userInfoJSON.get("unionId")!=null) {					userInfo.put("unionId", userInfoJSON.get("unionId"));				}				//然后根据openid去数据库判断有没有该用户信息，若没有则存入数据库，有则返回用户数据				user = loginByThirdMethod(openId, unionId, "USERS");				//微信unionId 				if(user.getUnionId()==null || user.getUnionId()==""){					user.setUnionId(unionId);				}				user.setHeadimage(userInfo.get("avatarUrl").toString());				//性别				user.setSex(Integer.valueOf(userInfo.get("gender").toString()));				String a = StringUtil.filterEmoji(userInfo.get("nickName").toString());				user.setRealname(a);				if((user.getInvitecode() == null || user.getInvitecode() == "" ) && !"undefined".equals(invitecode)){										user.setInvitecode(invitecode);				}				user.setOpenId(userInfo.get("openId").toString());				//user.setXcxOpenId(userInfo.get("openId").toString());				usersDao.saveOrUpdate(user);				Map<String,Object> map = isSeller(user.getId());				statusMap.put("isPaiedForStore", map.get("isPaiedForStore"));				statusMap.put("verifyStatus", map.get("verifyStatus"));				statusMap.put("openStoreMoney", "1");				statusMap.put("myCode", user.getMycode());				statusMap.put("user", user.getId());			    statusMap.put("doPostMap", doPostMap);			    statusMap.put("status", 2);				statusMap.put("message", "登陆成功");			}else{				statusMap.put("status", 2);				statusMap.put("message", "没有获取到信息");			}					     		} catch (NumberFormatException e) {			// TODO Auto-generated catch block			e.printStackTrace();			statusMap.put("status", -2);			statusMap.put("message", "请求异常");		}       		return statusMap;	}	/**	 * @param openId	 * @param unionId	 * @return	 */	private Users loginByOpenId(String openId, String unionId) {		Users user = userDao.findByOpenId(openId);		if(user == null){			user = userDao.findByUnionId(unionId);		}		if(user == null){			user = createUserByOpenId(openId ,unionId);//如果没有，就创建用户；		}		return user;	}		@Override	public Map<String, Object> getBounsRealTime(HttpServletRequest request,			HttpServletResponse response,Integer type) {				Map<String,Object> statusMap = new HashMap<String,Object>();		Map<String,Object> dataMap = new HashMap<String,Object>();		try {			QueryModel model = new QueryModel();			if(1 == type){				model.clearQuery();				model.combPreEquals("isValid", true);							int users = dateBaseDAO.findCount(Users.class, model); //总会员				statusMap.put("users", users);				model.combCondition(" DATEDIFF(createTime,NOW())=0");				int todayAddUsers = dateBaseDAO.findCount(Users.class, model);//今天会员				statusMap.put("todayAddUsers", todayAddUsers);				model.clearQuery();				model.combPreEquals("isValid", true);				model.combCondition(" DATEDIFF(refreshTime,NOW())=0");				int dlScore = dateBaseDAO.findCount(DLScoreMark.class, model);				statusMap.put("dlScore", dlScore);							}else if(2 == type){				model.clearQuery();				model.combCondition("item is not null");				model.setOrder("createTime DESC");				List<Bonus> bonusList = dateBaseDAO.findPageList(Bonus.class, model, 0, 22);				statusMap.put("bonusList", bonusList.size());				List<Map<String,Object>> dataList = new ArrayList<Map<String,Object>>();				for(Bonus bs: bonusList){					Map<String,Object> map = new HashMap<String,Object>();					map.put("time", DateUtil.formatDate("yyyy-MM-dd HH:mm:ss", bs.getCreateTime()));					if(bs.getUser()==null){						map.put("name", "每天积分用户");						map.put("nameImg", StringUtil.url+StringUtil.userHead);						map.put("phone","132*****739");											}else{						map.put("name", bs.getUser().getRealname()==null?MD5Util.hidePhone(bs.getUser()):bs.getUser().getRealname());						map.put("nameImg", StringUtil.getUserDefaultHead(bs.getUser(), StringUtil.url+"/"));						map.put("phone", MD5Util.hidePhone(bs.getUser()));					}										map.put("score", bs.getScore());					map.put("goodName", bs.getItem().getGoodName());//					map.put("goodName", bs.getItem()==null?"消耗 "+bs.getScore()+" 积分":bs.getItem().getGoodName());					if(bs.getAdminUserBuy()==null){						map.put("sellerName", bs.getAdminUser().getUsername());						map.put("city", bs.getAdminUser().getProvinceEnum2().getName());					}else{						map.put("sellerName", bs.getAdminUserBuy().getUsername());						map.put("city", bs.getAdminUserBuy().getProvinceEnum2().getName());					}					double maid = bs.getMaid();					map.put("maid", maid);					map.put("maidhhr", CalcUtil.mul(maid, 0.75, 4));					map.put("maiddl", CalcUtil.mul(maid, 0.05, 4));					map.put("maidzb", CalcUtil.mul(maid, 0.05, 4));					map.put("maidz", maid);					dataList.add(map);									}				dataMap.put("dataList", dataList);				statusMap.put("dataMap", dataMap);			}						statusMap.put("status", 1);			statusMap.put("message", "请求成功");					} catch (Exception e) {			// TODO Auto-generated catch block			e.printStackTrace();			statusMap.put("status", -1);			statusMap.put("message", "请求失败");		}				return statusMap;	}	@Override	public Map<String, Object> getSettlement(HttpServletRequest request,			HttpServletResponse response, Integer type) {				Map<String,Object> statusMap = new HashMap<String,Object>();		Map<String,Object> map = new HashMap<String,Object>();								if(type==1){			List<Integer> sendOutNums = new ArrayList<Integer>(); //右3 积分送出量			List<Integer> ExchangeNums = new ArrayList<Integer>(); //右3 兑换量			List<Object[]> sendOutNumList = sjScoreMarkDAO.findMonToSun();			List<Object[]> ExchangeNumList = dlScoreMarkDAO.findMonToSun();			if(sendOutNumList == null ){				sendOutNums.add(0);			}			if(ExchangeNumList == null){				ExchangeNums.add(0);			}			for(int i=0;i<8;i++){				sendOutNums.add(Integer.valueOf(sendOutNumList.get(0)[i].toString()));				ExchangeNums.add(Integer.valueOf(ExchangeNumList.get(0)[i].toString()));			}			statusMap.put("sendOutNums", sendOutNums);			statusMap.put("ExchangeNums", ExchangeNums);			return statusMap;		}		QueryModel model = new QueryModel();		model.clearQuery();		model.combPreEquals("isValid", true);		model.combPreEquals("level", 65);		List<AdminUser> hhrList = dateBaseDAO.findPageList(AdminUser.class, model, 0, 10);//左1		List<Map<String,Object>> hhrs = new ArrayList<Map<String,Object>>();		for(AdminUser au : hhrList){			map = new HashMap<String,Object>();			map.put("name", au.getUsername());			map.put("money", au.getMoney());			map.put("lmUnion", au.getLmUnion());			hhrs.add(map);		}		model.clearQuery();		model.combPreEquals("isValid", true);		model.combPreEquals("level", 75);		List<AdminUser> dlList = dateBaseDAO.findPageList(AdminUser.class, model, 0, 10);//左2				List<Map<String,Object>> dls = new ArrayList<Map<String,Object>>();		List<Map<String,Object>> seriesList = new ArrayList<Map<String,Object>>(); //右2		List<Map<String,Object>> myDataList = new ArrayList<Map<String,Object>>(); //地图亮点		for(AdminUser au : dlList){			map = new HashMap<String,Object>();			map.put("name", au.getUsername());			map.put("money", au.getMoney());			map.put("lmUnion", au.getLmUnion());			dls.add(map);									Map<String,Object> myDataMap = new HashMap<String,Object>();			Map<String,Object> seriesMap = new HashMap<String,Object>();			List<Object> value = new ArrayList<Object>();			value.add(au.getLongitude());			value.add(au.getLatitude());			value.add(au.getScoreSurplus());			myDataMap.put("value", value);			myDataMap.put("name", au.getUsername());			myDataList.add(myDataMap);						seriesMap.put("name", au.getUsername());			seriesMap.put("value", CalcUtil.sub(au.getScoreSurplus()==null?100000.0:au.getScoreSurplus(), au.getScore()));			seriesList.add(seriesMap);					}								List<Map<String,Object>> fanList = new ArrayList<Map<String,Object>>();		model.clearQuery();		List<Object[]> ulr = userLoginRecordDao.findZoneIdCount();		for(int i=0;i<ulr.size();i++){			map = new HashMap<String,Object>();			ProvinceEnum penum = provinceEnumDAO.findById(Integer.valueOf(ulr.get(i)[0].toString()));			map.put("name", penum.getName());			map.put("value", Integer.valueOf(ulr.get(i)[1].toString()));			map.put("zoneId", penum.getZoneId());						fanList.add(map);			if(fanList.size()==10){				break;			}					}		statusMap.put("fanList", fanList);		statusMap.put("hhrs", hhrs);		statusMap.put("dls", dls);		statusMap.put("seriesList", seriesList);		statusMap.put("myDataList", myDataList);						return statusMap;	}	@Override	public Map<String, Object> getRotateUsers(HttpServletRequest request,			HttpServletResponse response, Integer valueOf) {		Map<String,Object> statusMap = new HashMap<String,Object>();		QueryModel model = new QueryModel();								model.clearQuery();		model.combPreEquals("isValid", true);		model.setOrder("createtime DESC");				if(valueOf == 1){			List<Users> userList = dateBaseDAO.findPageList(Users.class, model, 0, 200);						List<Map<String,Object>> users = new ArrayList<Map<String,Object>>();			for(Users us : userList){				Map<String,Object> map = new HashMap<String,Object>();								map.put("name", us.getRealname()==null?MD5Util.hidePhone(us):us.getRealname());									map.put("img", StringUtil.getUserDefaultHead(us, StringUtil.url+"/"));				users.add(map);			}									statusMap.put("users", users);		}else{			Map<String,Object> map2 = new HashMap<String,Object>();						model.clearQuery();			model.setOrder("createtime DESC");			List<SignCalc>  signCalcs = dateBaseDAO.findLists(SignCalc.class, model);			SignCalc signCalc = signCalcs.get(0);						model.clearQuery();			model.combPreEquals("isValid", true);			model.setOrder("createtime DESC");			List<UserDarwRecord>  udrs = dateBaseDAO.findLists(UserDarwRecord.class, model);			UserDarwRecord udr = udrs.get(0);						if(DateUtil.getDiffSeconds(signCalc.getCreateTime(), udr.getCreateTime()) < 0){				//返回签到				map2.put("img", StringUtil.getUserDefaultHead(signCalc.getUsers(), StringUtil.url+"/"));				if(signCalc.getUsers().getPhone() == null){										map2.put("name", signCalc.getUsers().getRealname()==null?signCalc.getUsers().getName():signCalc.getUsers().getRealname());									}else{					map2.put("name", signCalc.getUsers().getRealname()==null?MD5Util.hidePhone(signCalc.getUsers()):signCalc.getUsers().getRealname());					}				map2.put("value", signCalc.getSignDatil());			}else{				//返回中奖的				map2.put("img", StringUtil.getUserDefaultHead(udr.getUsers(), StringUtil.url+"/"));				map2.put("name", udr.getUsers().getRealname()==null?MD5Util.hidePhone(udr.getUsers()):udr.getUsers().getRealname());				if(udr.getGameActivity().getDrawYlassify().getId() == 18){					map2.put("value", "恭喜您抽中了"+udr.getGameActivity().getScore()+"积分");				}else if(udr.getGameActivity().getDrawYlassify().getId() == 19){					map2.put("value", "恭喜您抽中了"+udr.getGameActivity().getReGoodsOfSellerMall().getSnapshotGoods().getName());									}			}			statusMap.put("map2", map2);		}				return statusMap;	}		@Override	public Map<String, Object> getCard(HttpServletRequest request,			HttpServletResponse response) {		Map<String,Object> statusMap = new HashMap<>();		String userId = request.getParameter("userId"); //头像, 二维码 背景图		String base = "https://mtjf.518wk.cn/api/xcx";//		String base ="E:/webapps/dailyAPI/xcx";		if(userId == ""){			statusMap.put("status", -0x01);			statusMap.put("message", "用户为空");			return statusMap;		}				Users user = get(Integer.valueOf(userId));		String openId = user.getOpenId();		String headimage = user.getHeadimage();		Map<String,Object> map = getToken(request,response,user);		String qrcode = map.get("code").toString();		qrcode = base+"/image/"+openId+"/"+qrcode;//		String path ="E:/webapps/dailyAPI/xcx";		String path="E:/xampp/tomcat/webapps/dailyAPI/xcx";		String filename = openId+".png";				String cardPt = path+"/haibao/";//文件夹路径		String readPath = cardPt+filename;//文件路径				String card =base+"/haibao/"+filename;		Map<String,Object> dataMap = new HashMap<String,Object>();		if(StringUtils.isBlank(openId)){			return JsonResponseUtil.getJson(-0x02, "openId错误");		}		try{				File file = new File(readPath);		if(file.exists()){		//存在		}else{//生成图片//			  File dtfile = new File("E:/webapps/dailyAPI/xcx/1235090319091635100.jpg"); //背景图			  File dtfile = new File("E:/xampp/tomcat/webapps/dailyAPI/xcx/1235090319091635100.jpg"); //背景图			  BufferedImage buffImg = ImageIO.read(dtfile);			  			  if(StringUtils.isBlank(headimage) || StringUtils.isBlank(qrcode)){				  card ="E:/xampp/tomcat/webapps/dailyAPI/xcx/image/"+user.getMycode()+".png";				  dataMap.put("card", card);				  return dataMap;			  }			  URL bjurl = new URL("http://jifen.aixiaoping.cn:8080/dailyRes/cashshop_type/1/nomal/1235090319091635100.jpg");			  URL txurl = new URL(user.getHeadimage());			  //"http://jifen.aixiaoping.cn:8080/dailyRes/cashshop_type/1/nomal/1236480711054055300.png"			  URL ewmurl = new URL(qrcode);//			  BufferedImage bjImg = ImageIO.read(bjurl);			  BufferedImage txImg = ImageIO.read(txurl);			  BufferedImage qrImg = ImageIO.read(ewmurl);			  txImg = UploadUtil.setRadius(txImg);		        // 获取层图		       // BufferedImage waterImg = ImageIO.read(waterFile);		       // 创建Graphics2D对象，用在底图对象上绘图		        Graphics2D g2d = buffImg.createGraphics();  		        int txImgWidth = (int) (txImg.getWidth()/1.7);// 获取层图的宽度		        int txImgHeight = (int) (txImg.getHeight()/1.7);//		        		        int qrImgWidth = qrImg.getWidth()/3;// 获取层图的宽度		        int qrImgHeight = qrImg.getHeight()/3;		        		        int bjImgWidth = bjImg.getWidth();		        int bjImgHeight = bjImg.getHeight();		        		         // 在图形和图像中实现混合和透明效果		        g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_ATOP, 1.0f));		         // 绘制		        		         g2d.drawImage(bjImg, 0, 0, bjImgWidth, bjImgHeight, null);		         		         g2d.drawImage(txImg, 212,20, txImgWidth, txImgHeight, null);		         g2d.drawImage(qrImg, 180, 330, qrImgWidth, qrImgHeight, null);//		         g2d.drawString(user.getRealname(), 240,80);		         		         g2d.dispose();// 释放图形上下文使用的系统资源		         		         File files =new File(cardPt);		         if(!files.exists()){		        	 files.mkdirs();		         }		         		         generateWaterFile(buffImg,readPath);				}				}catch(Exception e){			card ="https://mtjf.518wk.cn/api/xcx/haibao/ob50G0e4FAE5b_cyQ83DgQL0ohG0.png";			e.printStackTrace();			dataMap.put("card", card);			return dataMap;		}		statusMap.put("img", card);		return statusMap;	}	   private void generateWaterFile(BufferedImage buffImg, String savePath) {	        int temp = savePath.lastIndexOf(".") + 1;	        try {	            ImageIO.write(buffImg, savePath.substring(temp), new File(savePath));	        } catch (IOException e1) {	            e1.printStackTrace();	        }	   }		@Override	public Map<String, Object> getToken(HttpServletRequest request,			HttpServletResponse response, Users user) {		Map<String,Object> statusMap = new HashMap<String,Object>();		String url = "https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid="+WeixinConfig.xcx_appid+"&secret="+WeixinConfig.xcx_app_secret;		Map<String, Object> map;		try {			map = UrlUtil.getTaoKeToMap(url);			String access_token = "";			if(map != null && map.size()>0 && map.get("access_token") != null){				access_token = map.get("access_token").toString();			}else{				return JsonResponseUtil.getJson(-0x02,"没有获取到相关信息");			}			String twoCodeUrl = WeixinUtil.getminiqrQr(access_token,request,user);			statusMap.put("status", 0x01);			statusMap.put("message", "请求成功");			statusMap.put("code", twoCodeUrl);		} catch (Exception e) {			// TODO Auto-generated catch block			e.printStackTrace();			statusMap.put("status", -0x01);			statusMap.put("message", "请求失败");					}		return statusMap;	}	@Override	public Map<String, Object> isSeller(Integer userId) {		Map<String,Object> map = new HashMap<String,Object>();		Boolean isPaiedForStore = false;		String verifyStatus = "-1";		QueryModel model = new QueryModel();		model.clearQuery();		model.combPreEquals("id", userId);		Users user = (Users) dateBaseDAO.findOne(Users.class, model);		if(user == null){			map.put("verifyStatus", verifyStatus);			map.put("isPaiedForStore", isPaiedForStore);			return map;		}				if(user.getIsSeller() == null || !user.getIsSeller()){			model.clearQuery();			model.combPreEquals("isvalid", true);			model.combPreEquals("usersByUserId.id", userId,"userId");			model.combPreEquals("type", 5);			List<CashmoneyRecord> isOpenStore = dateBaseDAO.findLists(CashmoneyRecord.class, model);			if(isOpenStore != null && isOpenStore.size()>0){				isPaiedForStore = true;			}		}else{			isPaiedForStore = true;		}		model.clearQuery();		model.combEquals("isvalid",1);		model.combPreEquals("users.id",userId,"user_id");		Seller seller = null;		Integer sellerId = 0;		List<Seller> sellerList = dateBaseDAO.findPageList(Seller.class, model, 0 , 1);		if(sellerList.size()>0){		    seller = sellerList.get(0);		    sellerId = seller.getId();			verifyStatus = seller.getVerifyStatus()==null?"":seller.getVerifyStatus().toString();//店铺审核状态		}else{			model.clearQuery();			model.combPreEquals("user.id", userId, "userId");			model.combPreEquals("isValid", true);			List<SellerAccountNumber> acounts = dateBaseDAO.findPageList(SellerAccountNumber.class, model, 0, 1);			if(acounts.size()>0){				seller = acounts.get(0).getSeller();				sellerId = seller.getId();				if(seller!=null){					verifyStatus = seller.getVerifyStatus()==null?"":seller.getVerifyStatus().toString();				}else{					verifyStatus = String.valueOf(-1);//普通用户店铺审核状态				}			}else{				verifyStatus = String.valueOf(-1);//普通用户店铺审核状态			}		}		map.put("verifyStatus", verifyStatus);		map.put("isPaiedForStore", isPaiedForStore);		map.put("sellerId", sellerId);		return map;								}	@Override	public Map<String, Object> getUserToken(HttpServletRequest request, HttpServletResponse response) {		Map<String,Object> statusMap = new HashMap<String,Object>();		String userId = request.getParameter("userId");		String base = "https://mtjf.518wk.cn/api/xcx";		Users user = userDao.findById(Integer.valueOf(userId));		if(user == null){			statusMap.put("status", -0x01);			statusMap.put("message", "请求失败");			return statusMap;		}    	Map<String,Object> map = getToken(request,response,user);    	String qrcode = map.get("code").toString();		qrcode = base+"/image/"+user.getOpenId()+"/"+qrcode;		statusMap.put("qrcode", qrcode);		statusMap.put("status", 0x01);		statusMap.put("message", "请求成功");		return statusMap;	}	@Override	public Map<String, Object> publishInfo(HttpServletResponse response, HttpServletRequest request) {		Map<String,Object> statusMap = new HashMap<String,Object>();		Parameter parameter = ParameterUtil.getParameter(request);		if(parameter == null){			return JsonResponseUtil.getJson(-0x02, "参数data不是合法的json字符串");		}		try {			String userId = parameter.getUserId();			String info = parameter.getData().getString("info");			String infoImg = parameter.getData().getString("infoImg");						Users user = usersDao.findById(Integer.valueOf(userId));			if(user == null){				return JsonResponseUtil.getJson(-0x03, "没有查询到该用户");			}						UserFriendsInfo userFriendsInfo = new UserFriendsInfo();			userFriendsInfo.setConcernNum(0);			userFriendsInfo.setCreateTime(new Timestamp(System.currentTimeMillis()));			userFriendsInfo.setIsValid(true);			userFriendsInfo.setPraiseNum(0);			userFriendsInfo.setUser(user);			userFriendsInfo.setInfo(StringUtil.saveEmoji(info));			userFriendsInfo.setInfoImg(infoImg);			userFriendsInfoDAO.save(userFriendsInfo);						statusMap.put("status", 1);			statusMap.put("message", "发表成功");					} catch (NumberFormatException e) {			// TODO Auto-generated catch block			e.printStackTrace();						statusMap.put("status", -1);			statusMap.put("message", "发表失败");		}				return statusMap;	}	@Override	public Map<String, Object> getPublishInfo(HttpServletResponse response, HttpServletRequest request) {		Map<String,Object> statusMap = new HashMap<String,Object>();		List<Map<String,Object>> dataList = new ArrayList<Map<String,Object>>();				Parameter parameter = ParameterUtil.getParameter(request);		Integer pageIndex = parameter.getData().getInteger("pageIndex");				String basePath = request.getServletContext().getAttribute("RESOURCE_LOCAL_URL").toString();		String userId = parameter.getUserId();		String articleId = parameter.getData().getString("articleId");				Users user = usersDao.findById(Integer.valueOf(userId));		QueryModel model = new QueryModel();				if(articleId != ""){			model.combPreEquals("id", articleId);		}else{			model.combPreEquals("isValid", true);			model.combCondition("createTime ASC");		}		int count = dateBaseDAO.findCount(UserFriendsInfo.class,model);		int pageItemCount = 20;		int totalPage = (count % pageItemCount) > 0 ? ((count / pageItemCount) + 1)				: (count / pageItemCount);		int start = (pageIndex - 1) * pageItemCount;				List<UserFriendsInfo> infoList = dateBaseDAO.findPageList(UserFriendsInfo.class, model, start, pageItemCount);		for(UserFriendsInfo u :infoList){			Map<String,Object> map = new HashMap<String,Object>();			map.put("concernNum", u.getConcernNum());			map.put("createTime", u.getCreateTime());			map.put("info", u.getInfo());			map.put("praiseNum", u.getPraiseNum());			map.put("user", u.getUser());			if(u.getInfoImg()!=null){				List<JSONObject> list = JSONArray.parseArray(u.getInfoImg(),JSONObject.class);				List<String> imgList = new ArrayList<String>();				for(JSONObject jsonObject : list){					if(jsonObject.getString("image").startsWith("upload-res")){						imgList.add(basePath+jsonObject.getString("image"));					}else{						imgList.add(jsonObject.getString("image"));					}				}				map.put("imgs", imgList);			}						//判断当前用户是否已经关注或者点赞该条信息			List<UserFriendsInfoConcern> ufic = userFriendsInfoConcernDAO.getUserConcern(user, u);			if(ufic != null && ufic.size()>0){				map.put("isConcern", ufic.get(0).getIsfocus());				map.put("isGiveUp", ufic.get(0).getIsGiveUp());			}else{				map.put("isConcern", false);				map.put("isGiveUp", false);			}									model.clearQuery();			model.combPreEquals("isValid", true);			model.combPreEquals("userFriendsInfo.id", u.getId(),"userFriendsInfoId");			int replyCount = dateBaseDAO.findCount(UserFriendsInfoReply.class, model);			List<UserFriendsInfoReply> replys = dateBaseDAO.findPageList(UserFriendsInfoReply.class, model,0,1);			List<Map<String,Object>> list = new  ArrayList<Map<String,Object>>();						for(UserFriendsInfoReply r : replys){				Map<String,Object> replyMap = new HashMap<String,Object>();				replyMap.put("name", r.getUsers().getRealname());				replyMap.put("replyInfo", StringUtil.getEmoji(r.getReplyInfo()));				list.add(replyMap);			}			map.put("reply", list);			map.put("replyCount", replyCount);			dataList.add(map);		}				statusMap.put("status", 1);		statusMap.put("data", dataList);		statusMap.put("count", count);		return statusMap;	}	@Override	public Map<String, Object> UpOrDown(HttpServletResponse response, HttpServletRequest request) {		Map<String,Object> statusMap = new HashMap<String,Object>();		Parameter parameter = ParameterUtil.getParameter(request);				if(parameter == null){			return JsonResponseUtil.getJson(-0x02, "参数data不是合法的json字符串");		}				String userId = parameter.getUserId();		String articleId = parameter.getData().getString("articleId");		String type = parameter.getData().getString("type"); // 1 点赞, 非1 取消赞				try {			Users user = usersDao.findById(Integer.valueOf(userId));			UserFriendsInfo userFriendsInfo = userFriendsInfoDAO.findById(Integer.valueOf(articleId));			List<UserFriendsInfoConcern> ugrs = userFriendsInfoConcernDAO.getUserConcern(user, userFriendsInfo);						if(ugrs != null && ugrs.size()>0){				UserFriendsInfoConcern ugr = ugrs.get(0);				if("1".equals(type)){					ugr.setIsGiveUp(true);					userFriendsInfoConcernDAO.save(ugr);				}else{					ugr.setIsGiveUp(false);					userFriendsInfoConcernDAO.save(ugr);				}			}else{				UserFriendsInfoConcern uf = new UserFriendsInfoConcern();				uf.setUser(user);				uf.setUserFriendsInfo(userFriendsInfo);				uf.setIsfocus(false);				if("1".equals(type)){					uf.setIsGiveUp(true);				}else{					uf.setIsGiveUp(false);				}				userFriendsInfoConcernDAO.save(uf);			}						statusMap.put("status", 1);			statusMap.put("message", "成功点赞");		} catch (NumberFormatException e) {			// TODO Auto-generated catch block			e.printStackTrace();			statusMap.put("status", -1);			statusMap.put("message", "点赞出错");					}				return statusMap;	}	@Override	public Map<String, Object> isConcern(HttpServletResponse response, HttpServletRequest request) {		Map<String,Object> statusMap = new HashMap<String,Object>();		Parameter parameter = ParameterUtil.getParameter(request);				if(parameter == null){			return JsonResponseUtil.getJson(-0x02, "参数data不是合法的json字符串");		}				String userId = parameter.getUserId();		String articleId = parameter.getData().getString("articleId");		String type = parameter.getData().getString("type"); // 1 关注 非1 取消关注				try {			Users user = usersDao.findById(Integer.valueOf(userId));			UserFriendsInfo userFriendsInfo = userFriendsInfoDAO.findById(Integer.valueOf(articleId));			List<UserFriendsInfoConcern> ugrs = userFriendsInfoConcernDAO.getUserConcern(user, userFriendsInfo);			if(ugrs != null && ugrs.size()>0){				UserFriendsInfoConcern ugr = ugrs.get(0);				if("1".equals(type)){					ugr.setIsfocus(true);					userFriendsInfoConcernDAO.save(ugr);				}else{					ugr.setIsfocus(false);					userFriendsInfoConcernDAO.save(ugr);				}			}else{				UserFriendsInfoConcern uf = new UserFriendsInfoConcern();				uf.setUser(user);				uf.setUserFriendsInfo(userFriendsInfo);				uf.setIsGiveUp(false);				if("1".equals(type)){					uf.setIsfocus(true);				}else{					uf.setIsfocus(false);				}				userFriendsInfoConcernDAO.save(uf);			}			statusMap.put("status", 1);			statusMap.put("message", "关注成功");		} catch (NumberFormatException e) {			// TODO Auto-generated catch block			e.printStackTrace();			statusMap.put("status", -1);			statusMap.put("message", "关注信息除了问题");					}				return statusMap;	}	@Override	public Map<String, Object> payScore(HttpServletResponse response, HttpServletRequest request) {		Map<String,Object> statusMap = new HashMap<String,Object>();		Parameter parameter = ParameterUtil.getParameter(request);		String userId = parameter.getUserId();		String articleId = parameter.getData().getString("articleId");		Integer payScore = Integer.valueOf(parameter.getData().getString("payScore")); //赞赏的积分				Users user = usersDao.findById(Integer.valueOf(userId));				if(user.getScore() < payScore){			return JsonResponseUtil.getJson(-0x02, "您积分不足!请充值在赞赏(目前最多赞赏为:"+user.getScore()+")");		}		try {			UserFriendsInfo userFriendsInfo = userFriendsInfoDAO.findById(Integer.valueOf(articleId));			Users articleUser = userFriendsInfo.getUser();			Timestamp validityTime =  new Timestamp(DateUtil.addDay2Date(30, new Date()).getTime());						QueryModel model = new QueryModel();			model.combPreEquals("isValid", true);			model.combPreEquals("users.id", user.getId(),"userId");			model.combIsNull("reGoodsorder.id");			model.combIsNull("lockMall.id");			List<UserScoreMark> usms = dateBaseDAO.findPageList(UserScoreMark.class, model, 0, payScore);			for(UserScoreMark u : usms){				u.setUsers(articleUser);				u.setValidityTime(validityTime);				userScoreMarkDAO.saveOrUpdate(u);			}						user.setScore(user.getScore()-payScore);			userDao.saveOrUpdate(user);						articleUser.setScore(articleUser.getScore()+payScore);			userDao.saveOrUpdate(articleUser);						userFriendsInfo.setAppreciate(userFriendsInfo.getAppreciate()+payScore);			userFriendsInfoDAO.saveOrUpdate(userFriendsInfo);												UserProfits userProfits = new UserProfits();			userProfits.setCreatetime(new Timestamp(System.currentTimeMillis()));			userProfits.setFromUsers(user);			userProfits.setIsvalid(true);			userProfits.setUserFriendsInfo(userFriendsInfo);			userProfits.setUsers(articleUser);			userProfits.setScore(payScore);			userProfits.setRemark(user.getRealname()+"赞赏了"+articleUser.getRealname()+"发布的消息");			userProfitsDAO.save(userProfits);						Scorerecords scorerecords = new Scorerecords();			scorerecords.setUsers(user);			scorerecords.setCreatetime(new Timestamp(System.currentTimeMillis()));			scorerecords.setIsvalid(true);			scorerecords.setBeforeScore(user.getScore()+payScore);			scorerecords.setAfterScore(user.getScore());			scorerecords.setScore(payScore);			scorerecords.setType(14);			scorerecords.setAdminuserId(1);			scorerecords.setValidityTime(validityTime);			scorerecords.setRemark("您赞赏了"+payScore+"积分给"+articleUser.getRealname()+"发布的信息");			scorerecords.setScoretype("您赞赏了"+payScore+"积分给"+articleUser.getRealname()+"发布的信息");			scorerecordsDao.save(scorerecords);						Scorerecords dcrd = new Scorerecords();			dcrd.setUsers(articleUser);			dcrd.setCreatetime(new Timestamp(System.currentTimeMillis()));			dcrd.setIsvalid(true);			dcrd.setBeforeScore(articleUser.getScore()-payScore);			dcrd.setAfterScore(articleUser.getScore());			dcrd.setScore(payScore);			dcrd.setType(17);			dcrd.setAdminuserId(1);			dcrd.setValidityTime(validityTime);			dcrd.setRemark(user.getRealname()+"赞赏了您发布的信息,获得"+payScore+"积分");			dcrd.setScoretype(user.getRealname()+"赞赏了您发布的信息,获得"+payScore+"积分");			scorerecordsDao.save(dcrd);						statusMap.put("status", 1);			statusMap.put("message", "赞赏成功");					} catch (NumberFormatException e) {			// TODO Auto-generated catch block			e.printStackTrace();			statusMap.put("status", -1);			statusMap.put("message", "赞赏成功");		}						return statusMap;	}	@Override	public Map<String, Object> reply(HttpServletResponse response, HttpServletRequest request) {		Map<String,Object> statusMap = new HashMap<String,Object>();		Parameter parameter = ParameterUtil.getParameter(request);				String userId = parameter.getUserId();		String articleId = parameter.getData().getString("articleId");		String replyInfo = parameter.getData().getString("replyInfo");		Users user = usersDao.findById(Integer.valueOf(userId));		if(user == null ){			return JsonResponseUtil.getJson(-0x02, "请先登录在评论回复!");		}		UserFriendsInfo userFriendsInfo = userFriendsInfoDAO.findById(Integer.valueOf(articleId));				UserFriendsInfoReply ufir = new UserFriendsInfoReply();		ufir.setIsvalid(true);		ufir.setReplyInfo(StringUtil.saveEmoji(replyInfo));		ufir.setUserFriendsInfo(userFriendsInfo);		ufir.setUsers(user);		ufir.setCreatetime(new Timestamp(System.currentTimeMillis()));		userFriendsInfoReplyDAO.save(ufir);				return JsonResponseUtil.getJson(0x02, "回复成功");	}		}