package com.axp.service.impl;import java.sql.Timestamp;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.HashSet;import java.util.List;import java.util.Map;import java.util.Set;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.axp.dao.ReGoodsDetailsDAO;import com.axp.domain.*;import com.axp.service.IOrderService;import com.axp.service.IReGoodsOfBaseService;import com.axp.service.IReShoppingCarService;import com.axp.util.JsonResponseUtil;import com.axp.util.QueryModel;import com.axp.util.StringUtil;import org.apache.commons.lang.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.interceptor.TransactionAspectSupport;@Servicepublic class ReGoodsOfBaseServiceImpl extends BaseServiceImpl<ReGoodsOfBase> implements IReGoodsOfBaseService {    @Autowired    protected IOrderService orderService;    @Autowired    protected IReShoppingCarService shoppingCarService;    @Override    public Class<?> getTargetClass(Integer mallType) {        if (mallType == null) {            return ReGoodsOfSellerMall.class;        }        switch (mallType) {            case 1:                return ReGoodsOfSellerMall.class;            case 2:                return ReGoodsOfScoreMall.class;            case 3:                return ReGoodsOfSeckillMall.class;            case 4:                return ReGoodsOfLocalSpecialtyMall.class;            case 5:                return ReGoodsOfNineNineMall.class;            case 6:                return ReGoodsOfMemberMall.class;            case 7:                return ReGoodsOfLockMall.class;        }        return null;    }    @Override    public Class<?> getTargetClass(String goodsOrder) {        String mall = getMallType(goodsOrder);        switch (mall) {            case ReBaseGoods.SellerMall:                return ReGoodsOfSellerMall.class;            case ReBaseGoods.ScoreMall:                return ReGoodsOfScoreMall.class;            case ReBaseGoods.SeckillMall:                return ReGoodsOfSeckillMall.class;            case ReBaseGoods.LocalSpecialtyMall:                return ReGoodsOfLocalSpecialtyMall.class;            case ReBaseGoods.NineNineMall:                return ReGoodsOfNineNineMall.class;            case ReBaseGoods.MemberMall:                return ReGoodsOfMemberMall.class;            case ReBaseGoods.yhqMall:                return ReGoodsofextendmall.class;            case ReBaseGoods.lockMall:                return ReGoodsOfLockMall.class;        }        return null;    }    @Override    public Integer getNumberOfBytLimit(String goodsOrder, Integer userId) {        //已购买数量；        Integer numberOfAlreadyBuy = orderService.getNumberOfAlreadyBuy(goodsOrder, userId);        //在购物车中的数量；        Integer numberOfGoodsInShoppingCar = shoppingCarService.getNumberOfGoodsInShoppingCar(goodsOrder, userId);        //限制购买的数量；(因为暂时只有积分商城，那么就直接强转为积分商城对象)；        Integer countLimit = ((ReGoodsOfScoreMall) getMall(goodsOrder)).getCountLimit();        if (countLimit < numberOfAlreadyBuy + numberOfGoodsInShoppingCar) {            return 0;        } else {            return countLimit - numberOfAlreadyBuy - numberOfGoodsInShoppingCar;        }    }    /**     * 根据六个商城商品的goodsOrder字段获取唯一的商城商品对象；     * 步骤：     * 1，首先根绝goodsOrder的前三个字符获取商城；     * 2，获取这个商品对象；     */    @Override    public Object getMall(String goodsOrder) {    	try{        String mall = getMallType(goodsOrder);        Integer goodsId = getMallValue(goodsOrder);        switch (mall) {            case ReBaseGoods.SellerMall:                return reGoodsOfSellerMallDao.get(goodsId);            case ReBaseGoods.ScoreMall:                return reGoodsOfScoreMallDao.get(goodsId);            case ReBaseGoods.SeckillMall:                return reGoodsOfSeckillMallDao.get(goodsId);            case ReBaseGoods.LocalSpecialtyMall:                return reGoodsOfLocalSpecialtyMallDao.get(goodsId);            case ReBaseGoods.NineNineMall:                return reGoodsOfNineNineMallDao.get(goodsId);            case ReBaseGoods.MemberMall:                return reGoodsOfMemberMallDao.get(goodsId);            case ReBaseGoods.changeMall:                return reGoodsOfChangeMallDao.get(goodsId);            case ReBaseGoods.teamMall:                return reGoodsOfTeamMallDao.get(goodsId);            case ReBaseGoods.lockMall:                return reGoodsOfLockMallDao.get(goodsId);            default:                break;        }            	}catch(Exception e){    		e.printStackTrace();    		TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();    	}    	return null;    }    /**     * 获取代表商家类型的字符串；     */    @Override    public String getMallType(String goodsOrder) {        return goodsOrder.substring(0, 3);    }    /**     * 获取商品id值；     *     * @param id     * @return     */    @Override    public Integer getMallValue(String id) {        return Integer.parseInt(id.substring(3));    }            public void setStandardDetails(JSONArray standardArray,Integer adminUserId,ReBaseGoods reBaseGoods){		List<Map<String, Object>> standardDetailsList=new ArrayList<>();		for (int i = 0; i < standardArray.size(); i++) {			Map<String, Object> standardMap=new HashMap<>();			JSONObject standard = standardArray.getJSONObject(i);			String specId = standard.getString("specId");			ReGoodsStandard goodsStandard=null;			goodsStandard=reGoodsStandardDao.findById(Integer.parseInt(specId));						goodsStandard.setAdminUserId(adminUserId);			goodsStandard.setIsValid(true);			goodsStandard.setCreateTime(new Timestamp(System.currentTimeMillis()));			goodsStandard.setName(standard.getString("specStr"));			goodsStandard.setParentStandardId(StringUtil.parentStandardId);			reGoodsStandardDao.saveOrUpdate(goodsStandard);						if(i==0){				reBaseGoods.setPrice(standard.getDouble("price"));  //好像是默认取第一个			}			standardMap.put("id1", goodsStandard.getId());			standardMap.put("name1", goodsStandard.getName().trim());			standardMap.put("price", standard.getDouble("price"));			standardMap.put("repertory", standard.getInteger("stock")); 			standardMap.put("redPaper", 0);			standardMap.put("score", 0);			standardDetailsList.add(standardMap);		}				if(!reBaseGoods.getIsNoStandard()){			Map<String, Object> parentStandardMap=new HashMap<>();			List<Map<String, Object>> parentStandList=new ArrayList<>();			parentStandardMap.put("standardId",StringUtil.parentStandardId );			parentStandardMap.put("standardName",StringUtil.parentStandardName);			parentStandList.add(parentStandardMap);			reBaseGoods.setStandardDetails(1, "操作成功",parentStandList, standardDetailsList);		}			}    	@Override	public ReGoodsOfBase publishGoods(Integer adminUserId,Integer baseGoodsId ,String name,Integer typeId,JSONArray goodsDetailArray,JSONArray standardArray,JSONArray coverPicArray,Seller seller,Integer transportationType,Double transportationPrice, 			Double orieignPrice,String rightsProtect,Boolean hasSpecStr,Boolean isChange,Integer sendScoreNum,Integer isSendScore) {				CommodityType commodityType = commodityTypeDao.findById(typeId);		ReGoodsOfBase base=null;		try {				List<Map<String, Object>> typeList=new ArrayList<>();		List<Map<String, Object>> coverPicList=new ArrayList<>();		Map<String, Object> typeMap=new HashMap<>();		typeMap.put("childTypeId", typeId);		typeMap.put("childTypeName",commodityType.getName());		typeMap.put("parentTypeId", commodityType.getCommodityType().getId());		typeMap.put("parentTypeName", commodityType.getCommodityType().getName());		typeList.add(typeMap);						//构建轮播图		for (Object object : coverPicArray) {			Map<String, Object> map=new HashMap<>();			map.put("imgUrl", object.toString());			coverPicList.add(map);		}		//简述图默认取轮播图第一张		Map<String, Object> descriptionPicsMap=new HashMap<>();		if(coverPicArray.size()>0){			descriptionPicsMap.put("imgUrl", coverPicArray.get(0).toString());		}				ReGoodsDetails goodsDetails=null;		if(baseGoodsId!=null){			base=reGoodsOfBaseDao.findById(baseGoodsId);			goodsDetails=reGoodsDetailsDao.getByBaseGoods(base);		}else{			base=new ReGoodsOfBase();			goodsDetails=new ReGoodsDetails();		}				base.setIsValid(true);		base.setCreateTime(new Timestamp(System.currentTimeMillis()));		base.setName(name);		base.setType(JSONObject.toJSONString(typeList).toString());		base.setLables(null);		List<Map<String, Object>> descPicMapList=new ArrayList<>();		descPicMapList.add(descriptionPicsMap);		String descriptionPicss=JSONObject.toJSONString(descPicMapList);		base.setCoverPic(descriptionPicss);		base.setDescriptionPics(JSONObject.toJSONString(coverPicList).toString()); 		base.setSeller(seller); 		base.setCheckStatus(0);		base.setLaunchMall("10000000");  //默认发布到周边店铺		base.setRightsProtect(rightsProtect);		base.setCommodityTypeId(typeId);		reGoodsOfBaseDao.saveOrUpdate(base);				goodsDetails.setIsValid(true);		goodsDetails.setGoods(base);		goodsDetails.setIsNew(1);		List<Map<String, Object>> goodsDetailList = getConvertContent(goodsDetailArray);		goodsDetails.setContent(JSONObject.toJSONString(goodsDetailList).toString());		reGoodsDetailsDao.saveOrUpdate(goodsDetails);						//构建快照表		ReGoodsSnapshot snapshot=new ReGoodsSnapshot();		snapshot.setIsValid(true);		snapshot.setSign(base.getSign());		snapshot.setCreateTime(new Timestamp(System.currentTimeMillis()));		snapshot.setName(name);		snapshot.setCoverPic(descriptionPicss);		snapshot.setType(JSONObject.toJSONString(typeList).toString());		snapshot.setLables(null);		snapshot.setDescriptionPics(JSONObject.toJSONString(coverPicList).toString());		snapshot.setBaseGoodsId(base.getId());		snapshot.setCheckStatus(0);		snapshot.setSeller(seller);				reGoodsSnapshotDao.save(snapshot);				base.setSnapshotId(snapshot.getId());				reGoodsOfBaseDao.update(base);						//修改必须要下架		//修改周边店铺就是新增 所以不存在修改周边店铺						//发布到周边店铺		ReGoodsOfSellerMall sellerMall = publishSellerMall(base.getId(), snapshot, standardArray, adminUserId, transportationType, transportationPrice, orieignPrice,rightsProtect,hasSpecStr,isChange,sendScoreNum,isSendScore);		if(sellerMall==null){			return null;		}				} catch (Exception e) {			if(!TransactionAspectSupport.currentTransactionStatus().isRollbackOnly()){				TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();			}			e.printStackTrace();			return null;		}		return base;	}			//转换商品详情	private List<Map<String, Object>> getConvertContent(JSONArray goodsDetailArray ){		 List<Map<String, Object>> list=new ArrayList<>();		 for (Object obj : goodsDetailArray) {			 Map<String, Object> map=new HashMap<>();			 	JSONObject goodsDetail =JSONObject.parseObject(obj.toString());			 	map.put("detailType", goodsDetail.getString("detailType"));			 	if("text".equals(goodsDetail.getString("detailType"))){			 		map.put("text", goodsDetail.getString("text"));			 					 	}else{			 		map.put("picture", goodsDetail.getString("picture").replaceAll("http://www.aixiaoping.com:8080/aixiaopingRes/", ""));			 		map.put("pictureWidth", goodsDetail.getString("pictureWidth"));			 		map.put("pictureHeight", goodsDetail.getString("pictureHeight"));			 	}			 	list.add(map);		}		 		return list;	}				//发布到周边店铺	public ReGoodsOfSellerMall publishSellerMall(Integer baseGoodsId,ReGoodsSnapshot reGoodsSnapshot,JSONArray standardArray,			Integer adminUserId,Integer transportationType,Double transportationPrice,Double orieignPrice,			String rightsProtect,Boolean hasSpecStr,Boolean isChange,Integer sendScoreNum,Integer isSendScore){						List<ReGoodsOfSellerMall> regoodsSellerList = reGoodsOfSellerMallDao.findByPropertyIsValid("baseGoodsId", baseGoodsId);		ReGoodsOfSellerMall sellerMall=null;			if(regoodsSellerList.size()>0){				sellerMall=regoodsSellerList.get(0);			}else{				sellerMall=new ReGoodsOfSellerMall();			}						sellerMall.setCreateTime(new Timestamp(System.currentTimeMillis()));		sellerMall.setIsValid(true);		sellerMall.setBaseGoodsId(baseGoodsId);		sellerMall.setRightsProtect(rightsProtect); //权益保障				sellerMall.setIsNotChange(!isChange);  //是否换回会		List<Map<String, Object>> standardDetailsList=new ArrayList<>();		Double price=0d;		Integer repertory=0;					for (int i = 0; i < standardArray.size(); i++) {				Map<String, Object> standardMap=new HashMap<>();				JSONObject standard = standardArray.getJSONObject(i);				String specId = standard.getString("specId");				ReGoodsStandard goodsStandard=null;				if(StringUtils.isBlank(specId)){					goodsStandard=new ReGoodsStandard();				}else{					goodsStandard=reGoodsStandardDao.findById(Integer.parseInt(specId));				}								goodsStandard.setAdminUserId(adminUserId);				goodsStandard.setIsValid(true);				goodsStandard.setCreateTime(new Timestamp(System.currentTimeMillis()));				goodsStandard.setName(standard.getString("specStr"));				goodsStandard.setParentStandardId(StringUtil.parentStandardId);				reGoodsStandardDao.saveOrUpdate(goodsStandard);								if(standard.getInteger("stock")==null){					return null;				}								if(!hasSpecStr){					repertory=standard.getInteger("stock");					price=standard.getDouble("price");					break;				}				if(i==0){					price=standard.getDouble("price");  //好像是默认取第一个				}				standardMap.put("id1", goodsStandard.getId());				standardMap.put("name1", goodsStandard.getName().trim());				standardMap.put("price", standard.getDouble("price"));				standardMap.put("repertory", standard.getInteger("stock")); 				standardMap.put("redPaper", 0);				standardMap.put("score", 0);				standardDetailsList.add(standardMap);			}					if(hasSpecStr){			Map<String, Object> parentStandardMap=new HashMap<>();			List<Map<String, Object>> parentStandList=new ArrayList<>();						parentStandardMap.put("standardId",StringUtil.parentStandardId );			parentStandardMap.put("standardName",StringUtil.parentStandardName);			parentStandList.add(parentStandardMap);			sellerMall.setStandardDetails(1, "操作成功",parentStandList, standardDetailsList);		}				if (isSendScore!=null &&isSendScore==1&&sendScoreNum!=null) {			sellerMall.setIsSendScore(true);			sellerMall.setSendScoreNum(sendScoreNum);		}else{			sellerMall.setIsSendScore(false);			sellerMall.setSendScoreNum(0);		}		sellerMall.setIsNoStandard(!hasSpecStr); 		//无规格		sellerMall.setNoStandardRepertory(repertory);		sellerMall.setNoStandardPrice(price);		sellerMall.setNoStandardRedPaper(0d);				sellerMall.setTransportationType(transportationType);		sellerMall.setTransportationPrice(transportationPrice);		sellerMall.setSnapshotGoods(reGoodsSnapshot);		sellerMall.setDisplayPrice(orieignPrice);		sellerMall.setPrice(price);		sellerMall.setScore(0);		sellerMall.setRedPaper(0d);		sellerMall.setCommentCount(0);		sellerMall.setSalesVolume(0);		sellerMall.setAddedTime(new Timestamp(System.currentTimeMillis())); //下架时间在审核通过时填写				sellerMall.setIsChecked(false);		sellerMall.setBaseGoodsId(baseGoodsId);;		reGoodsOfSellerMallDao.saveOrUpdate(sellerMall);				sellerMall.setGoodsOrder("sem"+sellerMall.getId());		sellerMall.setReGoodsOfSellerMall(sellerMall);		reGoodsOfSellerMallDao.update(sellerMall);		return sellerMall;			}		}