package com.axp.service.impl;import java.sql.Timestamp;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.commons.lang.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.interceptor.TransactionAspectSupport;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.axp.dao.IChangeNoteDao;import com.axp.domain.ChangeNote;import com.axp.domain.ReGoodsOfChangeMall;import com.axp.domain.ReGoodsSnapshot;import com.axp.domain.Seller;import com.axp.domain.Users;import com.axp.service.IChangeNoteService;import com.axp.util.CalcUtil;import com.axp.util.Parameter;import com.axp.util.ParameterUtil;import com.axp.util.QueryModel;import com.axp.util.StringUtil;@Servicepublic class ChangeNoteServiceImpl extends BaseServiceImpl<ChangeNote> implements IChangeNoteService {	@Autowired	public IChangeNoteDao changeNoteDao;	public String PATH="http://jifen.aixiaoping.cn:8080/jupinhuiRes/";	@Override	public Map<String, Object> getChangeReplys(HttpServletRequest request, HttpServletResponse response) {		Parameter parameter = ParameterUtil.getParameter(request);		Map<String, Object> statusMap = new HashMap<String, Object>();		Map<String, Object> dataMap = new HashMap<String, Object>();		List<Map<String, Object>> dataList = new ArrayList<>();		try {			Integer pageIndex = parameter.getData().getInteger("pageIndex");			String userId = parameter.getUserId();			QueryModel queryModel = new QueryModel();			Users user = null;						int totalPage = 0;			int count1 = 0;			int changeCount1 = 0;			int count2 = 0;			int changeCount2 = 0;			int page =pageItemCount;			int start = (pageIndex - 1) * page;						List<ChangeNote> clist = new ArrayList<ChangeNote>();			List<ChangeNote> clist1 = new ArrayList<ChangeNote>();			if (StringUtils.isNotBlank(userId)) {				if(Integer.parseInt(userId)>0){					 user = usersDao.findById(Integer.parseInt(userId));					 queryModel.combPreEquals("isValid",true);					 queryModel.combEquals("sendUsers.id", user.getId());					 queryModel.setOrder("lastTopTime desc");					 count1 = dateBaseDAO.findCount(ChangeNote.class, queryModel);					 changeCount1 = dateBaseDAO.findCount(ChangeNote.class, queryModel);					 clist1 = dateBaseDAO.findPageList(ChangeNote.class, queryModel, start, page);				}			}						queryModel.clearQuery();			queryModel.combPreEquals("isValid",true);			queryModel.combPreEquals("checkStatus", true);			queryModel.setOrder("lastTopTime desc");			count2 = dateBaseDAO.findCount(ChangeNote.class, queryModel);			changeCount2 = dateBaseDAO.findCount(ChangeNote.class, queryModel);			clist = dateBaseDAO.findPageList(ChangeNote.class, queryModel, start, page);						int count = (int) CalcUtil.add(count1, count2);			int changeCount = (int) CalcUtil.add(changeCount1, changeCount2);			clist1.addAll(clist);						if (clist1!=null && clist1.size()>0) {				for (ChangeNote note : clist1) {					Map<String, Object> noteMap = new HashMap<String, Object>();					Users users = note.getSendUsers();					if(users==null){						continue;					}					queryModel.clearQuery();					queryModel.combPreEquals("isValid", true);					queryModel.combPreEquals("user_id", users.getId());					queryModel.setOrder("id desc");					List<Seller> slist = dateBaseDAO.findLists(Seller.class, queryModel);					Seller seller = null;					if (slist.size()>0) {						for (int i = 0; i < slist.size(); i++) {							seller = slist.get(i);							noteMap.put("address", seller.getAddress());						}					}					if (note.getGoodsIds()!=null) {						 String goodsIds = note.getGoodsIds(); 						    if (goodsIds.startsWith("[")) {						    	goodsIds = goodsIds.substring(1,goodsIds.length()-1);							}						   						List<ReGoodsOfChangeMall> cmlist = reGoodsOfChangeMallDao.findByIds(goodsIds);						if (cmlist!=null && cmlist.size()>0) {							List<Map<String, Object>> listMap=new ArrayList<>();							for (ReGoodsOfChangeMall changeMall : cmlist) {																ReGoodsSnapshot goodsSnapshot = changeMall.getSnapshotGoods();								String covers = goodsSnapshot.getCoverPic();																if(StringUtil.hasLength(covers)&&covers.startsWith("[")){									JSONArray array = JSONArray.parseArray(covers);									if(array.size()>0){										for (int j = 0; j < array.size(); j++) {											Map<String, Object> map=new HashMap<>();											covers = PATH+array.getJSONObject(j).getString("imgUrl");											map.put("image", covers);											map.put("goodsOrder", changeMall.getGoodsOrder());											listMap.add(map);																					}																			}								}								noteMap.put("goodsImgs", listMap);							}													}else{							List<String> imgs = new ArrayList<String>();							noteMap.put("goodsImgs", imgs);						}					}										if (note.getCoverPic()!=null) {						List<Map<String, Object>> list = new ArrayList<Map<String,Object>>();						String covers = note.getCoverPic();						if (covers.length()>2) {							String str = covers.substring(1, covers.length()-1);							if (str.contains(",")) {								String[] s = str.split(",");								for (int i = 0; i < s.length; i++) {									Map<String, Object> map=new HashMap<>();									String s1 = s[i].substring(1,s[i].length()-1);									map.put("image", PATH+s1);									map.put("goodsOrder", "");									list.add(map);								}															}else{								Map<String, Object> map=new HashMap<>();								String s1 = str.substring(1,str.length()-1);								map.put("image", PATH+s1);								map.put("goodsOrder", "");								list.add(map);							}							noteMap.put("goodsImgs", list);						}else{							noteMap.put("goodsImgs", list);						}					}									String imgUrl =StringUtil.getUserDefaultHead(users, PATH);					String uN= users.getName().substring(users.getName().length()-4, users.getName().length());					noteMap.put("replyUserId", users.getId());					noteMap.put("userName", StringUtils.isBlank(users.getRealname())?uN+"****":users.getRealname());					noteMap.put("content", note.getContent());					noteMap.put("topTime", note.getLastTopTime());					noteMap.put("headImg", imgUrl);															dataList.add(noteMap);									}			}						if (changeCount>0) {				count=changeCount;			}						totalPage = (count % page) > 0 ? ((count / page) + 1) : (count / page);						dataMap.put("noteList", dataList);			dataMap.put("pageSize", totalPage);			dataMap.put("pageIndex", pageIndex);			dataMap.put("pageItemCount", pageItemCount);			statusMap.put("data", dataMap);			statusMap.put("status", 1);			statusMap.put("message", "请求成功");		} catch (Exception e) {			e.printStackTrace();			statusMap.put("data", dataMap);			statusMap.put("status",-1);			statusMap.put("message", "请求失败");		}		return statusMap;	}				public List<Map<String, Object>>  getGoodsMap(String goodsIds){		List<Map<String, Object>> dataList = new ArrayList<>();		Map<String, Object> map = new HashMap<String, Object>();		List<ReGoodsOfChangeMall> clist = reGoodsOfChangeMallDao.findByIds(goodsIds);		if (clist.size()>0) {			for (ReGoodsOfChangeMall changeMall : clist) {								ReGoodsSnapshot goodsSnapshot = changeMall.getSnapshotGoods();				String covers = goodsSnapshot.getCoverPic();				if(StringUtil.hasLength(covers)&&covers.startsWith("[")){					JSONArray array = JSONArray.parseArray(covers);					if(array.size()>0){						covers = PATH+array.getJSONObject(0).getString("imgUrl");					}				}else{					covers="";				}				map.put("img", covers);				dataList.add(map);			}		}		return dataList;	}	@Override	public Map<String, Object> getMyChangeReplys(HttpServletRequest request, HttpServletResponse response) {		Map<String, Object> statusMap = new HashMap<String, Object>();		Map<String, Object> dataMap = new HashMap<String, Object>();				List<Map<String, Object>> dataList = new ArrayList<>();		try {			Parameter parameter = ParameterUtil.getParameter(request);			Integer pageIndex = parameter.getData().getInteger("pageIndex");			String userId = parameter.getUserId();			List<ChangeNote> clist = new ArrayList<ChangeNote>();						QueryModel queryModel = new QueryModel();			queryModel.combPreEquals("sendUsers.id", Integer.parseInt(userId),"sendUsersId");			queryModel.combPreEquals("isValid",true);			queryModel.setOrder("lastTopTime desc");			int totalPage = 0;			int count = 0;			int changeCount = 0;			int page =pageItemCount;			int start = (pageIndex - 1) * page;						count = dateBaseDAO.findCount(ChangeNote.class, queryModel);			changeCount = dateBaseDAO.findCount(ChangeNote.class, queryModel);			clist = dateBaseDAO.findPageList(ChangeNote.class, queryModel, start, page);			for (ChangeNote note : clist) {				Map<String, Object> noteMap = new HashMap<String, Object>();				noteMap.put("noteId", note.getId());				noteMap.put("content", note.getContent());				noteMap.put("topTime", note.getLastTopTime());				if (note.getCheckStatus()==null) {					noteMap.put("checkStatus","审核不通过");					noteMap.put("checkFaildMsg", StringUtils.isBlank(note.getCheckRemark())?"审核不通过":note.getCheckRemark());				}else if(!note.getCheckStatus()){					noteMap.put("checkStatus", "待审核");					noteMap.put("checkFaildMsg", "贴子审核成功才能顶哦，请稍等一下呢！");				}else if(note.getCheckStatus()){					noteMap.put("checkStatus", "审核通过");					noteMap.put("checkFaildMsg", "");				}			    String goodsIds = note.getGoodsIds(); 			    if (goodsIds!=null) {			    	  if (goodsIds.startsWith("[")) {					    	goodsIds = goodsIds.substring(1,goodsIds.length()-1);						}					   						List<ReGoodsOfChangeMall> cmlist = reGoodsOfChangeMallDao.findByIds(goodsIds);						if (cmlist!=null && cmlist.size()>0) {							List<Map<String, Object>> listMap=new ArrayList<>();							for (ReGoodsOfChangeMall changeMall : cmlist) {																ReGoodsSnapshot goodsSnapshot = changeMall.getSnapshotGoods();								if (goodsSnapshot!=null) {																		Map<String, Object> map=new HashMap<>();									map.put("goodsId", changeMall.getGoodsOrder().substring(3,changeMall.getGoodsOrder().length()));									map.put("coverPic", goodsSnapshot.getPrefixCoverPic(PATH));									map.put("goodsOrder", changeMall.getGoodsOrder());									map.put("goodsName", goodsSnapshot.getName());									map.put("displayPrice", changeMall.getDisplayPrice());									map.put("coverPicOne", PATH+goodsSnapshot.getCoverPicForUse());																		listMap.add(map);																	}								noteMap.put("goodsInfos", listMap);							}													}										}else if(note.getCoverPic()!=null){					List<Map<String, Object>> list = new ArrayList<Map<String,Object>>();					String covers = note.getCoverPic();					if (covers.length()>2) {						List<String> strlist = new ArrayList<String>();						String str = covers.substring(1, covers.length()-1);						if (str.contains(",")) {							String[] s = str.split(",");							for (int i = 0; i < s.length; i++) {								Map<String, Object> map=new HashMap<>();								String s1 = s[i].substring(1,s[i].length()-1);								map.put("goodsId", -1);								map.put("goodsName", "");								map.put("displayPrice", -1);								map.put("coverPic", strlist);								map.put("goodsOrder", "");								map.put("coverPicOne", PATH+s1);								list.add(map);							}													}else{							Map<String, Object> map=new HashMap<>();							String s1 = str.substring(1,str.length()-1);							map.put("goodsId", -1);							map.put("goodsName", "");							map.put("displayPrice", -1);							map.put("coverPic", strlist);							map.put("goodsOrder", "");							map.put("coverPicOne", PATH+s1);							list.add(map);						}						noteMap.put("goodsInfos", list);					}else{						noteMap.put("goodsInfos", list);					}				}else{					List<Map<String, Object>> listMap=new ArrayList<>();					noteMap.put("goodsInfos", listMap);				}			  				dataList.add(noteMap);			}			if (changeCount>0) {				count=changeCount;			}						totalPage = (count % page) > 0 ? ((count / page) + 1) : (count / page);						dataMap.put("noteList", dataList);			dataMap.put("pageSize", totalPage);			dataMap.put("pageIndex", pageIndex);			dataMap.put("pageItemCount", pageItemCount);			statusMap.put("data", dataMap);			statusMap.put("status", 1);			statusMap.put("message", "请求成功");		} catch (Exception e) {			e.printStackTrace();			statusMap.put("status", -1);			statusMap.put("message", "请求失败");		}		return statusMap;	}	@Override	public Map<String, Object> sendReplys(HttpServletRequest request, HttpServletResponse response) {		Map<String, Object> statusMap = new HashMap<String, Object>();		try {			Parameter parameter = ParameterUtil.getParameter(request);			Integer noteId = parameter.getData().getInteger("noteId");			String content = parameter.getData().getString("content");			String IsGoodsType = parameter.getData().getString("IsGoodsType");//是否带商品贴（1：带商品，2：不带商品）			String goodsIds = parameter.getData().getString("goodsIds");//商品IDS			JSONArray coverPic = parameter.getData().getJSONArray("coversPic");//带图发帖			String userId = parameter.getUserId();			Users users = null;			if (StringUtils.isNotBlank(userId)) {				users = usersDao.findById(Integer.parseInt(userId));			}else{				statusMap.put("status", -2);				statusMap.put("message", "当前用户未登录！发帖失败！");				return statusMap;			}						ChangeNote changeNote = null;			if (noteId==0) {				changeNote = new ChangeNote();			}else{				changeNote = changeNoteDao.findById(noteId);			}			if (StringUtils.isNotBlank(IsGoodsType) && IsGoodsType.equals("1")) {				changeNote.setCheckStatus(false);				changeNote.setContent(content);				changeNote.setIsValid(true);				changeNote.setCreateTime(new Timestamp(System.currentTimeMillis()));				changeNote.setLastTopTime(new Timestamp(System.currentTimeMillis()));				changeNote.setSendUsers(users);				changeNote.setGoodsIds(goodsIds);								if (coverPic!=null && coverPic.size()>0) {					List<Map<String, Object>> coverPicList=new ArrayList<>();					for (Object object : coverPic) {						Map<String, Object> map=new HashMap<>();						map.put("imgUrl", object.toString());						coverPicList.add(map);					}										changeNote.setCoverPic(JSONObject.toJSONString(coverPic).toString());				}				changeNoteDao.saveOrUpdate(changeNote);							}else{				changeNote.setCheckStatus(false);				changeNote.setContent(content);				changeNote.setIsValid(true);				changeNote.setCreateTime(new Timestamp(System.currentTimeMillis()));				changeNote.setLastTopTime(new Timestamp(System.currentTimeMillis()));				changeNote.setSendUsers(users);				if (coverPic!=null && coverPic.size()>0) {					List<Map<String, Object>> coverPicList=new ArrayList<>();					for (Object object : coverPic) {						Map<String, Object> map=new HashMap<>();						map.put("imgUrl", object.toString());						coverPicList.add(map);					}										changeNote.setCoverPic(JSONObject.toJSONString(coverPic).toString());				}				changeNoteDao.saveOrUpdate(changeNote);			}									statusMap.put("status", 1);			statusMap.put("message", "发布成功！");		} catch (Exception e) {			e.printStackTrace();			statusMap.put("status", -1);			statusMap.put("message", "发布失败！");			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();					}		return statusMap;	}	@Override	public Map<String, Object> getMyChangeGoods(HttpServletRequest request, HttpServletResponse response) {		Map<String, Object> statusMap = new HashMap<String, Object>();		Map<String, Object> dataMap = new HashMap<String, Object>();		List<Map<String, Object>> goodslist = new ArrayList<Map<String,Object>>();		try {			Parameter parameter = ParameterUtil.getParameter(request);			String userId = parameter.getUserId();			Users users = usersDao.findById(Integer.parseInt(userId));			Seller seller = null;			QueryModel queryModel = new QueryModel();			if (users!=null) {				queryModel.combPreEquals("isValid", true);				queryModel.combPreEquals("user_id", users.getId());				queryModel.setOrder("id desc");				List<Seller> slist = dateBaseDAO.findLists(Seller.class, queryModel);				ReGoodsOfChangeMall changeMall = null;				ReGoodsSnapshot goodsSnapshot = null;				if (slist.size()>0) {					seller = slist.get(0);					queryModel.clearQuery();					queryModel.combPreEquals("isValid", true);					queryModel.combPreEquals("sellerId", seller.getId());					List<ReGoodsSnapshot> snlist = dateBaseDAO.findLists(ReGoodsSnapshot.class, queryModel);										if (snlist.size()>0) {						Map<String, Object> goodsMap = new HashMap<String, Object>();						for (int i = 0; i < snlist.size(); i++) {							goodsSnapshot = snlist.get(i);							String covers = goodsSnapshot.getCoverPic();							if(StringUtil.hasLength(covers)&&covers.startsWith("[")){								JSONArray array = JSONArray.parseArray(covers);								if(array.size()>0){									covers = PATH+array.getJSONObject(0).getString("imgUrl");								}							}else{								covers="";							}														queryModel.clearQuery();							queryModel.combPreEquals("isValid", true);							queryModel.combPreEquals("snapshotId", goodsSnapshot.getId());							List<ReGoodsOfChangeMall> rclist = dateBaseDAO.findLists(ReGoodsOfChangeMall.class, queryModel);							if (rclist.size()>0) {								for (int j = 0; j < rclist.size(); j++) {									changeMall = rclist.get(j);									goodsMap.put("goodsId", changeMall.getId());									goodsMap.put("goodsPrice", changeMall.getPrice());								}							}							goodsMap.put("goodsImg", covers);							goodsMap.put("goodsName", goodsSnapshot.getName());							goodslist.add(goodsMap);						}					}									}			}			dataMap.put("goodslist", goodslist);			statusMap.put("dataMap", dataMap);			statusMap.put("status", 1);			statusMap.put("message", "请求成功！");		} catch (Exception e) {			e.printStackTrace();			statusMap.put("status", -1);			statusMap.put("message", "请求失败！");			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();		}		return statusMap;	}	@Override	public Map<String, Object> delNote(HttpServletRequest request, HttpServletResponse response) {		Map<String, Object> statusMap = new HashMap<String, Object>();		try {			Parameter parameter = ParameterUtil.getParameter(request);			String noteId = parameter.getData().getString("noteIds");			String userId = parameter.getUserId();			if (StringUtils.isBlank(userId)) {				statusMap.put("status",-1);				statusMap.put("message", "用户未登录！");				return statusMap;			}						if (StringUtils.isNotBlank(noteId) && noteId.startsWith("[")) {				noteId = noteId.substring(1,noteId.length()-1);				List<ChangeNote> clist = changeNoteDao.findByIds(noteId);				 for (ChangeNote note : clist) {					note.setIsValid(false);					changeNoteDao.saveOrUpdate(note);				}			}			statusMap.put("status", 1);			statusMap.put("message", "删除成功");		} catch (Exception e) {			statusMap.put("status", -1);			statusMap.put("message", "删除失败");			e.printStackTrace();			if(!TransactionAspectSupport.currentTransactionStatus().isRollbackOnly()){				TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();			}		}		return statusMap;	}	@Override	public Map<String, Object> noteIstop(HttpServletRequest request, HttpServletResponse response) {		Map<String, Object> statusMap = new HashMap<String, Object>();		try {			Parameter parameter = ParameterUtil.getParameter(request);			String noteId = parameter.getData().getString("noteId");			String userId = parameter.getUserId();			if (StringUtils.isBlank(userId)) {				statusMap.put("status",-1);				statusMap.put("message", "用户未登录！");				return statusMap;			}			QueryModel queryModel = new QueryModel();			queryModel.combPreEquals("isValid", true);			queryModel.combPreEquals("checkStatus", true);			queryModel.combPreEquals("sendUsers.id", Integer.parseInt(userId),"sendUsersId");			queryModel.combPreEquals("id", Integer.parseInt(noteId));			List<ChangeNote> clist = dateBaseDAO.findLists(ChangeNote.class, queryModel);			if (clist.size()>0) {				for (ChangeNote note : clist) {					note = clist.get(0);					note.setLastTopTime(new Timestamp(System.currentTimeMillis()));					changeNoteDao.saveOrUpdate(note);				}				statusMap.put("status", 1);				statusMap.put("message", "顶贴成功");			}else{				statusMap.put("status", -1);				statusMap.put("message", "该贴待审核,顶贴失败");			}					} catch (Exception e) {			statusMap.put("status", -1);			statusMap.put("message", "顶贴失败");			e.printStackTrace();			if(!TransactionAspectSupport.currentTransactionStatus().isRollbackOnly()){				TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();			}		}		return statusMap;	}}