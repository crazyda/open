package com.axp.service.impl;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.axp.domain.*;import com.axp.service.IReGoodsOfBaseService;import com.axp.service.IReShoppingCarService;import com.axp.util.*;import com.axp.util.Parameter;import org.apache.commons.lang.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.interceptor.TransactionAspectSupport;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.util.*;import java.util.Map.Entry;@Servicepublic class ReShoppingCarServiceImpl extends BaseServiceImpl<ReShoppingCar> implements IReShoppingCarService {    @Autowired    IReGoodsOfBaseService reGoodsOfBaseService;    @Override    public Map<String, Object> getShoppingCarList(HttpServletRequest request, HttpServletResponse response) {        //参数检查；        Parameter parameter;        Integer userId;        String basePath = request.getServletContext().getAttribute("RESOURCE_LOCAL_URL").toString();        String xcx = request.getParameter("xcx");        if(xcx != null){        	userId = request.getParameter("userId")==""?-1:Integer.valueOf(request.getParameter("userId"));        }else{        	 parameter = ParameterUtil.getParameter(request);             userId = Integer.parseInt(parameter.getUserId());        }                try {            if (userId == null || userId < 1) {                return JsonResponseUtil.getJson(-0x02, "参数错误：userId为空或者小于1；");            }        } catch (Exception e) {            e.printStackTrace();            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();            return JsonResponseUtil.getJson(-0x02, "参数data错误：参数data不是合法的json字符串，解析时出错；");        }        try {            //获取购物车列表信息；            List<ReShoppingCar> shoppringCarList = reShoppingCarDao.getShoppingCarByUserId(userId);            //对查询结果进行分组；（按商家分组）            Map<Integer, List<ReShoppingCar>> orderMap = orderShoppingCarBySeller(shoppringCarList);            //拼装返回结果；            List<Map<String, Object>> returnList = new ArrayList<>();            Set<Entry<Integer, List<ReShoppingCar>>> entrySet = orderMap.entrySet();            for (Entry<Integer, List<ReShoppingCar>> eachEntry : entrySet) {                Integer sellerId = eachEntry.getKey();                List<ReShoppingCar> shppingCarListOrderBySeller = eachEntry.getValue();                Map<String, Object> map = new HashMap<>();//装载一个商家商品的信息；                //商家信息；                Map<String, Object> sellerMap = new HashMap<>();                Seller seller = sellerDAO.get(sellerId);                sellerMap.put("sellerId", seller.getId());//商家id值；                sellerMap.put("sellerName", seller.getName());//商家名称；                sellerMap.put("sellerIcon", basePath + seller.getHeadImg());//商家的店铺头像；                sellerMap.put("sellerAddress", seller.getAddress());//商家店铺的地址；                sellerMap.put("sellerPhone", seller.getPhone());//商家电话；                map.put("seller", sellerMap);                //此商家对应的购物车明细信息；                List<Map<String, Object>> itemList = new ArrayList<>();                for (ReShoppingCar eachSellerShoppingCar : shppingCarListOrderBySeller) {                    Map<String, Object> itemMap = new HashMap<>();                    itemMap.put("shoppingCarItemId", eachSellerShoppingCar.getId());                    itemMap.put("number", eachSellerShoppingCar.getGoodsQuantity());                    itemMap.put("specString", eachSellerShoppingCar.getStandardName());                    Integer stock = 0;                    String goodsOrder = eachSellerShoppingCar.getGoodsOrder();                    ReGoodsOfSellerMall sellerMall =null;                    if (goodsOrder!=null) {                    	String str = goodsOrder.substring(0,3);                        String goodId = goodsOrder.substring(3,goodsOrder.length());                        if (str.equals("sem")) {    						sellerMall = reGoodsOfSellerMallDao.findById(Integer.parseInt(goodId));    						if (sellerMall.getIsNoStandard()) {								stock=sellerMall.getNoStandardRepertory();							}else{								stock = StringUtil.getGoodsStock(eachSellerShoppingCar, sellerMall);							}    					}else if(str.equals("lsm")){    						ReGoodsOfLocalSpecialtyMall specialtyMall = reGoodsOfLocalSpecialtyMallDao.findById(Integer.parseInt(goodId));    						if (specialtyMall.getReGoodsOfSellerMall()!=null) {								sellerMall = reGoodsOfSellerMallDao.findById(specialtyMall.getReGoodsOfSellerMall().getId());								if (sellerMall.getIsNoStandard()) {									stock = sellerMall.getNoStandardRepertory();								}else {									stock = StringUtil.getGoodsStock(eachSellerShoppingCar, sellerMall);								}							}else{								if (specialtyMall.getIsNoStandard()) {									stock = specialtyMall.getNoStandardRepertory();								}else {									stock = specialtyMall.getDefaultRepertory();								}															}    					}else if(str.equals("scm")){    						ReGoodsOfScoreMall scoreMall = reGoodsOfScoreMallDao.findById(Integer.parseInt(goodId));    						if (scoreMall.getReGoodsOfSellerMall()!=null) {								sellerMall = reGoodsOfSellerMallDao.findById(scoreMall.getReGoodsOfSellerMall().getId());								if (sellerMall.getIsNoStandard()) {									stock = sellerMall.getNoStandardRepertory();								}else{									stock = StringUtil.getGoodsStock(eachSellerShoppingCar, sellerMall);								}							}else{								if (scoreMall.getIsNoStandard()) {									stock = scoreMall.getNoStandardRepertory();								}else{									stock = scoreMall.getDefaultRepertory();								}							}    					}					}                                        itemMap.put("stock",stock);                    //商品信息；                    Map<String, Object> goodsMap = new HashMap<>();                    goodsMap.put("goodsId", eachSellerShoppingCar.getGoodsOrder());//这里虽然是商品id，但是，商品id不足以区分唯一的商品，这里传递的是商品的序号；                    goodsMap.put("name", eachSellerShoppingCar.getGoodsName());//商品的名称；                    goodsMap.put("price", eachSellerShoppingCar.getGoodsPrice());//商品的售价；                    goodsMap.put("score", eachSellerShoppingCar.getScore());//商品需要的积分；                    goodsMap.put("cashpoint", eachSellerShoppingCar.getRedPaper());//商品可以使用的红包；                    goodsMap.put("costPrice", eachSellerShoppingCar.getDisplayPrice());//商品的成本价；                    goodsMap.put("coverPic", basePath + eachSellerShoppingCar.getSnapshot().getCoverPicForUse());//商品封面图片；                    itemMap.put("goods", goodsMap);                    itemList.add(itemMap);                }                map.put("shoppingCarItems", itemList);                returnList.add(map);            }            //返回结果值；            Map<String, Object> dataMap = new HashMap<>();            dataMap.put("dataList", returnList);            return JsonResponseUtil.getJson(0x01, "操作成功", dataMap);        } catch (Exception e) {            e.printStackTrace();            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();            return JsonResponseUtil.getJson(-0x02, "后台查询出错");        }    }    /**     * 根据商家对购物车明细进行分类；     * 目的：     * 以商家为划分，将购物车对象，划分成组，每个商家一组；     *     * @param shoppringCarList 用户的购物车中的数据集合；     * @return     */    private Map<Integer, List<ReShoppingCar>> orderShoppingCarBySeller(List<ReShoppingCar> shoppringCarList) {        //装载返回结果的map；        Map<Integer, List<ReShoppingCar>> resultMap = new HashMap<>();        //所有商家id的集合；        Set<Integer> keySet = resultMap.keySet();        //遍历集合，并分组；        for (ReShoppingCar each : shoppringCarList) {            if (CollectionUtil.isInMap(each.getSeller().getId(), keySet)) {//如果这个商家已经在resultMap中了，那么就将这个对象，放到resultMap集合中对应id值的List集合中；                resultMap.get(each.getSeller().getId()).add(each);            } else {//如果不在resultMap中，就创建一条信息，使用id值作为key，放到resultMap集合中；                List<ReShoppingCar> list = new ArrayList<>();                list.add(each);                resultMap.put(each.getSeller().getId(), list);            }        }        //返回结果值；        return resultMap;    }    @Override    public Map<String, Object> putShoppingCar(HttpServletRequest request, HttpServletResponse response) {        //参数检查；        String goodsOrder;//商品序号（商城前缀+商品id）        Integer userId;//用户id；        Integer number;//商品数量；        JSONArray specsArray = new JSONArray();        Boolean hasStandardDetails = true;//是否有商品规格；        List<Integer> detailIds;//商品规格的id集合；        String xcx = request.getParameter("xcx");        if(xcx != null){        	goodsOrder = request.getParameter("goodsId");        	userId = Integer.valueOf(request.getParameter("userId"));        	number = Integer.valueOf(request.getParameter("number"));        	String spec = request.getParameter("specs")=="\"\""?null:request.getParameter("specs");			System.out.println("spec:"+request.getParameter("specs").equals("\"\""));			if(spec != null && spec != "" && !("\"\"").equals(spec)){				specsArray = JSONArray.parseArray(spec);			}        }else{        	 Parameter parameter = ParameterUtil.getParameter(request);             goodsOrder = parameter.getData().getString("goodsId");        	 userId = Integer.parseInt(parameter.getUserId());             number = Integer.parseInt(parameter.getData().getString("number"));             specsArray = JSONObject.parseArray(parameter.getData().getString("specs"));        }        try {                       if (goodsOrder.length() < 4) {                return JsonResponseUtil.getJson(-0x02, "参数错误：goodsId为非法参数，形式为前三个字符为区分商城的字符串，后面紧跟商品id值；");            } else {                Integer mallId = ReBaseGoods.getMallTypeId(goodsOrder.substring(0, 3));                if (mallId < 1 || mallId > 8) {                    return JsonResponseUtil.getJson(-0x02, "参数错误：mallId应在1-8之间，所传参数不在预期区间内；");                }            }                       detailIds = new ArrayList<>();            if (specsArray != null) {//前段可能不传specs字段；                for (int i = 0; i < specsArray.size(); i++) {                    detailIds.add(specsArray.getInteger(i));                }            }            if (detailIds.size() == 0) {                hasStandardDetails = false;            } else if (detailIds.size() > 3) {                return JsonResponseUtil.getJson(-0x02, "参数错误：specs中包含了多于三个参数，而商品最多只能拥有三个规格；");            }        } catch (Exception e) {            e.printStackTrace();            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();            return JsonResponseUtil.getJson(-0x02, "参数错误：请求的json参数为非法格式，解析时出错；");        }        try {            //保存订单操作；1:如果该商品，的同一规格，已经出现在了购物车中，那么就只累加数量；2：如果没有，就直接添加；            ReShoppingCar rsc = alreadyInShoppingCar(goodsOrder, detailIds, getShoppingCarByUserId(userId));            if (rsc == null) {//不同            	ReShoppingCar saveCar = saveShoppingCar(userId, goodsOrder, number, detailIds, hasStandardDetails,false);            	if(saveCar == null){            		return JsonResponseUtil.getJson(-0xc0, "该商品存在规格，请选择规格");            	}            } else {//相同                editShoppingCarNumber(rsc, rsc.getGoodsQuantity() + number);            }            //返回结果；            return JsonResponseUtil.getJson(0x01, "添加成功");        } catch (Exception e) {            e.printStackTrace();            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();            return JsonResponseUtil.getJson(-0x02, "添加失败");        }    }    /**     * 向已经存在的购物车对象中添加数量；     *     * @param shoppingCar 购物车对象；     * @param number      数量（这个数量是更改过之后的数量，直接设置到购物车中）；     */    private void editShoppingCarNumber(ReShoppingCar shoppingCar, Integer number) {        shoppingCar.setGoodsQuantity(number);    }    @Override    public ReShoppingCar saveShoppingCar(Integer userId, String goodsOrder, Integer number, List<Integer> detailIds, Boolean hashStandardDetails,Boolean isTeam) {        Object mallGoods = reGoodsOfBaseService.getMall(goodsOrder);                ReBaseGoods baseGoods= (ReBaseGoods) mallGoods;        if(!baseGoods.getIsNoStandard()&&detailIds.size()==0){        	return null;        }                //要保存的购物车对象，并向里面填充数据；        ReShoppingCar shoppingCar = new ReShoppingCar();        reShoppingCarDao.save(shoppingCar);        shoppingCar.setGoodsOrder(goodsOrder);//商品序号；        shoppingCar.setMallTypeId(ReBaseGoods.getMallTypeId(reGoodsOfBaseService.getMallType(goodsOrder)));//商城类型id；        shoppingCar.setGoodsId(reGoodsOfBaseService.getMallValue(goodsOrder));//商品id；        shoppingCar.setGoodsQuantity(number);//商品数量；        shoppingCar.setUser(usersDao.get(userId));//商品对用的用户；        if (mallGoods instanceof ReGoodsOfSellerMall) {            ReGoodsOfSellerMall g = (ReGoodsOfSellerMall) mallGoods;            shoppingCar.setGoodsImage(g.getSnapshotGoods().getCoverPic());//商品的封面图片；            shoppingCar.setDisplayPrice(g.getDisplayPrice());//商品的显示售价；            shoppingCar.setLoginsticsType(g.getTransportationType());//商品的运输类型；            shoppingCar.setLogisticsPrice(g.getTransportationPrice());//商品的物流费用；            shoppingCar.setSellerName(g.getSnapshotGoods().getSeller().getName());//商家名称；            shoppingCar.setGoodsName(g.getSnapshotGoods().getName());//商品名称；            shoppingCar.setSnapshot(g.getSnapshotGoods());//商品关联的快照商品；            shoppingCar.setSeller(g.getSnapshotGoods().getSeller());//商品关联的商家对象；                        //设置商品规格，及其规格售价，红包，积分（需要区分有商品规格和无商品规格）；            Map<String, Object> standardDetail;            if (hashStandardDetails) {//有规格；               	standardDetail = g.getStandardDetailByIdList(detailIds);            } else {//无规格；                standardDetail = new HashMap<>();                standardDetail.put("price", g.getNoStandardPrice());                standardDetail.put("redPaper",0);                standardDetail.put("score", 0);            }            shoppingCar.setGoodsPrice(Double.parseDouble(standardDetail.get("price").toString()));//商品的售价；            shoppingCar.setRedPaper(0d);//商品可抵扣的红包；            shoppingCar.setScore(0);//商品所需要的积分；            shoppingCar.setGoodsStandardString(g.getShoppingCarStandardDetails(detailIds));//购物车对象的规格明细；        } else if (mallGoods instanceof ReGoodsOfScoreMall) {            ReGoodsOfScoreMall g = (ReGoodsOfScoreMall) mallGoods;            shoppingCar.setGoodsImage(g.getSnapshotGoods().getCoverPic());//商品的封面图片；            shoppingCar.setDisplayPrice(g.getDisplayPrice());//商品的显示售价；            shoppingCar.setLoginsticsType(g.getTransportationType());//商品的运输类型；            shoppingCar.setLogisticsPrice(g.getTransportationPrice());//商品的物流费用；            shoppingCar.setSellerName(g.getSnapshotGoods().getSeller().getName());//商家名称；            shoppingCar.setGoodsName(g.getSnapshotGoods().getName());//商品名称；            shoppingCar.setSnapshot(g.getSnapshotGoods());//商品关联的快照商品；            shoppingCar.setSeller(g.getSnapshotGoods().getSeller());//商品关联的商家对象；                        shoppingCar.setGoodsPrice(Double.valueOf(g.getScoreGoodMoney()==null?"0.0":g.getScoreGoodMoney()));            //设置商品规格，及其规格售价，红包，积分（需要区分有商品规格和无商品规格）；            ReGoodsOfSellerMall sellerMall=g.getReGoodsOfSellerMall();            Map<String, Object> standardDetail;            if (hashStandardDetails) {//有规格；            	if(sellerMall!=null){            		standardDetail=sellerMall.getStandardDetailByIdList(detailIds);            		if(g.getNoStandardScore()!=null&&g.getNoStandardScore()>0){            			standardDetail.put("score", g.getScore());            		}else{            			//int score=(int)Math.ceil(Double.parseDouble(standardDetail.get("score").toString()));            			int score = (int) standardDetail.get("score");            			standardDetail.put("score", score);            		}            		            		standardDetail.put("price", g.getScoreGoodMoney()==null?"0.0":g.getScoreGoodMoney());            	}else{            		standardDetail = g.getStandardDetailByIdList(detailIds);            	}            } else {//无规格；                standardDetail = new HashMap<>();                standardDetail.put("price", g.getScoreGoodMoney()==null?"0.0":g.getScoreGoodMoney());// da 0                standardDetail.put("redPaper", 0);                standardDetail.put("score", g.getNoStandardScore());            }            shoppingCar.setGoodsPrice(Double.parseDouble(standardDetail.get("price").toString()));//商品的售价；            shoppingCar.setRedPaper(0d);//商品可抵扣的红包；            shoppingCar.setScore(Integer.parseInt(standardDetail.get("score").toString()));//商品所需要的积分；            shoppingCar.setGoodsStandardString(g.getShoppingCarStandardDetails(detailIds));//购物车对象的规格明细；        } else if (mallGoods instanceof ReGoodsOfSeckillMall) {            ReGoodsOfSeckillMall g = (ReGoodsOfSeckillMall) mallGoods;            shoppingCar.setGoodsImage(g.getSnapshotGoods().getCoverPic());//商品的封面图片；            shoppingCar.setDisplayPrice(g.getDisplayPrice());//商品的显示售价；            shoppingCar.setLoginsticsType(g.getTransportationType());//商品的运输类型；            shoppingCar.setLogisticsPrice(g.getTransportationPrice());//商品的物流费用；            shoppingCar.setSellerName(g.getSnapshotGoods().getSeller().getName());//商家名称；            shoppingCar.setGoodsName(g.getSnapshotGoods().getName());//商品名称；            shoppingCar.setSnapshot(g.getSnapshotGoods());//商品关联的快照商品；            shoppingCar.setSeller(g.getSnapshotGoods().getSeller());//商品关联的商家对象；            ReGoodsOfSellerMall sellerMall=g.getReGoodsOfSellerMall();            //设置商品规格，及其规格售价，红包，积分（需要区分有商品规格和无商品规格）；            Map<String, Object> standardDetail;                        if(sellerMall!=null){            	standardDetail = new HashMap<>();                standardDetail.put("price", g.getPrice());                standardDetail.put("redPaper", 0);                standardDetail.put("score", 0);            }else{	            if (hashStandardDetails) {//有规格；	            	standardDetail=g.getStandardDetailByIdList(detailIds);	            } else {//无规格；	                standardDetail = new HashMap<>();	                standardDetail.put("price", g.getNoStandardPrice());	                standardDetail.put("redPaper", 0);	                standardDetail.put("score", 0);	            }            }            shoppingCar.setGoodsPrice(Double.parseDouble(standardDetail.get("price").toString()));//商品的售价；            shoppingCar.setRedPaper(0d);//商品可抵扣的红包；            shoppingCar.setScore(Integer.parseInt(standardDetail.get("score").toString()));//商品所需要的积分；            shoppingCar.setGoodsStandardString(g.getShoppingCarStandardDetails(detailIds));//购物车对象的规格明细；        } else if (mallGoods instanceof ReGoodsOfLocalSpecialtyMall) {            ReGoodsOfLocalSpecialtyMall g = (ReGoodsOfLocalSpecialtyMall) mallGoods;            shoppingCar.setGoodsImage(g.getSnapshotGoods().getCoverPic());//商品的封面图片；            shoppingCar.setDisplayPrice(g.getDisplayPrice());//商品的显示售价；            shoppingCar.setLoginsticsType(g.getTransportationType());//商品的运输类型；            shoppingCar.setLogisticsPrice(g.getTransportationPrice());//商品的物流费用；            shoppingCar.setSellerName(g.getSnapshotGoods().getSeller().getName());//商家名称；            shoppingCar.setGoodsName(g.getSnapshotGoods().getName());//商品名称；            shoppingCar.setSnapshot(g.getSnapshotGoods());//商品关联的快照商品；            shoppingCar.setSeller(g.getSnapshotGoods().getSeller());//商品关联的商家对象；            ReGoodsOfSellerMall sellerMall=g.getReGoodsOfSellerMall();            //设置商品规格，及其规格售价，红包，积分（需要区分有商品规格和无商品规格）；            Map<String, Object> standardDetail;            if (hashStandardDetails) {//有规格；            	if(sellerMall!=null){            		standardDetail = sellerMall.getStandardDetailByIdList(detailIds);            	}else{            		standardDetail = g.getStandardDetailByIdList(detailIds);	            	}            } else {//无规格；                standardDetail = new HashMap<>();                standardDetail.put("price", g.getNoStandardPrice());                standardDetail.put("redPaper", 0);                standardDetail.put("score", 0);            }            shoppingCar.setGoodsPrice(Double.parseDouble(standardDetail.get("price").toString()));//商品的售价；            shoppingCar.setRedPaper(0d);//商品可抵扣的红包；            shoppingCar.setScore(Integer.parseInt(standardDetail.get("score").toString()));//商品所需要的积分；            shoppingCar.setGoodsStandardString(g.getShoppingCarStandardDetails(detailIds));//购物车对象的规格明细；        } else if (mallGoods instanceof ReGoodsOfMemberMall) {            ReGoodsOfMemberMall g = (ReGoodsOfMemberMall) mallGoods;            shoppingCar.setGoodsImage(g.getSnapshotGoods().getCoverPic());//商品的封面图片；            shoppingCar.setDisplayPrice(g.getDisplayPrice());//商品的显示售价；            shoppingCar.setLoginsticsType(g.getTransportationType());//商品的运输类型；            shoppingCar.setLogisticsPrice(g.getTransportationPrice());//商品的物流费用；            shoppingCar.setSellerName(g.getSnapshotGoods().getSeller().getName());//商家名称；            shoppingCar.setGoodsName(g.getSnapshotGoods().getName());//商品名称；            shoppingCar.setSnapshot(g.getSnapshotGoods());//商品关联的快照商品；            shoppingCar.setSeller(g.getSnapshotGoods().getSeller());//商品关联的商家对象；            //设置商品规格，及其规格售价，红包，积分（需要区分有商品规格和无商品规格）；            Map<String, Object> standardDetail;            if (hashStandardDetails) {//有规格；                standardDetail = g.getStandardDetailByIdList(detailIds);            } else {//无规格；                standardDetail = new HashMap<>();                standardDetail.put("price", 0);                standardDetail.put("redPaper", 0);                standardDetail.put("score", 0);            }            shoppingCar.setGoodsPrice(Double.parseDouble(standardDetail.get("price").toString()));//商品的售价；            shoppingCar.setRedPaper(0d);//商品可抵扣的红包；            shoppingCar.setScore(Integer.parseInt(standardDetail.get("score").toString()));//商品所需要的积分；            shoppingCar.setGoodsStandardString(g.getShoppingCarStandardDetails(detailIds));//购物车对象的规格明细；        } else if (mallGoods instanceof ReGoodsOfNineNineMall) {            ReGoodsOfNineNineMall g = (ReGoodsOfNineNineMall) mallGoods;            shoppingCar.setGoodsImage(g.getSnapshotGoods().getCoverPic());//商品的封面图片；            shoppingCar.setDisplayPrice(g.getDisplayPrice());//商品的显示售价；            shoppingCar.setLoginsticsType(g.getTransportationType());//商品的运输类型；            shoppingCar.setLogisticsPrice(g.getTransportationPrice());//商品的物流费用；            shoppingCar.setSellerName(g.getSnapshotGoods().getSeller().getName());//商家名称；            shoppingCar.setGoodsName(g.getSnapshotGoods().getName());//商品名称；            shoppingCar.setSnapshot(g.getSnapshotGoods());//商品关联的快照商品；            shoppingCar.setSeller(g.getSnapshotGoods().getSeller());//商品关联的商家对象；            //设置商品规格，及其规格售价，红包，积分（需要区分有商品规格和无商品规格）；            Map<String, Object> standardDetail;            if (hashStandardDetails) {//有规格；                standardDetail = g.getStandardDetailByIdList(detailIds);            } else {//无规格；                standardDetail = new HashMap<>();                standardDetail.put("price", g.getNoStandardPrice());                standardDetail.put("redPaper", 0);                standardDetail.put("score", 0);            }            shoppingCar.setGoodsPrice(Double.parseDouble(standardDetail.get("price").toString()));//商品的售价；            shoppingCar.setRedPaper(0d);//商品可抵扣的红包；            shoppingCar.setScore(Integer.parseInt(standardDetail.get("score").toString()));//商品所需要的积分；            shoppingCar.setGoodsStandardString(g.getShoppingCarStandardDetails(detailIds));//购物车对象的规格明细；        }else if (mallGoods instanceof ReGoodsOfTeamMall) {        	ReGoodsOfTeamMall g = (ReGoodsOfTeamMall) mallGoods;            shoppingCar.setGoodsImage(g.getSnapshotGoods().getCoverPic());//商品的封面图片；            shoppingCar.setDisplayPrice(g.getDisplayPrice());//商品的显示售价；            shoppingCar.setLoginsticsType(g.getTransportationType());//商品的运输类型；            shoppingCar.setLogisticsPrice(g.getTransportationPrice());//商品的物流费用；            shoppingCar.setSellerName(g.getSnapshotGoods().getSeller().getName());//商家名称；            shoppingCar.setGoodsName(g.getSnapshotGoods().getName());//商品名称；            shoppingCar.setSnapshot(g.getSnapshotGoods());//商品关联的快照商品；            shoppingCar.setSeller(g.getSnapshotGoods().getSeller());//商品关联的商家对象；            //设置商品规格，及其规格售价，红包，积分（需要区分有商品规格和无商品规格）；            Map<String, Object> standardDetail = new HashMap<>();            ReGoodsOfSellerMall sellerMall = g.getReGoodsOfSellerMall();            if (hashStandardDetails) {//有规格；            	if(sellerMall!=null){ //新版本                	standardDetail=sellerMall.getStandardDetailByIdList(detailIds);                }else{                	standardDetail = g.getStandardDetailByIdList(detailIds);                }            } else {//无规格；            		standardDetail.put("price", sellerMall.getNoStandardPrice());            		standardDetail.put("redPaper", 0);            		standardDetail.put("score", 0);            }                        if(isTeam){            shoppingCar.setGoodsPrice(CalcUtil.sub(Double.parseDouble(standardDetail.get("price").toString()),g.getDiscountPrice()));//商品的售价；            }else{            	shoppingCar.setGoodsPrice(Double.parseDouble(standardDetail.get("price").toString()));//商品的售价；            }            shoppingCar.setRedPaper(0d);//商品可抵扣的红包；            shoppingCar.setScore(Integer.parseInt(standardDetail.get("score").toString()));//商品所需要的积分；            shoppingCar.setGoodsStandardString(g.getReGoodsOfSellerMall().getShoppingCarStandardDetails(detailIds));//购物车对象的规格明细；            if(shoppingCar.getGoodsPrice().doubleValue()<=0){            	new Exception("商品价格异常");            }        }else if(mallGoods instanceof ReGoodsOfLockMall){        	ReGoodsOfLockMall g = (ReGoodsOfLockMall) mallGoods;             shoppingCar.setGoodsImage(g.getSnapshotGoods().getCoverPic());//商品的封面图片；             shoppingCar.setDisplayPrice(g.getDisplayPrice());//商品的显示售价；             shoppingCar.setLoginsticsType(g.getTransportationType());//商品的运输类型；             shoppingCar.setLogisticsPrice(g.getTransportationPrice());//商品的物流费用；             shoppingCar.setSellerName(g.getSnapshotGoods().getSeller().getName());//商家名称；             shoppingCar.setGoodsName(g.getSnapshotGoods().getName());//商品名称；             shoppingCar.setSnapshot(g.getSnapshotGoods());//商品关联的快照商品；             shoppingCar.setSeller(g.getSnapshotGoods().getSeller());//商品关联的商家对象；                         shoppingCar.setGoodsQuantity(1);//商品数量暂时都是1            // shoppingCar.setGoodsPrice(g.getPrice());             //设置商品规格，及其规格售价，红包，积分（需要区分有商品规格和无商品规格）；             ReGoodsOfSellerMall sellerMall=g.getReGoodsOfSellerMall();             Map<String, Object> standardDetail;             if (hashStandardDetails) {//有规格；             	if(sellerMall!=null){             		standardDetail=sellerMall.getStandardDetailByIdList(detailIds);             		if(g.getNoStandardScore()!=null&&g.getNoStandardScore()>0){             			standardDetail.put("score", g.getScore());             		}else{             			//int score=(int)Math.ceil(Double.parseDouble(standardDetail.get("score").toString()));             			Integer score = Integer.valueOf(g.getScore());             			standardDetail.put("score", score);             		}             		standardDetail.put("price", g.getPrice()==null?"0.0":g.getPrice());             	}else{             		standardDetail = g.getStandardDetailByIdList(detailIds);             	}             } else {//无规格；                 standardDetail = new HashMap<>();                 standardDetail.put("price", g.getPrice()==null?"0.0":g.getPrice());                 standardDetail.put("redPaper", 0);                 standardDetail.put("score", g.getScore());             }             shoppingCar.setGoodsPrice(Double.parseDouble(standardDetail.get("price").toString()));//商品的售价；             shoppingCar.setRedPaper(0d);//商品可抵扣的红包；             shoppingCar.setScore(Integer.parseInt(standardDetail.get("score").toString()));//商品所需要的积分；             shoppingCar.setGoodsStandardString(g.getReGoodsOfSellerMall().getShoppingCarStandardDetails(detailIds));//购物车对象的规格明细；        }        //返回结果值；        return shoppingCar;    }    @Override    public List<ReShoppingCar> getShoppingCarByUserId(Integer userId) {        return reShoppingCarDao.getShoppingCarByUserId(userId);    }    @Override    public ReShoppingCar alreadyInShoppingCar(String goodsOrder, List<Integer> standardIds, List<ReShoppingCar> shoppingCarList) {        //循环遍历这个给定的购物车集合对象；        for (ReShoppingCar each : shoppingCarList) {            if (each.getGoodsOrder().equals(goodsOrder) && CollectionUtil.compareList(standardIds, each.getStandardIdList())) {                return each;            }        }        return null;    }    @Override    public Map<String, Object> updateShoppingCar(HttpServletRequest request, HttpServletResponse response) {        //参数检查；        Integer shoppingCarId;//需要修改的购物车对象的id值；        Integer number;//产品数量；        ReShoppingCar reShoppingCar;        String xcx = request.getParameter("xcx");        if(xcx != null ){        	shoppingCarId = Integer.valueOf(request.getParameter("shoppingCarId"));        	number = Integer.valueOf(request.getParameter("number"));        	        }else{        	 Parameter parameter = ParameterUtil.getParameter(request);             shoppingCarId = Integer.parseInt(parameter.getData().getString("shoppingCarItemId"));             number = Integer.parseInt(parameter.getData().getString("number"));        }        try {                       reShoppingCar = reShoppingCarDao.get(shoppingCarId);            if (reShoppingCar == null || number < 1) {                return JsonResponseUtil.getJson(-0x02, "参数错误：所给shoppingCarItemId在数据库中没有值对应，或者所给number值小于1；");            }        } catch (Exception e) {            e.printStackTrace();            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();            return JsonResponseUtil.getJson(-0x02, "参数错误：参数data不是合法的json字符串，解析时出错；");        }        try {            //编辑购物车对象的数量；            editShoppingCarNumber(reShoppingCar, number);            //返回结果；            return JsonResponseUtil.getJson(0x01, "保存成功");        } catch (Exception e) {            e.printStackTrace();            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();            return JsonResponseUtil.getJson(-0x02, "后台出错：后台在更新购物车id为" + shoppingCarId + "时报错；");        }    }    @Override    public Map<String, Object> removeShoppingCar(HttpServletRequest request, HttpServletResponse response) {        //参数检查；        Parameter parameter;        JSONArray shoppingCarIds = new JSONArray();        String xcx = request.getParameter("xcx");        if(xcx != null){        	String shoppingCarId = request.getParameter("shoppingCarIds");			if(shoppingCarId != null){				shoppingCarIds = JSONArray.parseArray(shoppingCarId);			}        }else{        	parameter = ParameterUtil.getParameter(request);        	shoppingCarIds = parameter.getData().getJSONArray("shoppingCarItemIds");        	        }        try {            if (shoppingCarIds.size() == 0) {                return JsonResponseUtil.getJson(-0x02, "参数错误：所给shoppingCarItemIds参数中没有发现数据，无需要删除的购物车数据；");            }        } catch (Exception e) {            e.printStackTrace();            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();            return JsonResponseUtil.getJson(-0x02, "参数错误：参数data不是合法的json字符串，解析时出错；");        }        try {            //编辑购物车对象的数量；            for (int i = 0; i < shoppingCarIds.size(); i++) {                ReShoppingCar each = reShoppingCarDao.get(shoppingCarIds.getInteger(i));                each.setIsValid(false);            }            //返回结果；            return JsonResponseUtil.getJson(0x01, "移除操作成功");        } catch (Exception e) {            e.printStackTrace();            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();            return JsonResponseUtil.getJson(-0x02, "后台报错：后台处理移除购物车数据时报错；");        }    }    @Override    public ReShoppingCar saveShoppingCar(Integer userId, String goodsOrder,                                         Integer number, List<Integer> detailIds, String basePath,Boolean isTeam,String isGame) {        //调用保存方法；        Boolean hasStandardDetails = detailIds != null && detailIds.size() != 0;        ReShoppingCar shoppingCar =  null;        if("1".equals(isGame)){        	 shoppingCar = saveShoppingCar(userId, goodsOrder, number, detailIds, hasStandardDetails,isTeam,isGame);        	        }else{        	 shoppingCar = saveShoppingCar(userId, goodsOrder, number, detailIds, hasStandardDetails,isTeam);        }        //理解购买条目不能出现在购物车中，需要使其失效；        if(shoppingCar!=null){        	shoppingCar.setIsValid(false);        }        //返回结果值；        return shoppingCar;    }    private  ReShoppingCar saveShoppingCar(Integer userId, String goodsOrder, Integer number, List<Integer> detailIds, Boolean hashStandardDetails,Boolean isTeam,String isGame) {        Object mallGoods = reGoodsOfBaseService.getMall(goodsOrder);                ReBaseGoods baseGoods= (ReBaseGoods) mallGoods;        if(!baseGoods.getIsNoStandard()&&detailIds.size()==0){        	return null;        }        //要保存的购物车对象，并向里面填充数据；        ReShoppingCar shoppingCar = new ReShoppingCar();        reShoppingCarDao.save(shoppingCar);        shoppingCar.setGoodsOrder(goodsOrder);//商品序号；        shoppingCar.setMallTypeId(ReBaseGoods.getMallTypeId(reGoodsOfBaseService.getMallType(goodsOrder)));//商城类型id；        shoppingCar.setGoodsId(reGoodsOfBaseService.getMallValue(goodsOrder));//商品id；        shoppingCar.setGoodsQuantity(number);//商品数量；        shoppingCar.setUser(usersDao.get(userId));//商品对用的用户；        if (mallGoods instanceof ReGoodsOfSellerMall) {            ReGoodsOfSellerMall g = (ReGoodsOfSellerMall) mallGoods;            shoppingCar.setGoodsImage(g.getSnapshotGoods().getCoverPic());//商品的封面图片；            shoppingCar.setDisplayPrice(g.getDisplayPrice());//商品的显示售价；            shoppingCar.setLoginsticsType(g.getTransportationType());//商品的运输类型；            shoppingCar.setLogisticsPrice(g.getTransportationPrice());//商品的物流费用；            shoppingCar.setSellerName(g.getSnapshotGoods().getSeller().getName());//商家名称；            shoppingCar.setGoodsName(g.getSnapshotGoods().getName());//商品名称；            shoppingCar.setSnapshot(g.getSnapshotGoods());//商品关联的快照商品；            shoppingCar.setSeller(g.getSnapshotGoods().getSeller());//商品关联的商家对象；                        //设置商品规格，及其规格售价，红包，积分（需要区分有商品规格和无商品规格）；            Map<String, Object> standardDetail;            if (hashStandardDetails) {//有规格；               	standardDetail = g.getStandardDetailByIdList(detailIds);            } else {//无规格；                standardDetail = new HashMap<>();                standardDetail.put("price", g.getNoStandardPrice());                standardDetail.put("redPaper",0);                standardDetail.put("score", 0);            }            shoppingCar.setGoodsPrice(0.0);//商品的售价；            shoppingCar.setRedPaper(0d);//商品可抵扣的红包；            shoppingCar.setScore(0);//商品所需要的积分；            shoppingCar.setGoodsStandardString(g.getShoppingCarStandardDetails(detailIds));//购物车对象的规格明细；                }                return shoppingCar;        }        @Override    public Integer getNumberOfGoodsInShoppingCar(String goodsOrder, Integer userId) {        return reShoppingCarDao.getNumberOfGoodsInShoppingCar(goodsOrder, userId);    }}