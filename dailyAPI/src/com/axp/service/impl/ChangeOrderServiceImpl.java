package com.axp.service.impl;import java.sql.Timestamp;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Set;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.commons.lang.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.interceptor.TransactionAspectSupport;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.axp.dao.ReBaseGoodsDAO;import com.axp.domain.ChangeOrder;import com.axp.domain.ReBaseGoods;import com.axp.domain.ReGoodsOfChangeMall;import com.axp.domain.ReGoodsStandard;import com.axp.domain.ReGoodsorderItem;import com.axp.domain.Scorerecords;import com.axp.domain.Seller;import com.axp.domain.Users;import com.axp.service.IChangeOrderService;import com.axp.service.IMallListService;import com.axp.util.CalcUtil;import com.axp.util.DateUtil;import com.axp.util.JsonResponseUtil;import com.axp.util.Parameter;import com.axp.util.ParameterUtil;import com.axp.util.QueryModel;import com.axp.util.StringUtil;@Servicepublic class ChangeOrderServiceImpl extends BaseServiceImpl<ChangeOrder> implements IChangeOrderService {		@Autowired	ReBaseGoodsDAO reBaseGoodsDao;	@Autowired	IMallListService mallListService;					/**	 *同意换货协议 	 */		public  Map<String, Object> agreeAgreement(HttpServletRequest request, HttpServletResponse response){			Parameter parameter = ParameterUtil.getParameter(request);			if (parameter == null) { 				return JsonResponseUtil.getJson(-0x02, "参数data不是合法的json字符串");			}			Integer userId = parameter.getUserId()==null?null:Integer.parseInt(parameter.getUserId());			if(userId==null){				return JsonResponseUtil.getJson(-1, "请先登录,在发起换货");			}						//是否勾选下次再次提示协议			Boolean isNxtNotShow = parameter.getData().getBoolean("isNxtNotShow");			if(isNxtNotShow){				Users users = usersDao.findById(userId);				users.setIsChangeAgreement(isNxtNotShow);				usersDao.merge(users);			}			return JsonResponseUtil.getJson(1, "请求成功");					}		 /**     * 换货协议     */    public Map<String, Object> changeAgreement(HttpServletRequest request, HttpServletResponse response) {    	Parameter parameter = ParameterUtil.getParameter(request);		if (parameter == null) { 			return JsonResponseUtil.getJson(-0x02, "参数data不是合法的json字符串");		}						Integer userId = parameter.getUserId()==null?null:Integer.parseInt(parameter.getUserId());			if(userId==null){				return JsonResponseUtil.getJson(-1, "请先登录,在发起换货");			}			Map<String, Object> data =new HashMap<>();						Users users=usersDao.findById(userId);			//是否勾选下次再次提示协议			data.put("isChangeAgreement", users.getIsChangeAgreement()!=null&&users.getIsChangeAgreement());			//协议内容			data.put("content", "1.	广东每天积分移动互联网有限公司（以下简称“每天积分”）只为帮助有换货需求用户提供免费的平台，请认真阅读以下内容，如不同意协议或无法准确理解，请不要进行后续操作。\n"					+"\n2.	换货双方必须遵守国家规定的法律法规，且遵循双方自愿的原则。\n"					+"\n3.	换货用户双方商品必须真实有效，不得存在虚假信息和欺诈行为。\n"					+"\n4.	换货商品因是用户自己拍照上传，因手机型号、拍摄光线、角度问题，实际商品与图片可能会存在差异，换货前请仔细联系并确认，避免双方纠纷。\n"					+"\n5.	每天积分只提供换货需求用户的信息呈现，换货前请使用者双方协商清楚，建议确实有换货意向才进行换货交易。一旦换货交易开始，换货中的具体换货商品价值、数量、配送方式及收货物品是否瑕疵、货不对版、丢失等等一系列售后问题，本平台不承担关义务及法律责任。\n"					+"\n6.	为了保证用户拥有良好的换货体验和环境，每天积分严禁假冒伪劣、以次充好、过期变质、质量劣质的商品进行交易。\n"					+"\n7.	对于不诚信及其有损平台和其他人的不良用户，每天积分根据国家法律法规有权进行对其下架、账号封停等处罚，如果严重者将追究其法律责任。\n"					+"\n8.	如有违规换货商品发布，用户可以举报（通过个人中心-意见反馈提交反馈信息），每天积分会监督并及时处理违规商品。\n"					+"\n9.	换货规则如有变动，换货的最终解释权归每天积分所有。\n");			return JsonResponseUtil.getJson(1, "请求成功", data);    }			/**		 * 添加换货交易		 */		public Map<String, Object>	putChangeOrder(HttpServletRequest request,HttpServletResponse response){			Parameter parameter = ParameterUtil.getParameter(request);			if (parameter == null) { 				return JsonResponseUtil.getJson(-0x02, "参数data不是合法的json字符串");			}			Map<String, Object> map=new HashMap<>();				try {					JSONObject data = parameter.getData();					Integer changeType = data.getInteger("changeType");					Integer changeScore = data.getInteger("changeScore")==null?0:data.getInteger("changeScore");					Integer inviteUserId = data.getInteger("inviteUserId");					Integer inviteGoodsId = data.getInteger("inviteGoodsId");					Integer inviteGoodsNum = data.getInteger("inviteGoodsNum");					Integer acceptUserId = data.getInteger("acceptUserId");					Integer acceptGoodsId = data.getInteger("acceptGoodsId");					Integer acceptGoodsNum = data.getInteger("acceptGoodsNum");					Users inviteUsers = usersDao.findById(inviteUserId);					Users acceptUsers = usersDao.findById(acceptUserId);										ReGoodsOfChangeMall inviteGoods =null;					if(inviteGoodsId!=null){						inviteGoods=reGoodsOfChangeMallDao.findById(inviteGoodsId);					}					ReGoodsOfChangeMall acceptGoods = reGoodsOfChangeMallDao.findById(acceptGoodsId);										String msg="";					if(changeType==ChangeOrder.CHANGESCORE&&inviteUsers.getScore()<changeScore){						msg="积分不足,请充值";						}					if(StringUtils.isNotBlank(msg)){						map.put("status", -1);						map.put("message", msg);						return map;					}										ChangeOrder changeOrder=new ChangeOrder();					changeOrder.setInviteUsers(inviteUsers);					changeOrder.setInviteGoods(inviteGoods);					changeOrder.setInviteGoodsNum(inviteGoodsNum);					changeOrder.setAcceptUsers(acceptUsers);					changeOrder.setAcceptGoods(acceptGoods);					changeOrder.setAcceptGoodsNum(acceptGoodsNum);					changeOrder.setSponsorTime(new Timestamp(System.currentTimeMillis()));					changeOrder.setStatus(ChangeOrder.UNACCEPTED); //未接受					changeOrder.setIsValid(true);					changeOrder.setCreateTime(new Timestamp(System.currentTimeMillis()));					changeOrder.setInviteStatus(0);					changeOrder.setAcceptStatus(0);					changeOrder.setChangeType(changeType);					changeOrder.setChangeScore(changeScore);											//扣除用户积分						if(changeType==ChangeOrder.CHANGESCORE){							Scorerecords scorerecords = new Scorerecords();							scorerecords.setBeforeScore(inviteUsers.getScore());							scorerecords.setAfterScore((int)CalcUtil.sub(inviteUsers.getScore(), changeScore));							scorerecords.setIsvalid(true);							scorerecords.setCreatetime(new Timestamp(System.currentTimeMillis()));							scorerecords.setScore(changeScore);							scorerecords.setScoretype("换货商品消费积分:"+changeScore);							scorerecords.setRemark("换货商品消费积分:"+changeScore);							scorerecords.setType(17);							scorerecords.setUsers(inviteUsers);							Seller seller = sellerDao.findByUserId(inviteUserId);							scorerecords.setAdminuserId(seller.getAdminUser().getId());							scorerecordsDao.save(scorerecords);							inviteUsers.setScore(inviteUsers.getScore()-changeScore);							usersDao.merge(inviteUsers);														//如果是积分换货 那么发起方状态为已支付							changeOrder.setInviteStatus(ChangeOrder.orderStatus_que_ren_zhi_fu);						}												//如果是以货换货 那么甲方就要扣除库存数						//扣除邀请方库存						if(changeType==ChangeOrder.CHANGEGOODS){													}													changeOrderDao.save(changeOrder);																		//定时任务 长时间未处理的订单 默认取消 取消理由 订单超时												//定时任务 自动确认收货												//接受方确认收货后获得积分											map.put("status", 1);					map.put("message", "请求成功");				} catch (Exception e) {					map.put("status", -1);					map.put("message", "请求失败");					e.printStackTrace();					if(!TransactionAspectSupport.currentTransactionStatus().isRollbackOnly()){						TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();					}				}						return map;						}			//修改库存		public void updateGoodsStock(Boolean isStandard,ReGoodsOfChangeMall changeMall,Integer value, boolean isAdd,Integer StandardId) throws Exception{			ReBaseGoods good = (ReBaseGoods)changeMall;			ReBaseGoods newGoods = new ReBaseGoods();			newGoods.setStandardDetails(good.getStandardDetails());			newGoods.setNoStandardRepertory(good.getNoStandardRepertory());			//订单项规格集合			if(isStandard){				newGoods.editGoodsRepertory(StandardId, null, null, value, isAdd);			}else{				Integer repertory = good.getNoStandardRepertory();				if(isAdd){					//repertory += value;					repertory = (int) CalcUtil.add(repertory, value);				}else{					//repertory -= value;					repertory = (int) CalcUtil.sub(repertory, value);				}				newGoods.setNoStandardRepertory(repertory);			}			reBaseGoodsDao.updateRepertory(newGoods.getStandardDetails(),newGoods.getNoStandardRepertory(),					changeMall.getGoodsOrder());			good = null;			newGoods = null;		}						/**		 * 确认交易或删除交易		 */		public Map<String, Object>	confirmChangeOrder(HttpServletRequest request,HttpServletResponse response){			Parameter parameter = ParameterUtil.getParameter(request);			if (parameter == null) { 				return JsonResponseUtil.getJson(-0x02, "参数data不是合法的json字符串");			}			Map<String, Object> map=new HashMap<>();				try {					JSONObject data = parameter.getData();					Integer type = data.getInteger("type"); // 1 接受 2 拒绝 3删除					Integer orderId=data.getInteger("orderId"); 					Boolean isInvite=data.getBoolean("isInvite");															List<ChangeOrder> changeOrderList = changeOrderDao.findByPropertyIsValid("id", orderId);					ChangeOrder changeOrder=null;					if(changeOrderList.size()>0){						changeOrder=changeOrderList.get(0);					}else{						return JsonResponseUtil.getJson(-1, "无效订单");					}					Users inviteUsers=changeOrder.getInviteUsers();					//Users acceptUsers=changeOrder.getAcceptUsers();					//如果对方拒绝 					//1 退换邀请方积分或货物库存 并修改状态					//如果对方同意了 即扣除对应库存 并修改状态					if(type==ChangeOrder.ACCEPTED){ //接受						//扣接受方库存						if(changeOrder.getChangeType()==ChangeOrder.CHANGESCORE){													}						changeOrder.setAcceptStatus(ChangeOrder.orderStatus_dai_fa_huo);						changeOrder.setInviteStatus(ChangeOrder.orderStatus_dai_fa_huo);					}else if(type==ChangeOrder.REFUSE||type==ChangeOrder.DELETE){ //拒绝 删除						//退还邀请方积分或商品库存						if(changeOrder.getChangeType()==ChangeOrder.CHANGEGOODS){							//退邀请方库存						}else{							//退积分							Scorerecords scorerecords = new Scorerecords();							scorerecords.setBeforeScore(inviteUsers.getScore());							scorerecords.setAfterScore((int)CalcUtil.add(inviteUsers.getScore(), changeOrder.getChangeScore()));							scorerecords.setIsvalid(true);							scorerecords.setCreatetime(new Timestamp(System.currentTimeMillis()));							scorerecords.setScore(changeOrder.getChangeScore());							scorerecords.setScoretype("换货订单被拒,退还积分:"+changeOrder.getChangeScore());							scorerecords.setRemark("换货订单被拒,退还积分:"+changeOrder.getChangeScore());							scorerecords.setType(17);							scorerecords.setUsers(inviteUsers);							scorerecords.setAdminuserId(1);							scorerecordsDao.save(scorerecords);							inviteUsers.setScore(inviteUsers.getScore()+changeOrder.getChangeScore());							usersDao.merge(inviteUsers);						}						if(type==ChangeOrder.DELETE){							if(isInvite){								changeOrder.setInviteStatus(ChangeOrder.orderStatus_yi_shan_chu);							}else{								changeOrder.setAcceptStatus(ChangeOrder.orderStatus_yi_shan_chu);							}						}						// 修改订单状态					}					if(type==ChangeOrder.DELETE){						type=ChangeOrder.REFUSE;					}					changeOrder.setStatus(type);					changeOrderDao.merge(changeOrder);					map.put("status", 1);					map.put("message", "请求成功");				} catch (Exception e) {					map.put("status", -1);					map.put("message", "请求失败");					e.printStackTrace();					if(!TransactionAspectSupport.currentTransactionStatus().isRollbackOnly()){						TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();					}				}						return map;						}			 /**	     * 换货发起与邀约列表	     */		public Map<String, Object>	sendOrInviteChangeList(HttpServletRequest request,HttpServletResponse response){			Parameter parameter = ParameterUtil.getParameter(request);			if (parameter == null) { 				return JsonResponseUtil.getJson(-0x02, "参数data不是合法的json字符串");			}			String basePath = request.getServletContext().getAttribute("RESOURCE_LOCAL_URL").toString();			Map<String, Object> map=new HashMap<>();				try {					JSONObject data = parameter.getData();					Integer type = data.getInteger("type");  //1发起 2被邀约					Integer userId=Integer.parseInt(parameter.getUserId());					Integer pageIndex=data.getInteger("pageIndex")==null?1:data.getInteger("pageIndex");					int pageSize=10;										QueryModel queryModel=new QueryModel();					queryModel.combEquals("isValid", 1);					queryModel.combCondition("( status="+ChangeOrder.UNACCEPTED+" or status="+ChangeOrder.REFUSE+")");					if(type==1){						queryModel.combPreEquals("inviteUsers.id", userId,"userId");						queryModel.combCondition("inviteStatus!="+ChangeOrder.orderStatus_yi_shan_chu);					}else{						queryModel.combCondition("acceptStatus!="+ChangeOrder.orderStatus_yi_shan_chu);						queryModel.combPreEquals("acceptUsers.id", userId,"userId");					}										queryModel.setOrder("sponsorTime desc"); //发起时间排序					Integer count = dateBaseDAO.findCount(ChangeOrder.class, queryModel);					List<ChangeOrder> changeOrderList = dateBaseDAO.findPageList(ChangeOrder.class, queryModel,(pageIndex-1)*pageSize,pageSize);										List<Map<String, Object>> list=new ArrayList<>();										for (ChangeOrder changeOrder : changeOrderList) {						Map<String, Object> orderMap=new HashMap<>();						Users users=null;						if(type==1){							users=changeOrder.getInviteUsers();							orderMap.put("isRed",changeOrder.getInviteRed());						}else{							orderMap.put("isRed",changeOrder.getAcceptRed());							users=changeOrder.getAcceptUsers();						}						String userDefaultHead = StringUtil.getUserDefaultHead(users, basePath);						orderMap.put("userHead",userDefaultHead);						orderMap.put("userName", StringUtil.getUserDefaultName(users));						SimpleDateFormat sf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");						orderMap.put("sponsorTime", sf.format(changeOrder.getSponsorTime())+" 发起换货邀约");						orderMap.put("orderId", changeOrder.getId());												list.add(orderMap);					}										Map<String, Object> dataMap=new HashMap<>();					dataMap.put("dataList", list);					dataMap.put("pageSize", count%pageSize==0?count/pageSize:(count/pageSize+1));					dataMap.put("pageIndex", pageIndex);					dataMap.put("pageItemCount",pageSize);					map.put("data", dataMap);					map.put("status", 1);					map.put("message", "请求成功");				} catch (Exception e) {					map.put("status", -1);					map.put("message", "请求失败");					e.printStackTrace();					if(!TransactionAspectSupport.currentTransactionStatus().isRollbackOnly()){						TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();					}				}			return map;			}			    /**	     * 交易中列表	     */		public Map<String, Object>	getTradeChangeList(HttpServletRequest request,HttpServletResponse response){			Parameter parameter = ParameterUtil.getParameter(request);			if (parameter == null) { 				return JsonResponseUtil.getJson(-0x02, "参数data不是合法的json字符串");			}			String basePath = request.getServletContext().getAttribute("RESOURCE_LOCAL_URL").toString();			Map<String, Object> map=new HashMap<>();				try {					JSONObject data = parameter.getData();					Integer userId=Integer.parseInt(parameter.getUserId());					Integer pageIndex=data.getInteger("pageIndex")==null?1:data.getInteger("pageIndex");					int pageSize=10;										QueryModel queryModel=new QueryModel();					queryModel.combEquals("isValid", 1);					//queryModel.combEquals("status", ChangeOrder.ACCEPTED);					queryModel.setOrder("sponsorTime desc"); //发起时间排序					queryModel.combCondition("(status="+ChangeOrder.ACCEPTED+" or status="+ChangeOrder.SUCCESS+")");					queryModel.combCondition("(inviteUsers.id="+userId+" or acceptUsers.id="+userId+")");					Integer count = dateBaseDAO.findCount(ChangeOrder.class, queryModel);					List<ChangeOrder> changeOrderList = dateBaseDAO.findPageList(ChangeOrder.class, queryModel,(pageIndex-1)*pageSize,pageSize);										List<Map<String, Object>> list=new ArrayList<>();															for (ChangeOrder changeOrder : changeOrderList) {						System.out.println(changeOrder.getId());						System.out.println("甲方用户id"+changeOrder.getInviteUsers().getId());						System.out.println("已方用户id"+changeOrder.getAcceptUsers().getId());						Users inviteUsers= changeOrder.getInviteUsers();						Users acceptUsers= changeOrder.getAcceptUsers();						ReGoodsOfChangeMall inviteGoods=changeOrder.getInviteGoods();						ReGoodsOfChangeMall acceptGoods=changeOrder.getAcceptGoods();																	Map<String, Object> orderMap=null;						if(changeOrder.getChangeType()==ChangeOrder.CHANGEGOODS){							//甲方							orderMap = mallListService.getChangeGoodsMap(inviteGoods, inviteGoods.getGoodsOrder(), basePath,null,null);						}else{							orderMap=new HashMap<>();							orderMap.put("goodsUserId", inviteUsers.getId());							orderMap.put("goodsUserName", StringUtils.isBlank(inviteUsers.getRealname())?inviteUsers.getName():inviteUsers.getRealname());						}												String userDefaultHead = StringUtil.getUserDefaultHead(inviteUsers, basePath);						orderMap.put("userHead",userDefaultHead);						orderMap.put("userName", StringUtil.getUserDefaultName(inviteUsers));						orderMap.put("sponsorTime", changeOrder.getSponsorTime());						orderMap.put("orderId", changeOrder.getId());						orderMap.put("stauts", changeOrder.getInviteStatus());						//orderMap.put("stautsName", changeOrder.getStatusName(changeOrder.getInviteStatus()));						orderMap.put("type", 1); //发起方						orderMap.put("changeType",changeOrder.getChangeType()); //交易方式						int goodsNum=0;						Integer score=0; // 积分 只有邀请方才有可能有积分						if(changeOrder.getChangeType()==ChangeOrder.CHANGEGOODS){							goodsNum=changeOrder.getInviteGoodsNum();						}else{							score=changeOrder.getChangeScore();						}						orderMap.put("goodsNum", goodsNum);						orderMap.put("score",score);																		//乙方						Map<String, Object> orderMap2 = mallListService.getChangeGoodsMap(acceptGoods, acceptGoods.getGoodsOrder(), basePath,null,null);						String userDefaultHead2 = StringUtil.getUserDefaultHead(acceptUsers, basePath);						orderMap2.put("userHead",userDefaultHead2);						orderMap2.put("userName", StringUtil.getUserDefaultName(acceptUsers));						orderMap2.put("sponsorTime", changeOrder.getSponsorTime());						orderMap2.put("orderId", changeOrder.getId());						orderMap2.put("stauts", changeOrder.getAcceptStatus());						//orderMap2.put("stautsName", changeOrder.getStatusName(changeOrder.getAcceptStatus()));						orderMap2.put("type", 2); //接收方						orderMap2.put("changeType",changeOrder.getChangeType()); //交易方式						orderMap2.put("goodsNum", changeOrder.getAcceptGoodsNum());						//排序格式 乙方再上 甲方在下						Map<String, Object> mapObj=new HashMap<>();												mapObj.put("invite", orderMap);						mapObj.put("accept", orderMap2);						SimpleDateFormat sf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");						mapObj.put("sponsorTime", sf.format(changeOrder.getSponsorTime()));						list.add(mapObj);					}										Map<String, Object> dataMap=new HashMap<>();					dataMap.put("dataList", list);					dataMap.put("pageSize", count%pageSize==0?count/pageSize:(count/pageSize+1));					dataMap.put("pageIndex", pageIndex);					dataMap.put("pageItemCount",pageSize);					map.put("data", dataMap);					map.put("status", 1);					map.put("message", "请求成功");				} catch (Exception e) {					map.put("status", -1);					map.put("message", "请求失败");					e.printStackTrace();					if(!TransactionAspectSupport.currentTransactionStatus().isRollbackOnly()){						TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();					}				}			return map;			}								 /**	     * 查询订单明细	     */		public Map<String, Object>	getChangeOrderDetail(HttpServletRequest request,HttpServletResponse response){			Parameter parameter = ParameterUtil.getParameter(request);			if (parameter == null) { 				return JsonResponseUtil.getJson(-0x02, "参数data不是合法的json字符串");			}						String basePath = request.getServletContext().getAttribute("RESOURCE_LOCAL_URL").toString();			Map<String, Object> map=new HashMap<>();				try {					JSONObject data = parameter.getData();					Integer type = data.getInteger("type");  //1发起 2被邀约					Integer userId=Integer.parseInt(parameter.getUserId());					Integer orderId=data.getInteger("orderId"); 					String statusDesc="交换商品";					List<ChangeOrder> changeOrderList = changeOrderDao.findByPropertyIsValid("id", orderId);					ChangeOrder changeOrder=null;					if(changeOrderList.size()>0){						changeOrder=changeOrderList.get(0);					}else{						return JsonResponseUtil.getJson(-1, "无效订单");					}															List<Map<String, Object>> list=new ArrayList<>();																Users inviteUsers=null;						Users acceptUsers=null;						ReGoodsOfChangeMall inviteGoods=null;						ReGoodsOfChangeMall acceptGoods=null;											inviteUsers=changeOrder.getInviteUsers();						inviteGoods=changeOrder.getInviteGoods();						acceptUsers=changeOrder.getAcceptUsers();						acceptGoods=changeOrder.getAcceptGoods();											Map<String, Object> orderMap=null;						//甲方						if(changeOrder.getChangeType()==ChangeOrder.CHANGEGOODS){							 orderMap = mallListService.getChangeGoodsMap(inviteGoods, inviteGoods.getGoodsOrder(), basePath,null,null);							 orderMap.put("goodsNum", changeOrder.getInviteGoodsNum());						}else{							orderMap=new HashMap<>();						}						String userDefaultHead = StringUtil.getUserDefaultHead(inviteUsers, basePath);						Seller seller = sellerDao.findByUserId(acceptUsers.getId());						orderMap.put("sellerAddress", seller.getSellerAddres()); //商家店铺所在地址						orderMap.put("userHead",userDefaultHead);						orderMap.put("userName", StringUtil.getUserDefaultName(inviteUsers));						orderMap.put("sponsorTime", changeOrder.getSponsorTime());						orderMap.put("orderId", changeOrder.getId());						orderMap.put("stauts", changeOrder.getInviteStatus());						orderMap.put("type", "1"); //发起方						orderMap.put("changeType",changeOrder.getChangeType()); //交易方式						orderMap.put("goodsUserId",inviteUsers.getId()); //商品的userId  聊天使用; 联系他						orderMap.put("goodsUserName", StringUtils.isBlank(inviteUsers.getRealname())?inviteUsers.getName():inviteUsers.getRealname());						Integer score=0; // 积分 只有邀请方才有可能有积分						if(changeOrder.getChangeType()==ChangeOrder.CHANGEGOODS){						}else{							score=changeOrder.getChangeScore();						}						orderMap.put("score",score);												//乙方						Map<String, Object> orderMap2 = mallListService.getChangeGoodsMap(acceptGoods, acceptGoods.getGoodsOrder(), basePath,null,null);						String userDefaultHead2 = StringUtil.getUserDefaultHead(acceptUsers, basePath);						orderMap2.put("userHead",userDefaultHead2);						orderMap2.put("userName", StringUtil.getUserDefaultName(acceptUsers));						orderMap2.put("sponsorTime", changeOrder.getSponsorTime());						orderMap2.put("orderId", changeOrder.getId());						orderMap2.put("stauts", changeOrder.getAcceptStatus());						orderMap2.put("type", "2"); //接收方						orderMap2.put("changeType",changeOrder.getChangeType()); //交易方式						orderMap2.put("goodsNum", changeOrder.getAcceptGoodsNum());						//排序格式 乙方再上 甲方在下						list.add(orderMap2);						list.add(orderMap);																							if(type==1){						changeOrder.setInviteRed(true);					}else{						changeOrder.setAcceptRed(true);					}										changeOrderDao.merge(changeOrder);																	Map<String, Object> dataMap=new HashMap<>();					dataMap.put("dataList", list);					dataMap.put("statusDesc", changeOrder.getStatus()==ChangeOrder.REFUSE?"交易已拒绝":"交换商品");					//dataMap.put("statusType", changeOrder.getStatus()==ChangeOrder.REFUSE);					map.put("data", dataMap);					map.put("status", 1);					map.put("message", "请求成功");				} catch (Exception e) {					map.put("status", -1);					map.put("message", "请求失败");					e.printStackTrace();					if(!TransactionAspectSupport.currentTransactionStatus().isRollbackOnly()){						TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();					}				}			return map;			//		return JsonResponseUtil.getJson(-1, "嘿嘿嘿");		}						/**		 * 修改订单状态		 */		public Map<String, Object>	updateChangeOrderStatus(HttpServletRequest request,HttpServletResponse response){			Parameter parameter = ParameterUtil.getParameter(request);			if (parameter == null) { 				return JsonResponseUtil.getJson(-0x02, "参数data不是合法的json字符串");			}			Map<String, Object> map=new HashMap<>();				try {					JSONObject data = parameter.getData();					Integer type = data.getInteger("type"); // 20 发货; 30 收货  					Integer orderId=data.getInteger("orderId"); 					Integer userId=Integer.parseInt(parameter.getUserId());					Boolean isInvite=true;															List<ChangeOrder> changeOrderList = changeOrderDao.findByPropertyIsValid("id", orderId);					ChangeOrder changeOrder=null;					if(changeOrderList.size()>0){						changeOrder=changeOrderList.get(0);					}else{						return JsonResponseUtil.getJson(-1, "无效订单");					}										if(changeOrder.getInviteUsers().getId().equals(userId)){						isInvite=true;					}else{						isInvite=false;					}										if(type==ChangeOrder.orderStatus_yi_fa_huo){ //发货						if(isInvite){  //甲方发货							changeOrder.setInviteStatus(ChangeOrder.orderStatus_yi_fa_huo);						}else{   		//乙方发货							changeOrder.setAcceptStatus(ChangeOrder.orderStatus_yi_fa_huo);						}					}else if(type==ChangeOrder.orderStatus_yi_shou_huo){  //收货						if(changeOrder.getChangeType()==ChangeOrder.CHANGEGOODS){ //如果是物物换														if(type==30){ //收货								if(changeOrder.getInviteStatus()<ChangeOrder.orderStatus_yi_fa_huo||changeOrder.getAcceptStatus()<ChangeOrder.orderStatus_yi_fa_huo){									System.out.println(changeOrder.getInviteStatus()+"   "+changeOrder.getAcceptStatus());									return JsonResponseUtil.getJson(-1, "请确保您已发货!");								}							}														if(isInvite){  //甲方收货								//changeOrder.setAcceptStatus(changeOrder.orderStatus_jiao_yi_wan_cheng); 																changeOrder.setAcceptConfirmTime(new Timestamp(System.currentTimeMillis())); //收货时间								changeOrder.setAcceptStatus(ChangeOrder.orderStatus_yi_shou_huo);															}else{  //乙方收货								//changeOrder.setInviteStatus(ChangeOrder.orderStatus_jiao_yi_wan_cheng);																changeOrder.setInviteStatus(ChangeOrder.orderStatus_yi_shou_huo); //甲方状态设为已收货								changeOrder.setInviteConfirmTime(new Timestamp(System.currentTimeMillis()));							}														if(changeOrder.getInviteStatus()==ChangeOrder.orderStatus_yi_shou_huo&&changeOrder.getAcceptStatus()==ChangeOrder.orderStatus_yi_shou_huo){								changeOrder.setInviteStatus(ChangeOrder.orderStatus_jiao_yi_wan_cheng);								changeOrder.setAcceptStatus(ChangeOrder.orderStatus_jiao_yi_wan_cheng);								changeOrder.setStatus(ChangeOrder.SUCCESS);							}																				}else if(changeOrder.getChangeType()==ChangeOrder.CHANGESCORE){ //如果是积分换								changeOrder.setInviteStatus(ChangeOrder.orderStatus_jiao_yi_wan_cheng); 								changeOrder.setInviteConfirmTime(new Timestamp(System.currentTimeMillis())); //收货时间									changeOrder.setAcceptStatus(ChangeOrder.orderStatus_jiao_yi_wan_cheng);	//乙方完成									changeOrder.setStatus(ChangeOrder.SUCCESS);									//交易完成 乙方获得积分									Users acceptUsers = changeOrder.getAcceptUsers();									Scorerecords scorerecords = new Scorerecords();									scorerecords.setBeforeScore(acceptUsers.getScore());									scorerecords.setAfterScore((int)CalcUtil.add(acceptUsers.getScore(), changeOrder.getChangeScore()));									scorerecords.setIsvalid(true);									scorerecords.setCreatetime(new Timestamp(System.currentTimeMillis()));									scorerecords.setScore(changeOrder.getChangeScore());									scorerecords.setScoretype("换货订单已完成,获得积分:"+changeOrder.getChangeScore());									scorerecords.setRemark("换货订单已完成,获得积分:"+changeOrder.getChangeScore());									scorerecords.setType(17);									scorerecords.setUsers(acceptUsers);									scorerecords.setAdminuserId(1);									scorerecordsDao.save(scorerecords);									acceptUsers.setScore(acceptUsers.getScore()+changeOrder.getChangeScore());									usersDao.merge(acceptUsers);								}					}										changeOrderDao.merge(changeOrder);					map.put("status", 1);					map.put("message", "请求成功");				} catch (Exception e) {					map.put("status", -1);					map.put("message", "请求失败");					e.printStackTrace();					if(!TransactionAspectSupport.currentTransactionStatus().isRollbackOnly()){						TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();					}				}			return map;			}	/*		*//**		 * 换货协议		 * @return		 *//*		public Map<String, Object> changeAgreement(){					}*/		}