package com.axp.service.impl;import java.sql.Timestamp;import java.text.DateFormat;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Set;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.springframework.cache.annotation.Cacheable;import org.springframework.stereotype.Service;import com.alibaba.fastjson.JSONArray;import com.axp.domain.AdminUser;import com.axp.domain.AdminUserScoreRecord;import com.axp.domain.AdminuserCashpointRecord;import com.axp.domain.Bonus;import com.axp.domain.CashshopTimes;import com.axp.domain.CashshopType;import com.axp.domain.CommodityType;import com.axp.domain.DLScoreMark;import com.axp.domain.GetmoneyRecord;import com.axp.domain.ReGoodsOfBase;import com.axp.domain.ReGoodsOfLockMall;import com.axp.domain.ReGoodsorder;import com.axp.domain.ReGoodsorderItem;import com.axp.domain.SJScoreMark;import com.axp.domain.Seller;import com.axp.domain.UserDarw;import com.axp.domain.UserDarwRecord;import com.axp.domain.UserScoreMark;import com.axp.domain.Users;import com.axp.service.IReGoodsOfLockMallService;import com.axp.util.CalcUtil;import com.axp.util.DateUtil;import com.axp.util.JsonResponseUtil;import com.axp.util.MD5Util;import com.axp.util.Parameter;import com.axp.util.ParameterUtil;import com.axp.util.QueryModel;import com.axp.util.StringUtil;@Servicepublic class ReGoodsOfLockMallServiceImpl extends BaseServiceImpl<ReGoodsOfLockMall> implements IReGoodsOfLockMallService {		@Override	public Map<String, Object> getGameList(HttpServletRequest request,			HttpServletResponse response) {		Parameter parameter = ParameterUtil.getParameter(request);		if (parameter == null) {//错误的参数；			return  JsonResponseUtil.getJson(-0x02,"参数data不是合法的json字符串");		}						Map<String,Object> statusMap = new HashMap<String,Object>();		Map<String,Object> dataMap = new HashMap<String,Object>();		List<Map<String,Object>> dataList = new ArrayList<Map<String,Object>>();		String basePath = request.getServletContext().getAttribute("RESOURCE_LOCAL_URL").toString();		String os = parameter.getOs();		String pageIndex = parameter.getData().getString("pageIndex");		String v = parameter.getAppVersion();        String version = "";        char[] charArray = v.toCharArray();    	for (int i = 0; i < charArray.length; i++) {			if(".".equals(String.valueOf(charArray[i]))){				continue;			}			   version+=charArray[i];		}    	try {    		Integer pageSize = 10;    		QueryModel model = new QueryModel();    		model.clearQuery();    		model.combPreEquals("isValid",true);    		model.combPreEquals("imageType.id",2,"imagetype_id");//    		if(Integer.valueOf(version)>1107 && "IOS".equals(os) ){//    			model.combCondition("commodityType.id <> 265 and commodityType.id <> 266");//    			List rolls = new ArrayList();//    			dataMap.put("rolls", rolls);//    		}else{    			dataMap.put("rolls", rolls());//    		}    		int totalPage = 0;    		int count = dateBaseDAO.findCount(CashshopType.class, model);    		int start = (Integer.valueOf(pageIndex) - 1) * pageSize;    		totalPage = (count % pageSize) > 0 ? ((count / pageSize) + 1) : (count / pageSize);    		List<CashshopType> types = dateBaseDAO.findPageList(CashshopType.class, model, start, pageSize);    		if(Integer.valueOf(version)==104 ){    			for(CashshopType c : types){    				Map<String,Object> map = new HashMap<String,Object>();    				Integer gameType = c.getCommodityType().getId();    				map.put("gameType", gameType.toString());    				map.put("gameTitle", c.getCommodityType().getName());    				map.put("gameImg", basePath+c.getImg());    				map.put("gameName", c.getName());    				map.put("gameDesc", c.getRemark());    				if(gameType == 266){//幸运抽奖的    					model.clearQuery();    					model.combPreEquals("isValid", true);    					map.put("participantNum", 10);     				}else{    					    					model.clearQuery();    					model.combPreEquals("isValid", true);    					model.combPreEquals("gameType.id", c.getCommodityType().getId(),"gameType");    					map.put("participantNum", 10);    				}    				dataList.add(map);    			}    			    		}else if(Integer.valueOf(version)>=105){    			for(CashshopType c : types){    				Map<String,Object> map = new HashMap<String,Object>();    				Integer gameType = c.getCommodityType().getId();    				map.put("gameType", gameType.toString());    				map.put("gameTitle", c.getCommodityType().getName());    				map.put("gameImg", basePath+c.getImg());    				map.put("gameName", c.getName());    				map.put("gameDesc", c.getRemark());    				List<String> userImg = new ArrayList<String>();    				if(gameType == 266){//幸运抽奖的    					model.clearQuery();    					model.combPreEquals("isvalid", true);    					model.combCondition("id<>1");    					List<Object[]> userDarws = dateBaseDAO.findHQLGroupConcat(UserDarw.class, model, "users.id","users.imgUrl");    					for(int i =0;i<userDarws.size();i++){    						userImg.add(basePath+ (userDarws.get(i)[1]==null?StringUtil.userHead:userDarws.get(i)[1]));    					}    					map.put("userImg", userImg);    					map.put("participantNum", userDarws.size()); //    				}else{    				    					model.clearQuery();    					model.combPreEquals("isValid", true);    					model.combCondition("status <> -1 and status <> 0");    					model.combPreEquals("gameType.id", c.getCommodityType().getId(),"gameType");    					List<Object[]> items = dateBaseDAO.findHQLGroupConcat(ReGoodsorderItem.class, model, "user.id","user.imgUrl");    					    					for(int i=0;i<items.size();i++){    						//userImg.add(items.get(i)[0]+"");    						userImg.add(basePath + (items.get(i)[1]==null?StringUtil.userHead: items.get(i)[1].toString())) ;    					}    					map.put("userImg", userImg);    					map.put("participantNum", items.size());    					    					    				}    				dataList.add(map);    			}    		}else{    			model.combNotIn("commodityType.id", "266,267");    			count = dateBaseDAO.findCount(CashshopType.class, model);    			start = (Integer.valueOf(pageIndex) - 1) * pageSize;        		totalPage = (count % pageSize) > 0 ? ((count / pageSize) + 1) : (count / pageSize);        		types = dateBaseDAO.findPageList(CashshopType.class, model, start, pageSize);    			for(CashshopType c : types){    				Map<String,Object> map = new HashMap<String,Object>();    				Integer gameType = c.getCommodityType().getId();    				map.put("gameType", gameType.toString());    				map.put("gameTitle", c.getCommodityType().getName());    				map.put("gameImg", basePath+c.getImg());    				map.put("gameName", c.getName());    				map.put("gameDesc", c.getRemark());					model.clearQuery();					model.combPreEquals("isValid", true);					model.combPreEquals("gameType.id", c.getCommodityType().getId(),"gameType");					List<Object> participantNum = dateBaseDAO.findDistinct(ReGoodsorderItem.class, model, "user.id");					map.put("participantNum", participantNum.size()); //    				dataList.add(map);    			}    			    		}			dataMap.put("dataList", dataList);			dataMap.put("pageIndex", pageIndex);			dataMap.put("pageSize", totalPage);									statusMap.put("status", 1);			statusMap.put("message", "请求成功");			statusMap.put("data", dataMap);		} catch (NumberFormatException e) {			// TODO Auto-generated catch block			e.printStackTrace();			statusMap.put("status", -1);			statusMap.put("message", "请求失败");		}						return statusMap;	}		@Override	public Map<String, Object> getGameListByType(HttpServletRequest request,			HttpServletResponse response) {		Parameter parameter = ParameterUtil.getParameter(request);		if (parameter == null) {//错误的参数；			return  JsonResponseUtil.getJson(-0x02,"参数data不是合法的json字符串");		}		String userId = parameter.getUserId();		String adminUserId = parameter.getAdminuserId();		String version = parameter.getAppVersion(); 		String lat = parameter.getLat();		String lng = parameter.getLng();		String gameType = parameter.getData().getString("gameType"); //游戏类型		String participantType = parameter.getData().getString("participantType");//参与类型 0 全部商品, 1 我参与的		String pageIndex = parameter.getData().getString("pageIndex");		String basePath = request.getServletContext().getAttribute("RESOURCE_LOCAL_URL").toString();		Map<String,Object> statusMap = new HashMap<String,Object>();		Map<String,Object> dataMap = new HashMap<String,Object>();		List<Map<String,Object>> dataList = new ArrayList<Map<String,Object>>();		List<Object> lotteryYards  = new ArrayList<Object>();;		QueryModel model = new QueryModel();		QueryModel modelMy = new QueryModel();		int totalPage = 0;		if("1".equals(participantType)){ //通过ReGoodsorderItem 订单表确认参与什么类型			modelMy.clearQuery();			modelMy.combPreEquals("isValid", true);			modelMy.combPreEquals("mallClass", "ldm");			modelMy.combPreEquals("gameType.id", Integer.valueOf(gameType),"gameType");			modelMy.combPreEquals("user.id", Integer.valueOf(userId),"user_id");			modelMy.combCondition("status <> -1 and status <> 0");			List<Object> goodsIds  = dateBaseDAO.findDistinct(ReGoodsorderItem.class, modelMy, "goodsId"); //我参与的商品			model.clearQuery();			if(goodsIds.size()>0 && goodsIds != null){				String good = (goodsIds.toString()).replace("[", "").replace("]", "");				model.combIn("id", good);			}else{				statusMap.put("status", -1);				statusMap.put("message", "还没有参加活动");				statusMap.put("data", dataMap);				return statusMap;			}						model.combPreEquals("isValid", true);			model.combPreEquals("isChecked", true);			int count = 0;			count = dateBaseDAO.findCount(ReGoodsOfLockMall.class, model);			int start = (Integer.valueOf(pageIndex) - 1) * pageSize;			totalPage = (count % pageSize) > 0 ? ((count / pageSize) + 1) : (count / pageSize);			List<ReGoodsOfLockMall> lockMalls = dateBaseDAO.findPageList(ReGoodsOfLockMall.class, model, start, pageSize);			for(ReGoodsOfLockMall lm: lockMalls){				Map<String,Object> map = new HashMap<String,Object>();				map.put("goodsId", lm.getGoodsOrder());				String covers = lm.getSnapshotGoods().getCoverPic();				if(StringUtil.hasLength(covers)&&covers.startsWith("[")){					JSONArray array = JSONArray.parseArray(covers);					if(array.size()>0){						covers = basePath+array.getJSONObject(0).getString("imgUrl");					}				}else{					covers="";				}				modelMy.clearQuery();				modelMy.combPreEquals("isValid", true);				modelMy.combPreEquals("goodsId", lm.getId(),"good_id");				//modelMy.combPreEquals("lotteryYards",lm.getOpenYards());				modelMy.combPreEquals("isLock", 1);				List<ReGoodsorderItem> isLock = dateBaseDAO.findLists(ReGoodsorderItem.class, modelMy);				if(isLock != null && isLock.size()>0){					map.put("prizewinner",isLock.get(0).getUser().getRealname()==null?isLock.get(0).getUser().getName():isLock.get(0).getUser().getRealname());//中奖人					map.put("prizewinnerPic", isLock.get(0).getUser().getHeadimage()==null?(StringUtil.url+StringUtil.userHead):isLock.get(0).getUser().getHeadimage());					modelMy.clearQuery();					modelMy.combPreEquals("isValid", true);					modelMy.combPreEquals("goodsId", lm.getId(),"good_id");					modelMy.combPreEquals("user.id", isLock.get(0).getUser().getId(),"user_id");					map.put("number", dateBaseDAO.findCount(ReGoodsorderItem.class, modelMy));				}else{					map.put("prizewinner","");					map.put("prizewinnerPic","");				}				map.put("openYards", lm.getOpenYards());//开奖号码				map.put("coverPic", covers);				map.put("name", lm.getSnapshotGoods().getName());				map.put("costPrice", lm.getReGoodsOfSellerMall().getDisplayPrice());				map.put("score", lm.getScore());												model.clearQuery();				model.combPreEquals("isValid", true);				model.combPreEquals("goodsId", lm.getId(),"good_id");				//model.setGroup("user.id");				model.combPreEquals("user.id", Integer.valueOf(userId),"user_id");				int participantNum = dateBaseDAO.findCount(ReGoodsorderItem.class, model);				map.put("participantNum", participantNum);								modelMy.clearQuery();				modelMy.combPreEquals("isValid", true);				modelMy.combPreEquals("mallClass", "ldm");				modelMy.combPreEquals("goodsId", lm.getId(),"good_id");				modelMy.combPreEquals("user.id", Integer.valueOf(userId),"user_id");				lotteryYards  = dateBaseDAO.findDistinct(ReGoodsorderItem.class, modelMy, "lotteryYards"); //我参与的商品				map.put("lotteryYards", lotteryYards);//抽奖码, 该商品对应对应ReGoodsorderItem 的抽奖码				long countTimeMil = System.currentTimeMillis();				if("265".equals(gameType)){					map.put("limitTime", new SimpleDateFormat("yyyy.MM.dd").format(lm.getEndTime()==null?lm.getShelvesTime():lm.getEndTime()));				}else if("267".equals(gameType)){//倒计时									if(lm.getItemLastTime()!=null){						 try {							 countTimeMil = DateUtil.getDiffTime(lm.getItemLastTime(), 2,0,0);						} catch (Exception e) {							e.printStackTrace();						}						map.put("countTimeMil", countTimeMil);//倒计时					}else{						map.put("countTimeMil", DateUtil.addHour2Date(2, new Date()).getTime());//倒计时					}					model.clearQuery();					model.combPreEquals("isValid", true);					model.combPreEquals("gameType.id", lm.getGameType().getId(),"gameType");					model.combPreEquals("goodsId", lm.getId());					model.setOrder("createTime DESC");					List<ReGoodsorderItem> items = dateBaseDAO.findLists(ReGoodsorderItem.class, model);					map.put("prizewinner","即将中奖用户:" + (items.get(0).getUser().getRealname()==null?items.get(0).getUser().getName():items.get(0).getUser().getRealname()));//中奖人					map.put("limitTime", new SimpleDateFormat("yyyy.MM.dd").format(items.get(0).getCreateTime()));					if(countTimeMil < 0){						map.put("prizewinner","中奖用户:" + (items.get(0).getUser().getRealname()==null?items.get(0).getUser().getName():items.get(0).getUser().getRealname()));//中奖人					}																}				dataList.add(map);			}											}else{			model.clearQuery();			model.combPreEquals("gameType.id", Integer.valueOf(gameType),"gameType");			model.combPreEquals("isValid", true);			model.combPreEquals("isChecked", true);			model.combCondition("addedTime < now()");			model.combCondition("shelvesTime > now()");			model.combCondition("endTime > now()");			String distance = "";			if(lat!=null && lng!=null){   				distance = " (round(6378138*2*asin(sqrt(pow(sin( (" + lat   						+ "*pi()/180-snapshotGoods.seller.latitude*pi()/180)/2),2)+cos(" + lat   						+ "*pi()/180)*cos(snapshotGoods.seller.latitude*pi()/180)*pow(sin( (" + lng   						+ "*pi()/180-snapshotGoods.seller.longitude*pi()/180)/2),2)))*1000))";   				            }			model.setOrder(distance + "ASC");						int count = 0;			count = dateBaseDAO.findCount(ReGoodsOfLockMall.class, model);			int start = (Integer.valueOf(pageIndex) - 1) * pageSize;			totalPage = (count % pageSize) > 0 ? ((count / pageSize) + 1) : (count / pageSize);			List<ReGoodsOfLockMall> lockMalls = dateBaseDAO.findPageList(ReGoodsOfLockMall.class, model, start, pageSize);			for(ReGoodsOfLockMall lm: lockMalls){				Map<String,Object> map = new HashMap<String,Object>();				Long countTimeMil = System.currentTimeMillis();				if("265".equals(gameType)){					if(lm.getOpenYards()==null){						map.put("openYards", "");						map.put("prizewinner", "");					}else{						map.put("openYards", lm.getOpenYards());//开奖号码						map.put("prizewinner", "");//中奖人缺失						continue;					}					map.put("limitTime", new SimpleDateFormat("yyyy.MM.dd").format(lm.getEndTime()==null?lm.getShelvesTime():lm.getEndTime()));									}else if("267".equals(gameType)){//倒计时					Date date = new Date();					Set<CashshopTimes> cts = lm.getTimesId();					String st = null; //开始时间					String et = null;//结束时间					if(cts.size()>0){						for(CashshopTimes ct :cts){							st= ct.getStartTime();							et = ct.getEndTime();						}					}					if(lm.getItemLastTime()!= "" && lm.getItemLastTime()!=null){ //有人购买了												if(DateUtil.compTime(lm.getItemLastTime(),st, et)){ //购买时间在范围内的							map.put("countTimeMil",countTimeMil = DateUtil.getDiffTime(lm.getItemLastTime(), 2,0,0));													}else{ //不在购买时间范围的							if(DateUtil.compTime(lm.getItemLastTime(),"00:00:00", st)){ //不用加一天								map.put("countTimeMil",  DateUtil.getDiffHHmmss(st, lm.getItemLastTime()));															}else if(DateUtil.compTime(lm.getItemLastTime(),et, "00:00:00")){ //需要加一天								map.put("countTimeMil",  DateUtil.getDiffHHmmss(lm.getItemLastTime(), "00:00:00") + 															DateUtil.getDiffHHmmss(st, "00:00:00"));							}						}					}else{ //没人购买的时候						map.put("countTimeMil", 7200000);					}										if(countTimeMil<0){						//中奖消息						continue;					}					model.clearQuery();					model.combPreEquals("isValid", true);					model.combPreEquals("gameType.id", lm.getGameType().getId(),"gameType");					model.combPreEquals("goodsId", lm.getId());					model.setOrder("createTime DESC");					List<ReGoodsorderItem> items = dateBaseDAO.findLists(ReGoodsorderItem.class, model);					if( items.size()>0 && items.get(0)!=null){						map.put("prizewinner", "即将中奖用户:"+(items.get(0).getUser().getRealname()==null?items.get(0).getUser().getName():items.get(0).getUser().getRealname()));//中奖人						map.put("limitTime",new SimpleDateFormat("yyyy.MM.dd").format(items.get(0).getCreateTime()) );											}else{						map.put("limitTime", new SimpleDateFormat("yyyy.MM.dd").format(lm.getSalesVolume()));					}														}								map.put("goodsId", lm.getGoodsOrder());				String covers = lm.getSnapshotGoods().getCoverPic();				if(StringUtil.hasLength(covers)&&covers.startsWith("[")){					JSONArray array = JSONArray.parseArray(covers);					if(array.size()>0){						covers = basePath+array.getJSONObject(0).getString("imgUrl");					}				}else{					covers="";				}								map.put("coverPic", covers);				map.put("name", lm.getSnapshotGoods().getName());				map.put("costPrice", lm.getReGoodsOfSellerMall().getDisplayPrice());				map.put("score", lm.getScore());								/*participantNum(lm);				model.clearQuery();				model.combPreEquals("isValid", true);				model.combPreEquals("gameType.id", lm.getGameType().getId(),"gameType");				model.combPreEquals("goodsId", lm.getId());				model.setGroup("user.id");				int participantNum = dateBaseDAO.findCount(ReGoodsorderItem.class, model);				*/								map.put("participantNum", (int)numAndItems(lm).get("participantNum"));				map.put("lotteryYards", lotteryYards);				dataList.add(map);			}		}		model.clearQuery();		model.combPreEquals("isValid", true);		model.combPreEquals("id", Integer.valueOf(gameType));		CommodityType game= (CommodityType) dateBaseDAO.findOne(CommodityType.class, model);						dataMap.put("dataList", dataList);		dataMap.put("pageIndex", pageIndex);		dataMap.put("pageSize", totalPage);		dataMap.put("gameTitle",game.getName());				statusMap.put("status", 1);		statusMap.put("message", "请求成功");		statusMap.put("data", dataMap);						return statusMap;	}	@Cacheable(value="rollCache")	@Override	public List<Map<String, Object>> rolls() {		List<Map<String,Object>> roll = new ArrayList<Map<String,Object>>();		QueryModel model = new QueryModel();		model.clearQuery();		model.combPreEquals("isValid", true);		model.combPreEquals("mallClass", "ldm");		model.combCondition("status <> -1 and status <> 0");		model.setOrder("createTime DESC");		List<ReGoodsorderItem> items = dateBaseDAO.findPageList(ReGoodsorderItem.class, model, 0, 10);		for(ReGoodsorderItem i : items){			Map<String,Object> data8 = new HashMap<String,Object>();			String name = i.getUser().getRealname()==null?MD5Util.hidePhone(i.getUser()):i.getUser().getRealname();			data8.put("name", name);			data8.put("info", "参与了"+i.getGoodName()+"的"+i.getGameType().getName()+"活动,即将开奖!");			data8.put("headImg", i.getUser().getHeadimage()==null?(StringUtil.url+StringUtil.userHead):i.getUser().getHeadimage());			roll.add(data8);		}		model.clearQuery();		model.combPreEquals("isValid", true);		model.setOrder("createTime DESC");		List<UserDarwRecord> record = dateBaseDAO.findPageList(UserDarwRecord.class, model, 0, 5);		for(UserDarwRecord i: record){			Map<String,Object> data8 = new HashMap<String,Object>();			int id = i.getGameActivity().getDrawYlassify().getId();			if(id!=20){				data8.put("name",i.getUsers().getRealname()==null?MD5Util.hidePhone(i.getUsers()):i.getUsers().getRealname());				data8.put("headImg", i.getUsers().getHeadimage()==null?(StringUtil.url+StringUtil.userHead):i.getUsers().getHeadimage());				if(id==18){ //积分					data8.put("info", "恭喜您抽奖了"+i.getGameActivity().getScore()+"积分");				}else if(id==19){ //商品					data8.put("info", "恭喜您抽奖了"+i.getGameActivity().getReGoodsOfSellerMall().getSnapshotGoods().getName());				}			}						roll.add(data8);		}		return roll;	}		@Override	public Map<String,Object> numAndItems (ReGoodsOfLockMall lm){		Map<String,Object> map = new HashMap<String,Object>();		QueryModel model = new QueryModel();		model.clearQuery();		model.combPreEquals("isValid", true);		model.combPreEquals("gameType.id", lm.getGameType().getId(),"gameType");		model.combPreEquals("mallId", lm.getId(),"mall_id");		model.combPreEquals("mallClass", "ldm","mall_class");		model.combPreEquals("status", 60);		List<ReGoodsorderItem> items = dateBaseDAO.findLists(ReGoodsorderItem.class, model);				model.setGroup("user.id");		int participantNum = dateBaseDAO.findCount(ReGoodsorderItem.class, model);		map.put("participantNum", participantNum);		map.put("items", items);		return map;	}	@Override	public void userScoreRegression() {		QueryModel model = new  QueryModel();		model.clearQuery();		model.combPreEquals("gameType.id", 265,"gameType");		model.combPreEquals("isValid", true);		model.combPreEquals("isChecked", true);		model.combCondition("endTime < now()");		List<ReGoodsOfLockMall> lockList = dateBaseDAO.findLists(ReGoodsOfLockMall.class, model);				for(ReGoodsOfLockMall lockMall :lockList){		model.clearQuery();		model.combPreEquals("isValid", true);		model.combPreEquals("isDeposit", 4);		model.combPreEquals("type", -1);		model.combPreEquals("goodsId", lockMall.getId(),"goodsId");		List<AdminuserCashpointRecord> acr = dateBaseDAO.findLists(AdminuserCashpointRecord.class, model);		double cashMoney = 0.0;		List<Users> userList = new ArrayList<Users>();		for(AdminuserCashpointRecord a : acr){			a.setRemark("用户"+a.getUsers().getRealname()+",在"+a.getCreateTime()+"兑换的商品没有开奖并下架了分佣没有计算");			a.setType(0);			adminuserCashpointRecordDao.saveOrUpdate(a);			userList.add(a.getUsers());		}		for(Users u:userList){						model.clearQuery();			model.combPreEquals("isValid", true);			model.combPreEquals("users.id", u.getId(),"usersId");			model.combPreEquals("lockMall.id", lockMall.getId(),"lockMallId");			model.setOrder("validityTime ASC");			List<UserScoreMark> usms = dateBaseDAO.findPageList(UserScoreMark.class, model, 0, lockMall.getScore());			Map<Integer ,Integer> sellerToScoreNum = new HashMap<Integer ,Integer>();			//处理积分走向 用户和商家的清除, 代理的分配字段置空			for(UserScoreMark  usm: usms){				Integer sellerId = usm.getAdminUser().getId();				if(sellerToScoreNum != null && sellerToScoreNum.size()>0){					if(sellerToScoreNum.containsKey(sellerId)){						sellerToScoreNum.put(sellerId, sellerToScoreNum.get(sellerId)+1);					}else{						sellerToScoreNum.put(sellerId, 1);					}				}else{					sellerToScoreNum.put(sellerId, 1);				}				usm.setLockMall(null);				usm.setReGoodsorder(null);				userScoreMarkDAO.saveOrUpdate(usm);			}			u.setScore(u.getScore()+usms.size());			usersDao.saveOrUpdate(u); 						model.clearQuery();			model.combPreEquals("isValid", true);			model.combPreEquals("isDeposit", 5);			model.combPreEquals("goodsId", lockMall.getId(),"goodsId");			model.combPreEquals("users.id", u.getId(),"fromUser");			model.combPreEquals("type", -1);			List<AdminuserCashpointRecord> smrs = dateBaseDAO.findLists(AdminuserCashpointRecord.class, model);			for(AdminuserCashpointRecord smr :smrs){				smr.setCashpoint(smr.getCashpoint());				smr.setType(0);				smr.setIsDeposit(5);				smr.setUsers(smr.getUsers());				smr.setRemark("用户:"+smr.getUsers().getRealname()+"在"+smr.getCreateTime()+"使用积分购买的商品已经下架,押金不做扣除");								adminuserCashpointRecordDao.save(smr);			}			//处理积分分佣情况			Set keys = sellerToScoreNum.keySet();			for(Object obj:keys){				Integer key = (Integer)obj; // 商家id				Integer value = (Integer) sellerToScoreNum.get(key); //商家对应的积分				AdminUser adseller = adminUserDao.findById(key);				//商家对应的代理				AdminUser dl = adseller.getParentAdminUser();				model.clearQuery();				model.combPreEquals("isValid", true);				model.combPreEquals("goodsId", lockMall.getId());				model.combPreEquals("fromAdminUser.id", key,"fromUser");				model.combPreEquals("adminUser.id", dl.getId(),"adminuserId");				model.combPreEquals("type", -1);				List<AdminUserScoreRecord> adcrs = dateBaseDAO.findLists(AdminUserScoreRecord.class, model);								for(AdminUserScoreRecord adcr :adcrs){					adcr.setRemark("用户使用商家:"+adcr.getFromAdminUser().getLoginname()+"积分消费的商品下架,积分不做回收处理");					adcr.setType(0);					adminUserScoreRecordDao.save(adcr);				}											}								}						delLockMallGoods(lockMall);					}						}			@Override	public void delLockMallGoods(ReGoodsOfLockMall goodsOfLockMall){		ReGoodsOfBase reGoodsOfBase = reGoodsOfBaseDao.findById(goodsOfLockMall.getBaseGoodsId());		if ( goodsOfLockMall.getOpenYards() != null) {						reGoodsOfLockMallDao.update(goodsOfLockMall);			try {				String changeLaunchMall = reGoodsOfBase.changeLaunchMall(reGoodsOfBase.getLaunchMall() == null ? "000000000"						: reGoodsOfBase.getLaunchMall(),8, false);				reGoodsOfBase.setLaunchMall(changeLaunchMall);				reGoodsOfBaseDao.update(reGoodsOfBase);			} catch (Exception e) {				e.printStackTrace();			}		}		}}