package com.axp.service.impl;import java.text.DateFormat;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.LinkedHashSet;import java.util.List;import java.util.Map;import javax.annotation.Resource;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.commons.lang.StringUtils;import org.bouncycastle.jce.provider.JDKDSASigner.noneDSA;import org.hibernate.Query;import org.hibernate.Session;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.interceptor.TransactionAspectSupport;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.alibaba.fastjson.serializer.SerializerFeature;import com.axp.dao.CashshopTypeDAO;import com.axp.dao.CommodityTypeDAO;import com.axp.dao.DateBaseDAO;import com.axp.dao.GoodsConcernDao;import com.axp.dao.OrderCommentDAO;import com.axp.dao.ReBaseGoodsDAO;import com.axp.dao.SellerMainPageDAO;import com.axp.dao.ShopConcernDao;import com.axp.domain.CashshopTimes;import com.axp.domain.CashshopType;import com.axp.domain.CommodityType;import com.axp.domain.GoodsConcern;import com.axp.domain.OrderComment;import com.axp.domain.ProvinceEnum;import com.axp.domain.ReBaseGoods;import com.axp.domain.ReGoodsDetails;import com.axp.domain.ReGoodsOfBase;import com.axp.domain.ReGoodsOfChangeMall;import com.axp.domain.ReGoodsOfLocalSpecialtyMall;import com.axp.domain.ReGoodsOfLockMall;import com.axp.domain.ReGoodsOfScoreMall;import com.axp.domain.ReGoodsOfSeckillMall;import com.axp.domain.ReGoodsOfSellerMall;import com.axp.domain.ReGoodsOfTeamMall;import com.axp.domain.ReGoodsSnapshot;import com.axp.domain.ReGoodsofextendmall;import com.axp.domain.ReGoodsorder;import com.axp.domain.ReGoodsorderItem;import com.axp.domain.RequestEntity;import com.axp.domain.Seller;import com.axp.domain.SellerAccountNumber;import com.axp.domain.SellerMainPage;import com.axp.domain.ShopConcern;import com.axp.domain.Slides;import com.axp.domain.Users;import com.axp.service.IMallListService;import com.axp.service.IOrderService;import com.axp.service.IReGoodsOfBaseService;import com.axp.service.IReGoodsOfLockMallService;import com.axp.service.ISellerService;import com.axp.service.IUsersService;import com.axp.service.OrderCommentService;import com.axp.service.ReGoodsofextendmallService;import com.axp.util.CacheUtil;import com.axp.util.CalcUtil;import com.axp.util.CityUtil;import com.axp.util.DateUtil;import com.axp.util.JsonResponseUtil;import com.axp.util.Parameter;import com.axp.util.ParameterUtil;import com.axp.util.QueryModel;import com.axp.util.StringUtil;import com.axp.util.UrlUtil;@Servicepublic class MallListServiceImpl extends BaseServiceImpl<RequestEntity> implements IMallListService {	@Resource	private DateBaseDAO dateBaseDAO;	@Resource	private ShopConcernDao shopConcernDao;	@Resource	private GoodsConcernDao goodsConcernDao;	@Resource	private IReGoodsOfBaseService reGoodsOfBaseService;	@Autowired	private SellerMainPageDAO mainPageDAO;	@Autowired	private IUsersService usersService;	@Autowired	private ReGoodsofextendmallService reGoodsofextendmallService;			@Autowired	private OrderCommentDAO orderCommentDao;	@Autowired	private OrderCommentService orderCommentService;	@Autowired	private IOrderService orderService;	@Autowired	private SellerMainPageDAO sellerMainPageDao;	@Autowired	private ReBaseGoodsDAO reBaseGoodsDao;	@Autowired	private CashshopTypeDAO cashshopTypeDao;	@Autowired	private CommodityTypeDAO commodityTypeDao;	@Autowired	private IReGoodsOfLockMallService reGoodsOfLockMallService;	@Override	public Map<String, Object> getGoods(HttpServletRequest request, HttpServletResponse response) {		//参数检查；		Parameter parameter = ParameterUtil.getParameter(request);		if (parameter == null) { 			return JsonResponseUtil.getJson(-0x02, "参数data不是合法的json字符串");		}		//返回结果值；		Map<String, Object> map = new HashMap<>();		try {			//获取参数；			String basePath = request.getServletContext().getAttribute("RESOURCE_LOCAL_URL").toString();			String goodsOrder = parameter.getData().getString("goodsId");//这里的goodsId并不是id，而是goodsOrder，是商城前缀和商品id拼接成的字符串；			String userId = parameter.getUserId();			Integer appVersion =StringUtil.getAppVersion(parameter.getAppVersion());			Integer couponType =parameter.getData().getInteger("couponType")==null?null:parameter.getData().getInteger("couponType");			Map<String, Object> goodsData =null;						goodsData = getGoodsDataWirhComment(goodsOrder, userId, basePath,appVersion,couponType); //新版本									if (goodsData != null) {				map.put("data", goodsData);				map.put("status", 0x01);				map.put("message", "请求成功");							} else {				map.put("data", "");				map.put("status", -0x01);				map.put("message", "没有请求到数据");							}		} catch (Exception e) {			// TODO Auto-generated catch block			e.printStackTrace();			map.put("status", -0x01);			map.put("message", "请求出错");		}								return map;	}    /**     * 根据商品对象获取需要返回的数据；     *     * @param goodsObject     * @param basePath     * @return     */    private Map<String, Object> getGoodsData(ReBaseGoods g,String basePath,String goodsObject,Integer userId,Integer couponType ) {        //返回值；        Map<String, Object> map = new HashMap<>();                try {        	        //评论分数		Double scoreAvg = orderCommentDao.findAvgBySnapGoodId(g.getSnapshotGoods().getId());		//为多图添加前序		String covers = g.getSnapshotGoods().getCoverPic();		if(StringUtil.hasLength(covers)&&covers.startsWith("[")){			JSONArray array = JSONArray.parseArray(covers);			if(array.size()>0){				covers = basePath+array.getJSONObject(0).getString("imgUrl");			}		}else{			covers="";		}        if(g.getPrice()>0&&g.getDisplayPrice()>0){        	  double b = CalcUtil.div(g.getPrice(), g.getDisplayPrice(), 2);              map.put("discount", CalcUtil.mul(b, 10, 2) + "折");// 商品折扣        }        Seller seller = g.getSnapshotGoods().getSeller();        if (seller.getLevel()!=null&&  seller.getLevel()>=0) {			seller.setLevel(seller.getLevel()+1);		}else{			seller.setLevel(1);		}                        SellerMainPage smp = sellerMainPageDao.findOneBySellerId(seller.getId());        if(StringUtils.isNotBlank(smp.getSellerLogo())){        	seller.setLogo(smp.getSellerLogo());        }        sellerDao.update(seller);        seller.setBasePath(basePath);        seller.setAxpAdminUserId("axp"+seller.getAdminUser().getId());        map.put("seller", seller);//商家信息        map.put("goodsId", goodsObject);        map.put("name", g.getSnapshotGoods().getName());        map.put("price", g.getPrice());        map.put("score", g.getScore());        map.put("cashpoint", g.getRedPaper());        map.put("costPrice", g.getDisplayPrice());        map.put("snapshotGoodsId", g.getSnapshotGoods().getId());        map.put("expressTactics", g.getTransportationName());        map.put("spec", g.getFirstStandardJsonForPhone());        map.put("isNewGoodDetail",false);        map.put("rightsProtect", g.getRightsProtectToJson());        String expressStatus = "";        QueryModel queryModel = new QueryModel();        queryModel.combPreEquals("isValid", true);        queryModel.combPreEquals("goodsOrder", goodsObject);        queryModel.combCondition("shelvesTime>now()");        String goodsOrder = goodsObject.substring(0, 3);        if ("lsm".equals(goodsOrder)) {//特产商城商品			List<ReGoodsOfLocalSpecialtyMall> lsmList = dateBaseDAO.findLists(ReGoodsOfLocalSpecialtyMall.class, queryModel);			if (lsmList!=null&& lsmList.size()>0) {				ReGoodsOfLocalSpecialtyMall mall = lsmList.get(0);				expressStatus = mall.getTransportationType().toString();				if ("1".equals(expressStatus) || "2".equals(expressStatus)) {					expressStatus ="1";				}else{					expressStatus ="2";				}				if(couponType!=null){					map.put("discountPrice",reGoodsofextendmallService.computeDeductPrice(mall,couponType));				}			}		}else if("sem".equals(goodsOrder)){//周边店铺商品			List<ReGoodsOfSellerMall> semList = dateBaseDAO.findLists(ReGoodsOfSellerMall.class, queryModel);			if (semList!=null&&semList.size()>0) {				ReGoodsOfSellerMall mall = semList.get(0);				expressStatus = mall.getTransportationType().toString();				if ("1".equals(expressStatus) || "2".equals(expressStatus)) {					expressStatus ="1";				}else{					expressStatus ="2";				}				if(couponType!=null){					map.put("discountPrice",reGoodsofextendmallService.computeDeductPrice(mall,couponType));				}			}		}else if("scm".equals(goodsOrder)){//积分兑换商品			List<ReGoodsOfScoreMall> scmList = dateBaseDAO.findLists(ReGoodsOfScoreMall.class, queryModel);			if (scmList!=null&&scmList.size()>0) {				ReGoodsOfScoreMall mall = scmList.get(0);				expressStatus = mall.getTransportationType().toString();				if ("1".equals(expressStatus) || "2".equals(expressStatus)) {					expressStatus ="1";				}else{					expressStatus ="2";				}			}		}else{			List<ReGoodsOfSeckillMall> skmList = dateBaseDAO.findLists(ReGoodsOfSeckillMall.class, queryModel);			if (skmList!=null&&skmList.size()>0) {				ReGoodsOfSeckillMall mall = skmList.get(0);				expressStatus = mall.getTransportationType().toString();				if ("1".equals(expressStatus) || "2".equals(expressStatus)) {					expressStatus ="1";				}else{					expressStatus ="2";				}			}		}        map.put("expressStatus", expressStatus);//运输方式                	    // 限制购买的数量;//        if (goodsObject.startsWith(ReBaseGoods.ScoreMall)&&userId!=null) {//        	Integer numberOfBytLimit = reGoodsOfBaseService.getNumberOfBytLimit(goodsObject, userId);//        	map.put("specNotes", g.getSecondStandardJsonForPhone(numberOfBytLimit));//	    } else {	    	map.put("specNotes", g.getSecondStandardJsonForPhone(null));//	    }	    //==========================ZL====================Start====================//	    String string = goodsObject.substring(0, 3);        map.put("mallType", ReBaseGoods.getMallTypeId(string));        if(ReBaseGoods.LocalSpecialtyMall.equalsIgnoreCase(string)){	        QueryModel model=new QueryModel();	        model.combEquals("snapshotGoods.id", g.getSnapshotGoods().getId());	        model.combPreEquals("isValid", true);	        ReGoodsOfLocalSpecialtyMall glsm=null;	        List<ReGoodsOfLocalSpecialtyMall> list=dateBaseDAO.findLists(ReGoodsOfLocalSpecialtyMall.class, model);	        if (list!=null&&list.size()>0) {	               glsm=list.get(0);	               glsm.setSalesVolume(glsm.getSalesVolume()==null?0:glsm.getSalesVolume());	        	}	        map.put("salesVolume", CalcUtil.add(glsm.getSalesVolume(), glsm.getSales()==null?0:glsm.getSales()));//总部商城商品详情销量为实际销量加上默认销量        }else{    	    map.put("salesVolume", g.getSalesVolume());        }	        //===================================end========================================//        map.put("commentCount", g.getCommentCount());        map.put("stockNumber", g.getDefaultRepertory());        map.put("coverPic", covers);//        map.put("score", scoreAvg==null?0d:scoreAvg.toString());        map.put("videos", g.getVideoJsonForPhone(basePath));        map.put("images", g.getImageJsonForPhone(basePath));                    } catch (Exception e) {            e.printStackTrace();            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();        }        return map;	}            /**     * 根据商品对象获取需要返回的数据；     * @param goodsObject     * @param basePath     * @return     */    private Map<String, Object> getGoodsData2(ReBaseGoods g,String basePath,String goodsObject,Integer userId,Integer appVersion,Integer couponType) {        //返回值；        Map<String, Object> map = new HashMap<>();                try {        	        //评论分数		//Double scoreAvg = orderCommentDao.findAvgBySnapGoodId(g.getSnapshotGoods().getId());		//为多图添加前序		String covers = g.getSnapshotGoods().getCoverPic();		if(StringUtil.hasLength(covers)&&covers.startsWith("[")){			JSONArray array = JSONArray.parseArray(covers);			if(array.size()>0){				covers = basePath+array.getJSONObject(0).getString("imgUrl");			}		}else{			covers="";		}        if(g.getPrice()>0&&g.getDisplayPrice()>0){        	  double b = CalcUtil.div(g.getPrice(), g.getDisplayPrice(), 2);              map.put("discount", CalcUtil.mul(b, 10, 2) + "折");// 商品折扣        }        Seller seller = g.getSnapshotGoods().getSeller();        if (seller.getLevel()!=null&&  seller.getLevel()>=0) {			seller.setLevel(seller.getLevel()+1);		}else{			seller.setLevel(1);		}                        SellerMainPage smp = sellerMainPageDao.findOneBySellerId(seller.getId());        if(StringUtils.isNotBlank(smp.getSellerLogo())){        	seller.setLogo(smp.getSellerLogo());        }       sellerDao.update(seller);        seller.setBasePath(basePath);        seller.setAxpAdminUserId("axp"+seller.getAdminUser().getId());        map.put("seller", seller);//商家信息        map.put("goodsId", goodsObject);        map.put("name", g.getSnapshotGoods().getName());        map.put("price", g.getReGoodsOfSellerMall().getPrice());          map.put("score", g.getReGoodsOfSellerMall().getScore());        map.put("cashpoint", g.getRedPaper());        map.put("costPrice", g.getReGoodsOfSellerMall().getDisplayPrice());        map.put("snapshotGoodsId", g.getSnapshotGoods().getId());        map.put("expressTactics", g.getTransportationName());        map.put("spec",   g.getReGoodsOfSellerMall().getFirstStandardJsonForPhone());        map.put("specNotes",  g.getReGoodsOfSellerMall().getSecondStandardJsonForPhone(null));        map.put("commentCount", g.getCommentCount());        map.put("salesVolume", g.getReGoodsOfSellerMall().getSalesVolume());                        if (g.getReGoodsOfSellerMall().getSendScoreNum()!=null && g.getReGoodsOfSellerMall().getSendScoreNum()!=0) {			map.put("obtainedScoreNum", Double.valueOf(g.getReGoodsOfSellerMall().getSendScoreNum()));		}else{			map.put("obtainedScoreNum", 0d);		}        //全国的库存取周边 其他取发布数量       // map.put("stockNumber", g.getDefaultRepertory());                  map.put("rightsProtect", g.getRightsProtectToJson()); //正品保障 售后无忧        map.put("coverPic", covers);        map.put("videos", g.getVideoJsonForPhone(basePath));        map.put("images", g.getImageJsonForPhone(basePath));                ReGoodsDetails goodsDetails =reGoodsDetailsDao.getByBaseGoods(reGoodsOfBaseDao.findById(g.getBaseGoodsId()));        if(goodsDetails!=null&&goodsDetails.getIsNew()!=null&&goodsDetails.getIsNew()==1){        	map.put("detailTPs",goodsDetails.getJsonContent(basePath)); //图文详情        	                }else{        	map.put("goodsDetail",goodsDetails.getContent()); //html标签        }                String goodDetailUrl="http://seller.aixiaoping.com/Home/Coupon/goods?goodsMall="+goodsObject+"&user_id="+userId;        map.put("isNewGoodDetail",goodsDetails.getIsNew()!=null&&goodsDetails.getIsNew()==1);        map.put("goodDetailUrl",goodDetailUrl); //分享链接        map.put("isTeam", false); //判断是否拼团                String expressStatus = "";        QueryModel queryModel = new QueryModel();        queryModel.combPreEquals("isValid", true);        queryModel.combPreEquals("goodsOrder", goodsObject);        queryModel.combCondition("shelvesTime>now()");                        //新版本库存储周边店铺全国特产外其他商城库存值取发布数量        String goodsOrder = goodsObject.substring(0, 3);               	              if ("lsm".equals(goodsOrder)) {//特产商城商品        				List<ReGoodsOfLocalSpecialtyMall> lsmList = dateBaseDAO.findLists(ReGoodsOfLocalSpecialtyMall.class, queryModel);			if (lsmList!=null&& lsmList.size()>0) {				ReGoodsOfLocalSpecialtyMall mall = lsmList.get(0);				expressStatus = mall.getTransportationType().toString();				if ("1".equals(expressStatus) || "2".equals(expressStatus)) {					expressStatus ="1";				}else{					expressStatus ="2";				}				map.put("stockNumber", g.getDefaultRepertory());				if(couponType!=null){					map.put("discountPrice",reGoodsofextendmallService.computeDeductPrice(mall,couponType));				}			}		}else if("sem".equals(goodsOrder)){//周边店铺商品			List<ReGoodsOfSellerMall> semList = dateBaseDAO.findLists(ReGoodsOfSellerMall.class, queryModel);			if (semList!=null&&semList.size()>0) {				ReGoodsOfSellerMall mall = semList.get(0);				expressStatus = mall.getTransportationType().toString();				if ("1".equals(expressStatus) || "2".equals(expressStatus)) {					expressStatus ="1";				}else{					expressStatus ="2";				}				if(couponType!=null){					map.put("discountPrice",reGoodsofextendmallService.computeDeductPrice(mall,couponType));				}							}		}else if(ReBaseGoods.teamMall.equals(goodsOrder)){			List<ReGoodsOfTeamMall> teamList = dateBaseDAO.findLists(ReGoodsOfTeamMall.class, queryModel);			if (teamList!=null&&teamList.size()>0) {				ReGoodsOfTeamMall mall = teamList.get(0);				expressStatus = mall.getTransportationType().toString();				if ("1".equals(expressStatus) || "2".equals(expressStatus)) {					expressStatus ="1";				}else{					expressStatus ="2";				}				map.put("isTeam", true); //判断是否拼团				map.put("discountPrice", mall.getDiscountPrice().toString());				//找到这个商品所对应的订单状态为5的订单				//获取数据包括 用户头像,剩余人数 剩余时间 订单号				orderService.getGoodsTeamInfo(userId,mall.getId(), map, basePath,appVersion);				map.put("stockNumber", mall.getReleaseNum());				map.put("price", g.getReGoodsOfSellerMall().getPrice().toString());  			}		}else if("scm".equals(goodsOrder)){//积分兑换商品			List<ReGoodsOfScoreMall> scmList = dateBaseDAO.findLists(ReGoodsOfScoreMall.class, queryModel);			if (scmList!=null&&scmList.size()>0) {				ReGoodsOfScoreMall mall = scmList.get(0);				expressStatus = mall.getTransportationType().toString();				if ("1".equals(expressStatus) || "2".equals(expressStatus)) {					expressStatus ="1";				}else{					expressStatus ="2";				}				map.put("score", mall.getScore());				map.put("stockNumber", mall.getReleaseNum());				map.put("specNotes",  mall.getSecondStandardJsonForPhoneSkmOrScm(null,0d,mall.getScore()));			}		}else if("ldm".equals(goodsOrder)){						List<ReGoodsOfLockMall> scmList = dateBaseDAO.findLists(ReGoodsOfLockMall.class, queryModel);			ReGoodsOfLockMall mall = scmList.get(0);			//map.put("specNotes",  mall.getSecondStandardJsonForPhoneSkmOrScm(null,0d,mall.getScore()));						List<Map<String,Object>> jsonPhone = g.getReGoodsOfSellerMall().getSecondStandardJsonForPhone(null);			for(int i=0;i<jsonPhone.size();i++){				jsonPhone.get(i).put("score", mall.getScore().toString());			}			map.put("specNotes", jsonPhone);			expressStatus = mall.getTransportationType().toString();			if ("1".equals(expressStatus) || "2".equals(expressStatus)) {				expressStatus ="1";			}else{				expressStatus ="2";			}			map.put("obtainedScoreNum", 0d);//商品详情里面送积分的的标识的,0不标识,同时跳转的时候 也不会跳到送积分的页面,			map.put("score", mall.getScore());									QueryModel model = new QueryModel();						map.put("rolls", reGoodsOfLockMallService.rolls());			Integer gameType = mall.getGameType().getId();			map.put("gameType", gameType.toString());//265 267			//						Map<String,Object> poperNum = reGoodsOfLockMallService.numAndItems(mall);			map.put("participantNum", poperNum.get("participantNum"));			model.clearQuery();			model.combPreEquals("isValid", true);			model.combPreEquals("commodityType.id",mall.getGameType().getId(),"typeId");			model.combPreEquals("imageType.id", 2,"imageType_id");			CashshopType cashshopType = (CashshopType) dateBaseDAO.findOne(CashshopType.class, model);			map.put("gameRule", cashshopType.getRemark());//抽奖说明						if(gameType == 265){				map.put("openWay", "满"+mall.getPeopleNum()+"人开奖");				map.put("limitTime",(new SimpleDateFormat("yyyy.MM.dd").format(mall.getEndTime())));			}else if(gameType ==267){				long countTimeMil = System.currentTimeMillis();				if(mall.getItemLastTime()!=null){					DateFormat df3 = DateFormat.getTimeInstance();//只显示出时分秒					 countTimeMil = DateUtil.getDiffTime(mall.getItemLastTime(), 2,0,0);					//countTimeMil = DateUtil.addHour2Date(2, df3.parse(mall.getItemLastTime())).getTime() - System.currentTimeMillis();					//countTimeMil = DateUtil.addHour2Date(2, mall.getItemLastTime()).getTime() - System.currentTimeMillis();					map.put("countTimeMil", countTimeMil);//倒计时				}else{					map.put("countTimeMil", DateUtil.addHour2Date(2, new Date()).getTime());//倒计时				}				model.clearQuery();				model.combPreEquals("isValid", true);				model.combPreEquals("gameType.id", mall.getGameType().getId(),"gameType");				model.combPreEquals("goodsId", mall.getId());				model.setOrder("createTime DESC");				List<ReGoodsorderItem> itemList = dateBaseDAO.findLists(ReGoodsorderItem.class, model);				if(itemList !=null && itemList.size()>0){										if(countTimeMil < 0){						map.put("prizewinner", "中奖用户:"+(itemList.get(0).getUser().getRealname()==null?itemList.get(0).getUser().getName():itemList.get(0).getUser().getRealname()));//中奖人					}else{												map.put("prizewinner", "即将中奖用户:"+(itemList.get(0).getUser().getRealname()==null?itemList.get(0).getUser().getName():itemList.get(0).getUser().getRealname()));//中奖人					}					map.put("limitTime", new SimpleDateFormat("yyyy.MM.dd").format(itemList.get(0).getCreateTime()));				}else{					map.put("prizewinner","");					map.put("limitTime", "");				}			}											}else{			List<ReGoodsOfSeckillMall> skmList = dateBaseDAO.findLists(ReGoodsOfSeckillMall.class, queryModel);			if (skmList!=null&&skmList.size()>0) {				ReGoodsOfSeckillMall mall = skmList.get(0);				expressStatus = mall.getTransportationType().toString();				if ("1".equals(expressStatus) || "2".equals(expressStatus)) {					expressStatus ="1";				}else{					expressStatus ="2";				}				map.put("price", mall.getPrice());				map.put("stockNumber", mall.getReleaseNum());				map.put("specNotes",  mall.getSecondStandardJsonForPhoneSkmOrScm(null,mall.getPrice(),0));			}		}        map.put("expressStatus", expressStatus);//运输方式	    String string = goodsObject.substring(0, 3);        map.put("mallType", ReBaseGoods.getMallTypeId(string));        if(ReBaseGoods.LocalSpecialtyMall.equalsIgnoreCase(string)){	        QueryModel model=new QueryModel();	        model.combEquals("snapshotGoods.id", g.getSnapshotGoods().getId());	        model.combPreEquals("isValid", true);	        ReGoodsOfLocalSpecialtyMall glsm=null;	        List<ReGoodsOfLocalSpecialtyMall> list=dateBaseDAO.findLists(ReGoodsOfLocalSpecialtyMall.class, model);	        if (list!=null&&list.size()>0) {	               glsm=list.get(0);	               glsm.setSalesVolume(glsm.getSalesVolume()==null?0:glsm.getSalesVolume());	        	}	        map.put("salesVolume", CalcUtil.add(g.getReGoodsOfSellerMall().getSalesVolume(), glsm.getSales()==null?0:glsm.getSales()));//总部商城商品详情销量为实际销量加上默认销量        }        //===================================end========================================//                    } catch (Exception e) {            e.printStackTrace();            if(!TransactionAspectSupport.currentTransactionStatus().isRollbackOnly()){            	TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();            }            map.put("status", 0x01);    		map.put("message", "请求失败");        }        return map;	}        /**     * 根据商品对象获取需要返回的数据；     *     * @param goodsObject     * @param basePath     * @return     */    private Map<String, Object> getGoodsDataForChange(ReBaseGoods g,String basePath,String goodsObject,Integer userId) {        //返回值；        Map<String, Object> map = new HashMap<>();        //评论分数		Double scoreAvg = orderCommentDao.findAvgBySnapGoodId(g.getSnapshotGoods().getId());		//为多图添加前序		String covers = g.getSnapshotGoods().getCoverPic();		if(StringUtil.hasLength(covers)&&covers.startsWith("[")){			JSONArray array = JSONArray.parseArray(covers);			if(array.size()>0){				covers = basePath+array.getJSONObject(0).getString("imgUrl");			}		}else{			covers="";		}        if(g.getPrice()>0&&g.getDisplayPrice()>0){        	  double b = CalcUtil.div(g.getPrice(), g.getDisplayPrice(), 2);              map.put("discount", CalcUtil.mul(b, 10, 2) + "折");// 商品折扣        }        Seller seller = g.getSnapshotGoods().getSeller();        seller.setBasePath(basePath);        map.put("seller", seller);//商家信息        map.put("goodsId", goodsObject);        map.put("name", g.getSnapshotGoods().getName());        map.put("price", g.getPrice());        map.put("score", g.getScore());        map.put("cashpoint", g.getRedPaper());        map.put("costPrice", g.getDisplayPrice());        map.put("snapshotGoodsId", g.getSnapshotGoods().getId());        map.put("expressTactics", g.getTransportationName());        map.put("spec", g.getFirstStandardJsonForPhone());	    // 限制购买的数量;//        if (goodsObject.startsWith(ReBaseGoods.ScoreMall)&&userId!=null) {//        	Integer numberOfBytLimit = reGoodsOfBaseService.getNumberOfBytLimit(goodsObject, userId);//        	map.put("specNotes", g.getSecondStandardJsonForPhone(numberOfBytLimit));//	    } else {	    	map.put("specNotes", g.getSecondStandardJsonForPhone(null));//	    }        map.put("mallType", ReBaseGoods.getMallTypeId(goodsObject.substring(0, 3)));        map.put("salesVolume", g.getSalesVolume());        map.put("commentCount", g.getCommentCount());        map.put("stockNumber", g.getDefaultRepertory());        map.put("coverPic", covers);        map.put("want", g.getWant());        map.put("startQuantity", g.getStartQuantity());//        map.put("score", scoreAvg==null?0d:scoreAvg.toString());        try {            map.put("videos", g.getVideoJsonForPhone(basePath));            map.put("images", g.getImageJsonForPhone(basePath));        } catch (Exception e) {            e.printStackTrace();            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();        }        return map;	}    private Map<String, Object> getGoodsData(String goodsObject,String basePath,Integer appVersion,Integer userId,Integer couponType ) {    	   //获取商品信息；        Object goods = reGoodsOfBaseService.getMall(goodsObject);        ReBaseGoods g = (ReBaseGoods) goods;        if(g.getReGoodsOfSellerMall()!=null){//这个判断新旧版问题        	        	return getGoodsData2(g, basePath, goodsObject, userId,appVersion,couponType );        }else{        	        	return getGoodsData(g, basePath, goodsObject, null,couponType);  //dab        }                   }        private Map<String, Object> getGoodsDataForChange(String goodsObject,String basePath) { 	   //获取商品信息；     Object goods = reGoodsOfBaseService.getMall(goodsObject);     ReBaseGoods g = (ReBaseGoods) goods;     return getGoodsDataForChange(g, basePath, goodsObject, null); }            private Map<String, Object> getGoodsData(String goodsObject, Integer userId, String basePath,Integer appVersion,Integer couponType) {    	Map<String, Object> good = getGoodsData(goodsObject, basePath,appVersion,userId,couponType);        //限制购买的数量;//        if (goodsObject.startsWith(ReBaseGoods.ScoreMall)) {//            Integer numberOfBytLimit = reGoodsOfBaseService.getNumberOfBytLimit(goodsObject, userId);//            good.put("specNotes", g.getSecondStandardJsonForPhone(numberOfBytLimit));//        } else {//        	good.put("specNotes", g.getSecondStandardJsonForPhone(null));//        }    	    	//是否关注    	try{        QueryModel queryModel = new QueryModel();		queryModel.combPreEquals("goodsId", goodsObject);		queryModel.combPreEquals("users.id", userId,"userId");		queryModel.combPreEquals("isfocus", true);        int count = dateBaseDAO.findCount(GoodsConcern.class, queryModel);        good.put("concern",count<1?false:true);    	}catch(Exception e){    		e.printStackTrace();    		TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();    	}        return good;    }    private Map<String, Object> getGoodsDataWirhComment(String goodsObject,String userId ,String basePath) {    	Map<String, Object> good = null;    	if(StringUtils.isEmpty(userId)){    		good = getGoodsData(goodsObject, basePath,null,null,null);    	}else{    		good = getGoodsData(goodsObject, Integer.parseInt(userId), basePath,null,null);    	}    	try{    	Map<String, Object> ocMap = new HashMap<String, Object>();    	Integer snapshotId = Integer.parseInt(good.get("snapshotGoodsId").toString());    	    	//评论列表    	List<OrderComment> ocList = orderCommentDao.findListBySnapGoodId(snapshotId,0,3);    	List<Map<String, Object>> commentList = new ArrayList<Map<String, Object>>();    	for(OrderComment oc : ocList){    		commentList.add(orderCommentService.getCommentMap(oc, basePath));    	}    	//总评论数    	Integer count = orderCommentDao.findCountBySnapGoodId(snapshotId);    	//好评率    	Double score = orderCommentDao.findAvgBySnapGoodId(snapshotId);    	ocMap.put("commentCount", count);//总评论数    	ocMap.put("goodCommentPraise", CalcUtil.mul(score, 10, 1));//好评率    	ocMap.put("dataList", commentList);//评论列表    	good.put("commentList", ocMap);    	String goodDetailUrl="http://seller.aixiaoping.com/Home/Coupon/goods?goodsMall="+goodsObject+"&user_id="+userId;    	good.put("goodDetailUrl", goodDetailUrl);    	}catch(Exception e){    		    		e.printStackTrace();    		TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();    	}    	return good;    }            private Map<String, Object> getGoodsDataWirhComment(String goodsObject,String userId ,String basePath,Integer appVersion,Integer couponType) {    	Map<String, Object> good = null;    	if(StringUtils.isEmpty(userId)){    		good = getGoodsData(goodsObject, basePath,appVersion,null,couponType);    	}else{    		good = getGoodsData(goodsObject, Integer.parseInt(userId), basePath,appVersion,couponType);    	}    	try{    	Map<String, Object> ocMap = new HashMap<String, Object>();    	if(good.get("snapshotGoodsId")!=null){    		Integer snapshotId = Integer.parseInt(good.get("snapshotGoodsId").toString());        	        	//评论列表        	List<OrderComment> ocList = orderCommentDao.findListBySnapGoodId(snapshotId,0,3);        	List<Map<String, Object>> commentList = new ArrayList<Map<String, Object>>();        	for(OrderComment oc : ocList){        		commentList.add(orderCommentService.getCommentMap(oc, basePath));        	}        	//总评论数        	Integer count = orderCommentDao.findCountBySnapGoodId(snapshotId);        	//好评率        	Double score = orderCommentDao.findAvgBySnapGoodId(snapshotId);        	ocMap.put("commentCount", count);//总评论数        	ocMap.put("goodCommentPraise", CalcUtil.mul(score, 10, 1));//好评率        	ocMap.put("dataList", commentList);//评论列表        	good.put("commentList", ocMap);        	String goodDetailUrl="http://seller.aixiaoping.com/Home/Coupon/goods?goodsMall="+goodsObject+"&user_id="+userId;        	good.put("goodDetailUrl", goodDetailUrl);    	}    	    	}catch(Exception e){    		    		e.printStackTrace();    		TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();    	}    	return good;    }            private Map<String, Object> getGoodsDataWirhCommentForChange(String goodsObject,String userId ,String basePath) {    	Map<String, Object> good = null;    	    		good = getGoodsDataForChange(goodsObject, basePath);    	    	      	    	Map<String, Object> ocMap = new HashMap<String, Object>();    	Integer snapshotId = Integer.parseInt(good.get("snapshotGoodsId").toString());    	//评论列表    	List<OrderComment> ocList = orderCommentDao.findListBySnapGoodId(snapshotId,0,3);    	List<Map<String, Object>> commentList = new ArrayList<Map<String, Object>>();    	for(OrderComment oc : ocList){    		commentList.add(orderCommentService.getCommentMap(oc, basePath));    	}    	//总评论数    	Integer count = orderCommentDao.findCountBySnapGoodId(snapshotId);    	//好评率    	Double score = orderCommentDao.findAvgBySnapGoodId(snapshotId);    	ocMap.put("commentCount", count);//总评论数    	ocMap.put("goodCommentPraise", CalcUtil.mul(score, 10, 1));//好评率    	ocMap.put("dataList", commentList);//评论列表    	good.put("commentList", ocMap);    	return good;    }               private Map<String, Object> getGoodsDataWirhCommentScore(String goodsObject,String userId ,String basePath) {    	Map<String, Object> good = null;    	if(StringUtils.isEmpty(userId)){    		good = getGoodsData(goodsObject, basePath,null,null,null);    	}else{    		good = getGoodsData(goodsObject, Integer.parseInt(userId), basePath,null,null);    	}    	Map<String, Object> ocMap = new HashMap<String, Object>();    	Integer snapshotId = Integer.parseInt(good.get("snapshotGoodsId").toString());    	//总评论数    	Integer count = orderCommentDao.findCountBySnapGoodId(snapshotId);    	//好评率    	Double score = orderCommentDao.findAvgBySnapGoodId(snapshotId);    	ocMap.put("commentCount", count);//总评论数    	ocMap.put("goodCommentPraise", CalcUtil.mul(score, 10, 1));//好评率    	good.put("commentList", ocMap);    	return good;    }	@Override	public Map<String, Object> getShopConcern(HttpServletRequest request, HttpServletResponse response) {		Parameter parameter = ParameterUtil.getParameter(request);		if (parameter == null) {			try {				response.getOutputStream().write("[{\"status\":\"0x01\",\"message\":\"成功\"}]".getBytes());				return null;			} catch (Exception e) {				e.printStackTrace();				TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();			}		}		Integer userId = Integer.parseInt(parameter.getUserId());		if(userId ==null){			return JsonResponseUtil.getJson(-0x02, "您还没有登录,请先登录");		}		Users users = usersDao.findById(userId);		JSONArray dataListArray = parameter.getData().getJSONArray("dataList");		List<Map<String,Object>> dataList = new ArrayList<>();		for(int i=0;i<dataListArray.size();i++){			JSONObject obj = dataListArray.getJSONObject(i);			Map<String,Object> map = new HashMap<>();			map.put("concern", obj.getBoolean("concern"));			map.put("sellerId", obj.getInteger("sellerId"));			dataList.add(map);		}		QueryModel queryModel = new QueryModel();		for(Map<String,Object> map : dataList){			Boolean concern = (Boolean) map.get("concern");			Integer sellerId = (Integer) map.get("sellerId");			Seller seller = sellerDAO.findById(sellerId);			queryModel.clearQuery();			queryModel.combPreEquals("users.id",userId,"userId");			queryModel.combPreEquals("seller.id", sellerId,"sellerId");			List<ShopConcern> scList = dateBaseDAO.findLists(ShopConcern.class, queryModel);			ShopConcern shopConcern = null;			if(scList.size()==0){				shopConcern = new ShopConcern();				shopConcern.setSeller(seller);				shopConcern.setUsers(users);				shopConcern.setIsfocus(concern);				shopConcernDao.save(shopConcern);			}else{				shopConcern = scList.get(0);				shopConcern.setIsfocus(concern);				shopConcernDao.update(shopConcern);			}		}		return JsonResponseUtil.getJson(0x01, "执行成功");	}	@Override	public Map<String, Object> getGoodsConcern(HttpServletRequest request, HttpServletResponse response) {		Parameter parameter = ParameterUtil.getParameter(request);		if (parameter == null) {			try {				response.getOutputStream().write("[{\"status\":\"0x01\",\"message\":\"成功\"}]".getBytes());				return null;			} catch (Exception e) {				e.printStackTrace();				TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();			}		}		Integer userId = Integer.parseInt(parameter.getUserId());		Users users = usersDao.findById(userId);		JSONArray dataListArray = parameter.getData().getJSONArray("dataList");		List<Map<String,Object>> dataList = new ArrayList<>();		for(int i=0;i<dataListArray.size();i++){			JSONObject obj = dataListArray.getJSONObject(i);			Map<String,Object> map = new HashMap<>();			map.put("concern", obj.getBoolean("concern"));			map.put("goodsId", obj.getString("goodsId"));			dataList.add(map);		}		QueryModel queryModel = new QueryModel();		for(Map<String,Object> map : dataList){			Boolean concern = (Boolean) map.get("concern");			String goodsId = (String) map.get("goodsId");			queryModel.clearQuery();			queryModel.combPreEquals("users.id",userId,"userId");			queryModel.combPreEquals("goodsId", goodsId);			List<GoodsConcern> scList = dateBaseDAO.findLists(GoodsConcern.class, queryModel);			GoodsConcern goodsConcern = null;			if(scList.size()==0){				goodsConcern = new GoodsConcern();				goodsConcern.setGoodsId(goodsId);				goodsConcern.setUsers(users);				goodsConcern.setIsfocus(concern);				goodsConcernDao.save(goodsConcern);			}else{				goodsConcern = scList.get(0);				goodsConcern.setIsfocus(concern);				goodsConcernDao.update(goodsConcern);			}		}		return JsonResponseUtil.getJson(0x01, "执行成功");	}	@Override	public Map<String, Object> getGoodsList(HttpServletRequest request, HttpServletResponse response,boolean isweb) {		String xcx = request.getParameter("xcx");		String basePath = request.getServletContext().getAttribute("RESOURCE_LOCAL_URL").toString();		Integer mallType = null;		Integer pageIndex = 1;		String typeId = "";		Integer cityId = null;		Integer sellerId = null;		String v = "";	    String version = "";	    String search = "";	    Parameter parameter = null;	    		//销量排序 空或0：无；1：高到低；2：低到高		Integer salesVolume = 0;		//价值排序，空或0：无；1：高到低；2：低到高 		Integer value = 0;		Double lat = 0.0;		Double lng = 0.0;	    	  //封装结果集；		Map<String, Object> statusMap = new HashMap<>();		Map<String, Object> dataMap = new HashMap<>();		if(xcx != null){			mallType = Integer.valueOf(request.getParameter("mallType"));			pageIndex = Integer.valueOf(request.getParameter("pageIndex"));			typeId = request.getParameter("typeId");			if(request.getParameter("cityId")!=""){				cityId = Integer.valueOf(request.getParameter("cityId"));			}			if(request.getParameter("sellerId")!=""){				sellerId = Integer.valueOf(request.getParameter("sellerId"));			}			search = request.getParameter("search");			salesVolume = Integer.valueOf(request.getParameter("salesVolume"));			value = Integer.valueOf(request.getParameter("value"));			if("333".equals(typeId)){				dataMap.put("title", "积分商品");			}else if("666".equals(typeId)){				dataMap.put("title", "人气推荐");			}else if("999".equals(typeId)){				dataMap.put("title", "99特惠");			}		}else{			//获取参数；	   		parameter = ParameterUtil.getParameter(request);			//参数检查；			if (parameter == null) {				try {					response.getOutputStream().write("[{\"status\":\"-0x02\",\"message\":\"参数错误\"}]".getBytes());					return null;				} catch (Exception e) {					e.printStackTrace();					TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();				}			}//获取具体参数；						mallType = parameter.getData().getInteger("mallType");			pageIndex = parameter.getData().getInteger("pageIndex")==null?pageIndex:parameter.getData().getInteger("pageIndex");			typeId = parameter.getData().getString("typeId");  //分类接口拿来的分类id			cityId = parameter.getData().getInteger("cityId");			sellerId = parameter.getData().getInteger("sellerId");			v = parameter.getAppVersion();			search = parameter.getData().getString("search");			salesVolume = parameter.getData().getInteger("salesVolume");			value = parameter.getData().getInteger("value");			lat = Double.valueOf(parameter.getLat());			lng = Double.valueOf(parameter.getLng());	        char[] charArray = v.toCharArray();	     	for (int i = 0; i < charArray.length; i++) {					if(".".equals(String.valueOf(charArray[i]))){						continue;					}					   version+=charArray[i];			}		}				try{							if(mallType==null){				mallType = 1;			}					int totalPage = 0;			int	count =  0;			List<Map<String, Object>> dataList = new ArrayList<>();			if (mallType==7) {				QueryModel queryModel = new QueryModel();				queryModel.combPreEquals("isValid", true);				queryModel.combPreEquals("isChecked", true);				queryModel.combCondition("shelvesTime >= sysdate()");				queryModel.combCondition("addedTime <= sysdate()");												//分类列表				if(pageIndex<=1){					List<Map<String,Object>> classifications = getTypeList(ReGoodsOfTeamMall.class,queryModel,version,mallType);					dataMap.put("classifications", classifications);									}				String parentTypeId = "";				String childTypeId ="";				if (Integer.parseInt(typeId)!=0 && StringUtils.isNotBlank(typeId)) {					CommodityType commodityType = commodityTypeDao.findById(Integer.parseInt(typeId));					if (commodityType!=null && commodityType.getName().equals("全部")) {						parentTypeId = "\"parentTypeId\""+":\""+commodityType.getCommodityType().getId()+"\"";					}else{						parentTypeId = "\":"+typeId+",\"";						childTypeId = "\":"+typeId+",\"";					}										queryModel.combCondition("( snapshotGoods.type like '%"+parentTypeId+"%' or snapshotGoods.type like '%"+childTypeId+"%')");				}				List<ReGoodsOfTeamMall> rgTeamMallList2 = new ArrayList<ReGoodsOfTeamMall>();				List<ReGoodsOfTeamMall> rgTeamMallList3 = new ArrayList<ReGoodsOfTeamMall>();				int page=pageItemCount;				int count1 = 0;				int count2 = 0;				int teamCount = 0;				int teamCount1 =0;				int teamCount2 = 0;				int start = (pageIndex - 1) * page;	//			if(zoneId==null || zoneId==0 || zoneId==-1){	//				zoneId=1961;	//			}	//			ProvinceEnum zone = provinceEnumDao.findById(zoneId);	//			if(zone.getLevel2()==2){	//				queryModel.combCondition(" snapshotGoods.seller.provinceEnum.id= "+zone.getId());	//			}else{	//				queryModel.combCondition(" snapshotGoods.seller.provinceEnum.provinceEnum.id= "+zone.getProvinceEnumId());	//			}				queryModel.combCondition("( transportationType =3 or transportationType =4)");								count1 = dateBaseDAO.findCount(ReGoodsOfTeamMall.class, queryModel);				teamCount1 = dateBaseDAO.findCount(ReGoodsOfTeamMall.class, queryModel);				rgTeamMallList2 = dateBaseDAO.findPageList(ReGoodsOfTeamMall.class, queryModel, start, page);								queryModel.clearQuery();				queryModel.combPreEquals("isValid", true);				queryModel.combPreEquals("isChecked", true);				queryModel.combCondition("shelvesTime >= sysdate()");				queryModel.combCondition("addedTime <= sysdate()");				queryModel.combCondition("( transportationType =1 or transportationType =2)");				if (Integer.parseInt(typeId)!=0 && StringUtils.isNotBlank(typeId)) {					queryModel.combCondition("( snapshotGoods.type like '%"+parentTypeId+"%' and snapshotGoods.type like '%"+childTypeId+"%')");				}				teamCount2 = dateBaseDAO.findCount(ReGoodsOfTeamMall.class, queryModel);				count2 = dateBaseDAO.findCount(ReGoodsOfTeamMall.class, queryModel);				rgTeamMallList3 = dateBaseDAO.findPageList(ReGoodsOfTeamMall.class, queryModel, start, page);								count = (int) CalcUtil.add(count1, count2);				teamCount = (int) CalcUtil.add(teamCount1, teamCount2);								rgTeamMallList2.addAll(rgTeamMallList3);								if (rgTeamMallList2!=null && rgTeamMallList2.size()>0) {					for (ReGoodsOfTeamMall goods : rgTeamMallList2) {						String covers = goods.getSnapshotGoods().getCoverPic();						if(StringUtil.hasLength(covers)&&covers.startsWith("[")){							JSONArray array = JSONArray.parseArray(covers);							if(array.size()>0){								covers = basePath+array.getJSONObject(0).getString("imgUrl");							}						}else{							covers="";						}						Map<String, Object> goodMap = new HashMap<>();						goodMap.put("name", goods.getSnapshotGoods().getName());						goodMap.put("price", CalcUtil.sub(goods.getReGoodsOfSellerMall().getPrice(), goods.getDiscountPrice()));						goodMap.put("coverPic", covers);						goodMap.put("goodsId", goods.getGoodsOrder());						goodMap.put("expressTactics", goods.getTransportationName());						dataList.add(goodMap);						dataMap.put("shareTitle", "拼团火爆来袭");						dataMap.put("shareIcon", StringUtil.shareImg);						//dataMap.put("shareUrl", "http://seller.aixiaoping.com/Share/Index/fightGroups");						dataMap.put("shareUrl", "http://seller.aixiaoping.com/Share/Index/fightGroups?typeId=0");						dataMap.put("shareContent", "每天积分拼团活动火爆来袭，限时抢购，超级划算，小伙伴赶快一起来！");					}				}				if(teamCount>0){ 					count=teamCount;				}				 totalPage = (count % page) > 0 ? ((count / page) + 1) : (count / page);				}else{				if("-1".equals(typeId)){					typeId = "";				}								Class<?> clazz = reGoodsOfBaseService.getTargetClass(mallType);				//拼接查询条件；				QueryModel queryModel = new QueryModel();				queryModel.combCondition("addedTime < now()");				queryModel.combCondition("shelvesTime > now()");				queryModel.combPreEquals("isValid", true);				queryModel.combPreEquals("isChecked", true);								if(mallType.equals(ReGoodsOfBase.sellerMall)||mallType.equals(ReGoodsOfBase.scoreMall)						|| mallType.equals(ReGoodsOfBase.seckillMall)){					if(mallType.equals(ReGoodsOfBase.sellerMall)  ){						queryModel.combPreEquals("isNotChange", true);						if(sellerId != null){							if(sellerId.equals(4761)){								queryModel.combCondition("snapshotGoods.seller.id=4761"); 							}else if(sellerId.equals(5283)){								queryModel.combCondition("snapshotGoods.seller.id=5283");							}						}					}else if(mallType.equals(ReGoodsOfBase.scoreMall)){												if("999".equals(typeId)){							queryModel.combCondition("score < 100 ");													}else if("666".equals(typeId)){							queryModel.combCondition("100 <= score and score<=500 ");						}																		}									}					if(mallType ==4){						int tid=0;						if(StringUtils.isBlank(typeId)){							tid=183;						}else{							tid=Integer.parseInt(typeId);						}						if(tid!=184 && tid!=183    ){							CommodityType ct =  commodityTypeDao.findById(tid);								if(ct!=null){								if(ct.getLevel()==1){									QueryModel queryModel2 = new QueryModel();																		queryModel2.combPreEquals("isValid", true);									queryModel2.combPreEquals("commodityType.id", tid,"modelId");									List<CommodityType> ctlist = dateBaseDAO.findPageList(CommodityType.class, queryModel2,0,Integer.MAX_VALUE);																		String con = " modelId in  (-1";									for(CommodityType ct2:ctlist){										con +=","+ct2.getId();									}									con = con+")";									queryModel.combCondition(con);								}else{									queryModel.combPreEquals("modelId", typeId);								}														  }						}						//选择全部商品，重置查询条件						if(tid == 184 || tid == 183 ){							queryModel.combCondition("addedTime < now()");							queryModel.combCondition("shelvesTime > now()");							queryModel.combPreEquals("isValid", true);							queryModel.combPreEquals("isChecked", true);						}											}else {						if(typeId!=null && !typeId.equals("0") && !typeId.equals("999")								&& !typeId.equals("333") && !typeId.equals("666")){							//正常模式							String parentTypeId = "parentTypeId\":" + typeId + "";							String childTypeId = "childTypeId\":" + typeId + "";							queryModel.combCondition("(snapshotGoods.type like '%" + parentTypeId + "%' or snapshotGoods.type like '%" + childTypeId + "%' )");													}					}									//查询是否有店铺名或该商品名				if (StringUtils.isNotBlank(search)) {					queryModel.combCondition(" snapshotGoods.seller.isvalid=1 and (snapshotGoods.name like '%" + search + "%' or snapshotGoods.seller.name like '%" + search + "%')");									}												if(cityId!=null && cityId>0){					StringBuffer sb = new StringBuffer();					sb.append(" (provinceEnum.id = ").append(cityId)					.append(" or provinceEnum.provinceEnum.id = ").append(cityId).append(")");					queryModel.combCondition(sb.toString());				}				//分类列表				if(pageIndex<=1){					List<Map<String,Object>> classifications = getTypeList(clazz,queryModel,version,mallType);					dataMap.put("classifications", classifications);				}								int page=pageItemCount;				if(isweb){					page=100;				}				count = dateBaseDAO.findCount(clazz, queryModel);  //查出的是所有根据条件筛选的商品 但不是最终展示的商品				int localCount=0;				int sellerCount=0;				int start = (pageIndex - 1) * page;								List<ReBaseGoods> rgSellerMallList2=new ArrayList<ReBaseGoods>();				List<ReBaseGoods> rgLocalMallList2=new ArrayList<ReBaseGoods>();				if (sellerId!=null) {							queryModel.clearQuery();					queryModel.combCondition("addedTime < now()");					queryModel.combCondition("shelvesTime > now()");					queryModel.combPreEquals("isValid", true);					queryModel.combPreEquals("isChecked", true);					//queryModel.combPreEquals("isNotChange", true);					//假如在这里计算count   计算的是本地特产 假如计算出来的是 10页  周边是5页  取最大数赋给count  					queryModel.combPreEquals("snapshotGoods.seller.id", sellerId, "sellerId");										QueryModel queryModel2 = new QueryModel();  //查出所有该商家的商品					queryModel2.combPreEquals("snapshotGoods.seller.id", sellerId, "sellerId");					queryModel2.combCondition("addedTime < now()");					queryModel2.combCondition("shelvesTime > now()");					queryModel2.combPreEquals("isValid", true);					queryModel2.combPreEquals("isChecked", true);				} 								//排序				this.getOrderByChar(parameter, queryModel,mallType,salesVolume,value,lat,lng,typeId);				sellerCount=dateBaseDAO.findCount(clazz, queryModel);				//查询结果；							List<ReBaseGoods> rgSellerMallList = dateBaseDAO.findPageList(clazz, queryModel, start, page);								rgSellerMallList2.addAll(rgSellerMallList);																											for (ReBaseGoods r : rgSellerMallList2) {										//为多图添加前序					String covers = r.getSnapshotGoods().getCoverPic();					if(StringUtil.hasLength(covers)&&covers.startsWith("[")){						JSONArray array = JSONArray.parseArray(covers);						if(array.size()>0){							covers = basePath+array.getJSONObject(0).getString("imgUrl");						}					}else{						covers="";					}						Map<String, Object> goodMap = new HashMap<>();					//销量百分比										Integer repertory=0;					Integer salesVolumes =0;										if(r.getReGoodsOfSellerMall()!=null){						if(r.getReGoodsOfSellerMall().getDefaultRepertory()!=null){							repertory =r.getReGoodsOfSellerMall().getDefaultRepertory();						}						if(r.getReGoodsOfSellerMall().getSalesVolume()!=null){							salesVolumes = r.getReGoodsOfSellerMall().getSalesVolume();						}					}else{						repertory = r.getDefaultRepertory()==null?0:r.getDefaultRepertory();//库存						salesVolumes =  r.getSalesVolume()==null?0:r.getSalesVolume();//销量					}										Double salesRatio = 0d;					if(repertory>0){						salesRatio = CalcUtil.div(salesVolumes, (repertory+salesVolumes), 2);					}					if(repertory==0){						salesRatio=1d;					}										Integer stockNumber=0;										//说明是新版积分列表  要显示是否已售完					if(r.getReGoodsOfSellerMall()!=null&&mallType==ReGoodsOfBase.scoreMall){						ReGoodsOfScoreMall scoreMall=(ReGoodsOfScoreMall) r;						if(!scoreMall.getIsNoStandard()){							stockNumber=scoreMall.getReleaseNum();						}else{							stockNumber=scoreMall.getReGoodsOfSellerMall().getDefaultRepertory();						}					}else{ //老版数据						stockNumber=r.getDefaultRepertory();					}										//商品类别					String type = "";					String getType = r.getSnapshotGoods().getType();					if(!getType.startsWith("[")){						getType = "["+getType+"]";					}					JSONArray typeList = JSONArray.parseArray(getType);					for(int i=0;i<typeList.size();i++){						type =  ((Map<String,Object>)typeList.get(i)).get("parentTypeName").toString();					}					 					goodMap.put("goodDescription", "");//详情										goodMap.put("goodType", type);					goodMap.put("salesRatio",salesRatio*100);					//库存					goodMap.put("stockNumber",stockNumber);					//商品快照的id值					goodMap.put("snapshotGoodsId", r.getSnapshotGoods().getId());					//对应的基础商品的商品编号；					goodMap.put("sign", r.getSnapshotGoods().getSign());					//商品名称					goodMap.put("name", r.getSnapshotGoods().getName());					goodMap.put("expressTactics", r.getTransportationName());					//商品的封面图片					goodMap.put("coverPic", covers);					//商品对应的商家id值					Seller seller = r.getSnapshotGoods().getSeller();					seller.setBasePath(basePath);					goodMap.put("seller", seller);					//商品显示价格，即原价；					goodMap.put("costPrice", r.getDisplayPrice());					//商品售价（这个售价是所有规格中价格最小的那个售价）					goodMap.put("price", r.getPrice());					goodMap.put("score", r.getScore());					goodMap.put("cashpoint", r.getRedPaper());					goodMap.put("expressTactics", r.getTransportationName());					goodMap.put("salesVolume", r.getSalesVolume());					goodMap.put("mallType", ReBaseGoods.getMallTypeId(ReBaseGoods.getMallType(mallType)));					if(r.getPrice()!=0&&r.getDisplayPrice()!=0){						double b = CalcUtil.div(r.getPrice(), r.getDisplayPrice(),2);						goodMap.put("discount",CalcUtil.mul(b, 10, 2) + "折");// 商品折扣					}					goodMap.put("goodsId", ReBaseGoods.getMallType(mallType)+r.getId());						dataList.add(goodMap);				}								if(localCount>0||sellerCount>0){ 					count=localCount>sellerCount?localCount:sellerCount;				}				totalPage = (count % page) > 0 ? ((count / page) + 1) : (count / page);							}		//新增轮播图			List<Slides> banners = slidesDao.getsListByZb(Slides.SCOREMALL);				List<Map<String, Object>> bannerList = new ArrayList<>();				int i = 0;		for (Slides slides : banners) {			if (i < 7) {				Map<String, Object> map = new HashMap<String, Object>();				map.put("image", slides.getImgurls() == null ? ""						: basePath + slides.getImgurls());				map.put("uri", slides.getLinkurl());				map.put("name", slides.getName());				map.put("typeId", slides.getType());				bannerList.add(map);				i++;			}		}				dataMap.put("bannerList", bannerList);		dataMap.put("dataList", dataList);		dataMap.put("pageSize", totalPage);				dataMap.put("pageIndex", pageIndex);		dataMap.put("pageItemCount", pageItemCount);		statusMap.put("data", dataMap);		statusMap.put("status", 0x01);		statusMap.put("message", "请求成功");		}catch(Exception e){			e.printStackTrace();			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();		}		return statusMap;	}	//供首页使用  秒杀专区	@Override	public Map<String,Object> getSecKillGoods(HttpServletRequest request, HttpServletResponse response){				String basePath = request.getServletContext().getAttribute("RESOURCE_LOCAL_URL").toString();		Parameter parameter = ParameterUtil.getParameter(request);		Integer zoneId = 0;		Integer pageIndex = 0;		Integer page = 4;		if(parameter.getData() != null){			pageIndex = parameter.getData().getInteger("pageIndex");			page = parameter.getData().getInteger("page");					}		Map<String, Object> statusMap = new HashMap<>();		Map<String, Object> dataMap = new HashMap<>();		List<Map<String,Object>> dataList = new ArrayList<Map<String,Object>>();		QueryModel queryModel = new QueryModel();		//通过当前时间对比,秒杀时间段 得到秒杀场次id		queryModel.clearQuery();		queryModel.combPreEquals("isValid", true);		queryModel.combCondition("startTime < DATE_FORMAT(now(),'%T')");		queryModel.combCondition("endTime > DATE_FORMAT(now(),'%T')");				Integer secondKillId  = 0;		int count1 = dateBaseDAO.findCount(CashshopTimes.class, queryModel);				if(count1<=0){    //当前时间不在秒杀时间段的,取当前时间最近的一下个秒杀时间			queryModel.clearQuery();			queryModel.combPreEquals("isValid", true);			queryModel.combCondition("DATE_FORMAT(now(),'%T') < startTime");			queryModel.setOrder("startTime ASC");						int count2 = dateBaseDAO.findCount(CashshopTimes.class, queryModel);						if(count2<=0){ // 当前时间不在当天所有的秒杀时间段的,也就是当前时间最近的下一个秒杀时间没有了,那就要找到第二天的第一个秒杀时间段				queryModel.clearQuery();				queryModel.combPreEquals("isValid", true);				queryModel.setOrder("startTime ASC");			}								}				List<CashshopTimes> times = dateBaseDAO.findLists(CashshopTimes.class, queryModel);		if(times != null && times.size()>0){			secondKillId = times.get(0).getId();		}				queryModel.clearQuery();		queryModel.combCondition("addedTime < now()");		queryModel.combCondition("shelvesTime > now()");		queryModel.combPreEquals("isValid", true);		queryModel.combPreEquals("isChecked", true);				CashshopTimes time = cashshopTimesDAO.findById(secondKillId);		String ids = "-1";		for(ReGoodsOfSeckillMall good : time.getGoods()){			ids += ","+good.getId();		}		queryModel.combCondition("id in ("+ids+")");				if(zoneId==null || zoneId==0 || zoneId==-1){			zoneId=1961; //广州1961 黄埔1968		}				ProvinceEnum zone = provinceEnumDao.getCurrentCity(zoneId);				queryModel.combCondition(" (seckillArea=1 or  (seckillArea=0 and snapshotGoods.seller.provinceEnum.provinceEnum.id= "+zone.getId()+"))");						int count = dateBaseDAO.findCount(ReGoodsOfSeckillMall.class, queryModel);  //查出的是所有根据条件筛选的商品 但不是最终展示的商品		int localCount=0;		int sellerCount=0;		int start = (pageIndex - 1) * page;				List<ReBaseGoods> rgSellerMallList2=new ArrayList<ReBaseGoods>();				sellerCount=dateBaseDAO.findCount(ReGoodsOfSeckillMall.class, queryModel);		//查询结果；		List<ReBaseGoods> rgSellerMallList = dateBaseDAO.findPageList(ReGoodsOfSeckillMall.class, queryModel, start, page);		rgSellerMallList2.addAll(rgSellerMallList);				for (ReBaseGoods r : rgSellerMallList2) {						//为多图添加前序			String covers = r.getSnapshotGoods().getCoverPic();			if(StringUtil.hasLength(covers)&&covers.startsWith("[")){				JSONArray array = JSONArray.parseArray(covers);				if(array.size()>0){					covers = basePath+array.getJSONObject(0).getString("imgUrl");				}			}else{				covers="";			}			Map<String, Object> goodMap = new HashMap<>();			//销量百分比						Integer repertory=0;			Integer salesVolume =0;						if(r.getReGoodsOfSellerMall()!=null){				if(r.getReGoodsOfSellerMall().getDefaultRepertory()!=null){					repertory =r.getReGoodsOfSellerMall().getDefaultRepertory();				}				if(r.getReGoodsOfSellerMall().getSalesVolume()!=null){					salesVolume = r.getReGoodsOfSellerMall().getSalesVolume();				}			}else{				repertory = r.getDefaultRepertory()==null?0:r.getDefaultRepertory();//库存				salesVolume =  r.getSalesVolume()==null?0:r.getSalesVolume();//销量			}						Integer salesRatio = 0;			if(repertory>0){				salesRatio = (int) CalcUtil.div(salesVolume, (repertory+salesVolume));							}			if(repertory==0){				salesRatio=1;			}						Integer stockNumber=0;								//商品类别			String type = "";			String getType = r.getSnapshotGoods().getType();			if(!getType.startsWith("[")){				getType = "["+getType+"]";			}			JSONArray typeList = JSONArray.parseArray(getType);			for(int i=0;i<typeList.size();i++){				type =  ((Map<String,Object>)typeList.get(i)).get("parentTypeName").toString();			}						goodMap.put("goodDescription", "");//详情						goodMap.put("goodType", type);			goodMap.put("salesRatio",salesRatio);			//库存			goodMap.put("stockNumber",stockNumber);			//商品快照的id值			goodMap.put("snapshotGoodsId", r.getSnapshotGoods().getId());			//对应的基础商品的商品编号；			goodMap.put("sign", r.getSnapshotGoods().getSign());			//商品名称			goodMap.put("name", r.getSnapshotGoods().getName());			goodMap.put("expressTactics", r.getTransportationName());			//商品的封面图片			goodMap.put("coverPic", covers);			//商品对应的商家id值			Seller seller = r.getSnapshotGoods().getSeller();			seller.setBasePath(basePath);			goodMap.put("seller", seller);			//商品显示价格，即原价；			goodMap.put("costPrice", r.getDisplayPrice());			//商品售价（这个售价是所有规格中价格最小的那个售价）			goodMap.put("price", r.getPrice());			goodMap.put("score", r.getScore());			goodMap.put("cashpoint", r.getRedPaper());			goodMap.put("expressTactics", r.getTransportationName());			goodMap.put("salesVolume", r.getSalesVolume());			goodMap.put("mallType", ReBaseGoods.getMallTypeId(ReBaseGoods.getMallType(3)));			if(r.getPrice()!=0&&r.getDisplayPrice()!=0){				double b = CalcUtil.div(r.getPrice(), r.getDisplayPrice(),2);				goodMap.put("discount",CalcUtil.mul(b, 10, 2) + "折");// 商品折扣			}			goodMap.put("goodsId", ReBaseGoods.getMallType(3)+r.getId());			dataList.add(goodMap);		}				int totalPage = (count % page) > 0 ? ((count / page) + 1) : (count / page);				dataMap.put("dataList", dataList);		dataMap.put("pageSize", totalPage);				dataMap.put("pageIndex", pageIndex);		dataMap.put("pageItemCount", pageItemCount);		dataMap.put("seckillInfos", time.getStartTime()+"-"+time.getEndTime());		statusMap.put("data", dataMap);		statusMap.put("status", 0x01);		statusMap.put("message", "请求成功");												return statusMap;									}									public List<Map<String,Object>> getCityList(){				List<Map<String,Object>> list = new ArrayList<Map<String,Object>>();		List<ProvinceEnum> ctlist = provinceEnumDao.getListByLevel(1);		List<ProvinceEnum> ctlist1=provinceEnumDao.getListByLevel(2);						for(ProvinceEnum s : ctlist){			List<Map<String,Object>> lv2List = new ArrayList<Map<String,Object>>();			Map<String,Object> lv1map = new HashMap<String, Object>();			lv1map.put("provinceId", s.getId());			lv1map.put("provinceName", s.getName());			lv1map.put("cityItems", lv2List);			for(ProvinceEnum s2 : ctlist1){				if(s2.getProvinceEnum()!=null){					if(s2.getProvinceEnum().getId()==s.getId()){						Map<String,Object> lv2map = new HashMap<String, Object>();						lv2map.put("cityId",s2.getId() );						lv2map.put("cityName", s2.getName());						lv2List.add(lv2map);					}				}			}			list.add(lv1map);		}		return list;	}		public List<Map<String,Object>> getTypeList(Object targetMall, QueryModel goodsModel,String version,Integer mallType){				//固定的数据  缓存起来		List<Map<String,Object>> list = new ArrayList<Map<String,Object>>(154); //避免重复扩容		if(CacheUtil.containsKey("getGoodsList_getTypeList")){			return (List<Map<String, Object>>) CacheUtil.getCacheByName("getGoodsList_getTypeList");		}				List<CommodityType> ctlist =null;		List<CommodityType> ctlist1=new ArrayList<CommodityType>();		List<CommodityType> ctlist2=new ArrayList<CommodityType>();		List<Map<String,Object>> sclist1 = new ArrayList<Map<String,Object>>();		List<Map<String,Object>> sclist2 = new ArrayList<Map<String,Object>>();		CommodityType type = null;		Map<String,Object> lv1map =null;				QueryModel model = new QueryModel();		if (mallType == 7 || mallType ==1) {			model.combPreEquals("isValid", true);			model.combPreEquals("level", 1);			model.orCondition("id<>264");			ctlist = dateBaseDAO.findLists(CommodityType.class, model);			for (int i = 0; i < ctlist.size(); i++) {				lv1map = new HashMap<String, Object>();				type = ctlist.get(i);				if (!type.getName().equals("全部")) {					lv1map.put("typeId", type.getId().toString());					lv1map.put("typeName", type.getName());										list.add(lv1map);				}			}		}else{						model.clearQuery();			model.combCondition("");			model.combCondition("commodityTypeId is NOT NULL");			List<Object> typeIds = dateBaseDAO.findDistinct(ReGoodsOfBase.class, model,"commodityTypeId");						model.clearQuery();			model.combIn("id", (typeIds.toString().replace("[", "")).replace("]", ""));			List<CommodityType> sclist = dateBaseDAO.findLists(CommodityType.class, model); //商品二级分类						List<Integer> sc1 = new ArrayList<Integer>();			for(CommodityType sc2 :sclist){ //二级				lv1map = new HashMap<String, Object>();				lv1map.put("typeId", sc2.getId());				lv1map.put("typeName", sc2.getName());				sclist1.add(lv1map);			}		}		return sclist1;	}	private void getOrderByChar(Parameter parameter,QueryModel model,Integer mallType, Integer salesVolume, Integer value, Double lat, Double lng, String typeId){		//销量排序 空或0：无；1：高到低；2：低到高//		Integer salesVolume = parameter.getData().getInteger("salesVolume")==null?0:parameter.getData().getInteger("salesVolume");		//价值排序，空或0：无；1：高到低；2：低到高 //		Integer value = parameter.getData().getInteger("value");//		Double lat = Double.valueOf(parameter.getLat());//		Double lng = Double.valueOf(parameter.getLng());				        //吴工新增排序方式        Boolean isScoreMallOrSeckillMallAndNoSearchCondition=false;        StringBuffer orderBy = new StringBuffer();        if(mallType != 1){        	if("333".equals(typeId)){        		orderBy.append("zhidingTime desc, transportationType DESC,");        	}else if("666".equals(typeId)){        		orderBy.append("zhiding_hot desc, transportationType DESC,");        	}else if("999".equals(typeId)){        		orderBy.append("zhiding_99 desc, transportationType DESC,");        	}        	        	        }        if ((salesVolume == null || salesVolume == 0) && (value == null || value == 0) && mallType != null) {            // 如果是99，会员，特产，商城，那么默认排序是按照销量进行排序；            if (mallType == 4 || mallType == 5 || mallType == 6) {                salesVolume=1;            }            //如果是积分商城或者秒杀商城，需要先按照投放区域排序，在按照销量倒序排序；            if (mallType == 2||mallType==3) {                isScoreMallOrSeckillMallAndNoSearchCondition=true;                if(lat!=null && lng!=null){	   				String distance = " (round(6378138*2*asin(sqrt(pow(sin( (" + lat	   						+ "*pi()/180-snapshotGoods.seller.latitude*pi()/180)/2),2)+cos(" + lat	   						+ "*pi()/180)*cos(snapshotGoods.seller.latitude*pi()/180)*pow(sin( (" + lng	   						+ "*pi()/180-snapshotGoods.seller.longitude*pi()/180)/2),2)))*1000))";	   				orderBy.append(distance + "asc and transportationType DESC ,");                }            }        }				if(salesVolume!=null&&salesVolume!=0){			switch (salesVolume) {			case 1:				orderBy.append("salesVolume desc");				break;			case 2:				orderBy.append("salesVolume asc");				break;			}		}else if(value!=null&&value!=0){			switch (value) {			case 1:				orderBy.append("score desc");				break;			case 2:				orderBy.append("score asc");				break;			}							} 		//如果满足无排序条件，并且查询的是积分商城的列表；        if (isScoreMallOrSeckillMallAndNoSearchCondition) {            if (mallType == 2) {            	              orderBy.append("salesVolume desc");            } else if (mallType == 3) {                orderBy.append(" seckillArea asc,salesVolume desc");            }        }                                if(orderBy.length()>0){        	String orderBys = "";        	if(orderBy.lastIndexOf(",") == orderBy.length()-1){        		orderBys = orderBy.substring(0, orderBy.length()-1);        	}else{        		orderBys = orderBy.toString();        	}            model.setOrder(orderBys);		}	}	//会员免单商城	@Override	public Map<String, Object> freeMall(HttpServletRequest request,HttpServletResponse response) {		String basePath = request.getServletContext().getAttribute("RESOURCE_LOCAL_URL").toString();		QueryModel queryModel = new QueryModel();		queryModel.clearQuery();		queryModel.combPreEquals("isValid", true);		queryModel.combPreEquals("type", 80);		List<Slides> slideList = dateBaseDAO.findLists(Slides.class, queryModel);		List<Map<String,Object>> dataList = new ArrayList<>();		Map<String,Object> slidesMap = null;		for(Slides slides : slideList){			slidesMap = new HashMap<>();			slidesMap.put("name", slides.getName());			slidesMap.put("image", basePath+slides.getImgurls());			dataList.add(slidesMap);		}		Map<String,Object> dataMap = new HashMap<>();		dataMap.put("becomeVipBanners", dataList);		Map<String,Object> bigDateMap = new HashMap<>();		bigDateMap.put("data", dataMap);		bigDateMap.put("status", 0x01);		bigDateMap.put("message", "请求成功");		return bigDateMap;	}	@Override	public Map<String, Object> getConcernGoodsList(HttpServletRequest request,			HttpServletResponse response) {		String xcx = request.getParameter("xcx");		Integer userId = null;		String basePath = request.getServletContext().getAttribute("RESOURCE_LOCAL_URL").toString();		if(xcx != null){			userId = Integer.valueOf(request.getParameter("userId"));		}else{						Parameter parameter = ParameterUtil.getParameter(request);						if (parameter == null) {				try {					response.getOutputStream().write("[{\"status\":\"-0x02\",\"message\":\"参数错误\"}]".getBytes());					return null;				} catch (Exception e) {					e.printStackTrace();					TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();				}			}			userId = StringUtil.isEmpty(parameter.getUserId()) ? -1 : Integer.parseInt(parameter.getUserId());		}		QueryModel queryModel = new QueryModel();		queryModel.combPreEquals("users.id",userId,"userId");		queryModel.combPreEquals("isfocus",true);		List<GoodsConcern> gcList = dateBaseDAO.findLists(GoodsConcern.class, queryModel);		List<Map<String,Object>> dataList = new ArrayList<>();		for(GoodsConcern gc : gcList){			dataList.add(getGoodsDataWirhCommentScore(gc.getGoodsId(),userId+"", basePath));		}		Map<String,Object> dataMap = new HashMap<>();		dataMap.put("dataList", dataList);		Map<String,Object> statusMap = new HashMap<>();		statusMap.put("status", 0x01);		statusMap.put("message", "请求成功");		statusMap.put("data", dataMap);		return statusMap;	}	@Override	public Map<String, Object> getConcernSellerList(HttpServletRequest request,			HttpServletResponse response) {		String xcx = request.getParameter("xcx");		Double lat = 0.0;		Double lng = 0.0;		Integer userId = null;		String basePath = request.getServletContext().getAttribute("RESOURCE_LOCAL_URL").toString();		if(xcx != null){			lat = Double.valueOf(request.getParameter("lat"));			lng = Double.valueOf(request.getParameter("lng"));			userId = Integer.valueOf(request.getParameter("userId"));			Map<String,Double> map = CityUtil.Convert_BD09_To_GCJ02(lat, lng);			lat = map.get("lat");			lng = map.get("lng");		}else{			Parameter parameter = ParameterUtil.getParameter(request);			if (parameter == null) {//错误的参数；				return JsonResponseUtil.getJson(-0x02,"参数data不是合法的json字符串");			}			lat = StringUtils.isEmpty(parameter.getLat())?null:Double.parseDouble(parameter.getLat());			lng = StringUtils.isEmpty(parameter.getLng())?null:Double.parseDouble(parameter.getLng());			userId = StringUtil.isEmpty(parameter.getUserId()) ? -1 : Integer.parseInt(parameter.getUserId());		}		QueryModel queryModel = new QueryModel();		queryModel.combPreEquals("users.id",userId,"userId");		queryModel.combPreEquals("isfocus",true);		List<ShopConcern> scList = dateBaseDAO.findLists(ShopConcern.class, queryModel);		//获取商家店铺ID		StringBuffer sellerIds = new StringBuffer("-1");		for(ShopConcern sc :scList){			sellerIds.append(","+sc.getSeller().getId());		}		List<SellerMainPage> pageList = mainPageDAO.getSellerMainPageIds(sellerIds.toString());		List<Object> pageMapList = new ArrayList<>();		for(SellerMainPage m : pageList){			SellerMainPage.InnerSellerMainPage page = m.new InnerSellerMainPage(lat,lng);			page.setBasePath(basePath);			//判断该商品是否被关注			page.setConcern(true);			//查找出所有的积分商品	        queryModel.clearQuery();	        queryModel.combPreEquals("snapshotGoods.seller.id", page.getSellerId(),"sellerId");	        queryModel.combCondition("addedTime < now()");			queryModel.combCondition("shelvesTime > now()");			queryModel.combPreEquals("isChecked", true);	        queryModel.combPreEquals("isValid", true);	        queryModel.setOrder("id desc");			List<ReGoodsOfScoreMall> mallList = dateBaseDAO.findPageList(ReGoodsOfScoreMall.class, queryModel, 0 , 8);			List<Object> goodsList = new ArrayList<>();			for(ReGoodsOfScoreMall mall :mallList){				goodsList.add(getGoodsData(mall, basePath, "scm"+mall.getId(),null,null));			}			page.setRecommendScoreGoodsList(goodsList);			pageMapList.add(page);		}		Map<String,Object> dataMap = new HashMap<>();		dataMap.put("dataList", pageMapList);		Map<String,Object> statusMap = new HashMap<>();		statusMap.put("status", 0x01);		statusMap.put("message", "请求成功");		statusMap.put("data", dataMap);		return statusMap;	}	@Override	public Map<String, Object> getGoodsType(HttpServletRequest request,			HttpServletResponse response) {		//参数检查；		Parameter parameter = ParameterUtil.getParameter(request);		if (parameter == null) { 			return JsonResponseUtil.getJson(-0x02, "参数data不是合法的json字符串");		}		//获取参数；		String basePath = request.getServletContext().getAttribute("RESOURCE_LOCAL_URL").toString();		String type = parameter.getData().getString("type");		Integer mallType = parameter.getData().getInteger("mallType");				if (mallType==null) {			mallType = parameter.getData().getInteger("mallTyle");		}		String v = parameter.getAppVersion();        String version = "";        char[] charArray = v.toCharArray();    	for (int i = 0; i < charArray.length; i++) {			if(".".equals(String.valueOf(charArray[i]))){				continue;			}			   version+=charArray[i];		}		//返回结果值；		Map<String, Object> map = new HashMap<>();				Map<String, Object> typemap = new HashMap<>();		Map<String, Object> citymap = new HashMap<>();		if(mallType==null){			mallType=1;		}		if (mallType == 7 || mallType ==1) {			typemap.put("typeList", getType(7,version));		}else if(mallType == 4){			typemap.put("typeList", getType(4,version));			typemap.put("cityList", getCityList());		}				map.put("status", 0x01);		map.put("message", "请求成功");		map.put("data", typemap);		return map;		 	}				public List<Map<String,Object>> getType(Integer mallType,String version){		List<Map<String,Object>> list = new ArrayList<Map<String,Object>>();		List<CommodityType> ctlist1=new ArrayList<CommodityType>();		List<CommodityType> ctlist2=new ArrayList<CommodityType>();		List<CommodityType> ctlist = null;		QueryModel model = new QueryModel();		CommodityType type = null;		Map<String,Object> lv1map = null;				if (mallType==7) {			model.combPreEquals("isValid", true);			model.combPreEquals("level", 1);			ctlist = dateBaseDAO.findLists(CommodityType.class, model);			for (int i = 0; i < ctlist.size(); i++) {				lv1map = new HashMap<String, Object>();				type = ctlist.get(i);				if (!type.getName().equals("全部")) {					lv1map.put("typeId", type.getId());					lv1map.put("typeName", type.getName());					list.add(lv1map);				}							}		}else{			model.clearQuery();			model.combPreEquals("isValid", true);			model.combPreEquals("isLocal", true);			model.combPreEquals("level", 1);			ctlist = dateBaseDAO.findLists(CommodityType.class, model);			for(CommodityType s : ctlist){				lv1map = new HashMap<String, Object>();				lv1map.put("typeId", s.getId());				lv1map.put("typeName", s.getName());				list.add(lv1map);			}		}																					return list;	}	public List<Map<String,Object>> getCity(Integer modelId){				List<Map<String,Object>> list = new ArrayList<Map<String,Object>>();		List<CommodityType> ctlist = commodityTypeDao.getList(modelId);//所有分类		List<CommodityType> ctlist1=new ArrayList<CommodityType>();		List<CommodityType> ctlist2=new ArrayList<CommodityType>();				for(CommodityType s : ctlist){			if(s.getLevel()==1){				ctlist1.add(s);			}else{				ctlist2.add(s);			}		}				for(CommodityType s : ctlist1){			List<Map<String,Object>> lv2List = new ArrayList<Map<String,Object>>();			Map<String,Object> lv1map = new HashMap<String, Object>();			lv1map.put("typeId", s.getId());			lv1map.put("typeName", s.getName());			lv1map.put("typeItems", lv2List);			for(CommodityType s2 : ctlist2){				if(s2.getCommodityType().getId()==s.getId()){					Map<String,Object> lv2map = new HashMap<String, Object>();					lv2map.put("typeId",s2.getId() );					lv2map.put("typeName", s2.getName());					lv2List.add(lv2map);				}			}			list.add(lv1map);		}		return list;	}	@Override	public Map<String, Object> getGoodsListForChange(			HttpServletRequest request, HttpServletResponse response) {		//获取参数；		Parameter parameter = ParameterUtil.getParameter(request);		String basePath = request.getServletContext().getAttribute("RESOURCE_LOCAL_URL").toString();		QueryModel model = new QueryModel();		//参数检查；		if (parameter == null) {			try {				response.getOutputStream().write("[{\"status\":\"-0x02\",\"message\":\"参数错误\"}]".getBytes());				return null;			} catch (Exception e) {				e.printStackTrace();				TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();			}		}		int type =parameter.getData().getInteger("type");		//获取具体参数；		Integer pageIndex = parameter.getData().getInteger("pageIndex")==null?1:parameter.getData().getInteger("pageIndex");		Integer typeId = parameter.getData().getInteger("goodsTypeId");		Integer usersId = Integer.parseInt(parameter.getUserId()==null?"0":parameter.getUserId());		Integer zoneId = StringUtils.isEmpty(parameter.getZoneId())?-1:Integer.parseInt(parameter.getZoneId());		String quantity = "";		String sellerCashpoint = "";		String sellerScore = "";		String sellerName = "";		Integer sellerId = 0;		//拼接查询条件；				QueryModel queryModel = new QueryModel();		if(type==1){//首页			queryModel.combPreEquals("isChange", 1);			queryModel.combPreEquals("snapshotGoods.seller.provinceEnum.id", zoneId, "zoneId");		}else if(type<10){//我有的			if(usersId!=null && usersId>0){			model.clearQuery();			model.combEquals("isvalid",1);			model.combEquals("users.id",usersId);			Seller seller = null;			List<Seller> sellerList = dateBaseDAO.findPageList(Seller.class, model, 0 , 1);			if(sellerList.size()>0){			    seller = sellerList.get(0);			    quantity = seller.getQuantity()==null?"":seller.getQuantity().toString();				sellerCashpoint = seller.getCashPoints()==null?"":seller.getCashPoints().toString();				sellerScore = seller.getScore()==null?"":seller.getScore().toString();				sellerName = seller.getName()==null?"":seller.getName();				sellerId = seller.getId();			}else{				model.clearQuery();				model.combPreEquals("user.id", usersId, "userId");				model.combPreEquals("isValid", true);				List<SellerAccountNumber> acounts = dateBaseDAO.findPageList(SellerAccountNumber.class, model, 0, 1);				if(acounts.size()>0){					seller = acounts.get(0).getSeller();					quantity = seller.getQuantity() == null ? "" : seller.getQuantity().toString();					sellerCashpoint = seller.getCashPoints() == null ? "" : seller.getCashPoints().toString();					sellerScore = seller.getScore() == null ? "" : seller.getScore().toString();					sellerName = seller.getName() == null ? "" : seller.getName();					sellerId = seller.getId();				}else{					sellerId=-1;				}			}						}					}				String search = parameter.getData().getString("keyWord");				//封装结果集；		Map<String, Object> statusMap = new HashMap<>();		Map<String, Object> dataMap = new HashMap<>();						queryModel.combPreEquals("isValid", true);		queryModel.combPreEquals("isChecked", true);		if (sellerId>0) {			queryModel.combPreEquals("snapshotGoods.seller.id", sellerId, "sellerId");			int ischange =type==5?1:0;			queryModel.combPreEquals("isChange", ischange);		}else if(sellerId<0){			queryModel.combPreEquals("isChange", 100);		}else{			queryModel.combPreEquals("isChange", 1);			queryModel.combPreEquals("snapshotGoods.seller.provinceEnum.id", zoneId, "zoneId");		}								//查询是否有店铺名或该商品名		if (StringUtils.isNotBlank(search)) {			String [] keyword = search.split("-");						int j = 0;			String con = "(";			for(int i =0;i<keyword.length;i++){				if(i==0){					con +="want like '%" + keyword[i] + "%'";				}else {					con +=" or want like '%" + keyword[i] + "%'";				}				j=i+1;							}			con +=")";						if(j==0){				con =" 1=1 ";			}						queryModel.combCondition(con);					}		if (typeId!=null) {			String parentTypeId = "parentTypeId\":" + typeId + "";			String childTypeId = "childTypeId\":" + typeId + "";			queryModel.combCondition("(snapshotGoods.type like '%" + parentTypeId + "%' or snapshotGoods.type like '%" + childTypeId + "%' )");		}		int	count = dateBaseDAO.findCount(ReGoodsOfChangeMall.class, queryModel);		int totalPage = (count % pageItemCount) > 0 ? ((count / pageItemCount) + 1)				: (count / pageItemCount);		int start = (pageIndex - 1) * pageItemCount;				//查询结果；		List<ReBaseGoods> rgSellerMallList = dateBaseDAO.findPageList(ReGoodsOfChangeMall.class, queryModel,start,pageItemCount);								List<Map<String, Object>> dataList = new ArrayList<>();		for (ReBaseGoods r : rgSellerMallList) {						//为多图添加前序			String covers = r.getSnapshotGoods().getCoverPic();			if(StringUtil.hasLength(covers)&&covers.startsWith("[")){				JSONArray array = JSONArray.parseArray(covers);				if(array.size()>0){					covers = basePath+array.getJSONObject(0).getString("imgUrl");				}			}else{				covers="";			}			Map<String, Object> goodMap = new HashMap<>();			//销量百分比			Integer repertory = r.getDefaultRepertory();//库存			Integer salesVolume =  r.getSalesVolume();//销量			Double salesRatio = CalcUtil.div(salesVolume, (repertory+salesVolume), 2);			goodMap.put("salesRatio",salesRatio*100);			//库存			goodMap.put("stockNumber", r.getDefaultRepertory());			//商品快照的id值			goodMap.put("snapshotGoodsId", r.getSnapshotGoods().getId());			//对应的基础商品的商品编号；			goodMap.put("sign", r.getSnapshotGoods().getSign());			//商品名称			goodMap.put("name", r.getSnapshotGoods().getName());			goodMap.put("expressTactics", r.getTransportationName());			//商品的封面图片			goodMap.put("coverPic", covers);			//商品对应的商家id值			Seller seller = r.getSnapshotGoods().getSeller();			seller.setBasePath(basePath);			goodMap.put("seller", seller);			//商品显示价格，即原价；			goodMap.put("costPrice", r.getDisplayPrice());			//商品售价（这个售价是所有规格中价格最小的那个售价）			goodMap.put("price", r.getPrice());			goodMap.put("score", r.getScore());			goodMap.put("cashpoint", r.getRedPaper());			goodMap.put("expressTactics", r.getTransportationName());			goodMap.put("salesVolume", r.getSalesVolume());			goodMap.put("goodsId", r.getId());			goodMap.put("want", r.getWant());			goodMap.put("quantity", r.getStartQuantity());			goodMap.put("images", r.getImageJsonForPhone(basePath));						dataList.add(goodMap);		}		dataMap.put("dataList", dataList);		dataMap.put("pageSize", totalPage);		dataMap.put("pageIndex", pageIndex);		dataMap.put("pageItemCount", pageItemCount);		statusMap.put("data", dataMap);		statusMap.put("status", 0x01);		statusMap.put("message", "请求成功");		return statusMap;			}	@Override	public Map<String, Object> getGoodsForChange(HttpServletRequest request,			HttpServletResponse response) {		//参数检查；				Parameter parameter = ParameterUtil.getParameter(request);				if (parameter == null) { 					return JsonResponseUtil.getJson(-0x02, "参数data不是合法的json字符串");				}				//获取参数；				String basePath = request.getServletContext().getAttribute("RESOURCE_LOCAL_URL").toString();				String goodsOrder = parameter.getData().getString("goodsId");				String userId = parameter.getUserId();				goodsOrder ="cha"+goodsOrder;				Map<String, Object> goodsData =getGoodsDataWirhCommentForChange(goodsOrder, userId, basePath);				//返回结果值；				Map<String, Object> map = new HashMap<>();				if (goodsData != null) {					map.put("data", goodsData);				} else {					map.put("data", "");				}				map.put("status", 0x01);				map.put("message", "请求成功");				return map;		}		/**     * 换回会一级列表 (我的换货)     */	@Override	public Map<String, Object> myChangeList(HttpServletRequest request,			HttpServletResponse response) {		//参数检查；				Parameter parameter = ParameterUtil.getParameter(request);				if (parameter == null) { 					return JsonResponseUtil.getJson(-0x02, "参数data不是合法的json字符串");				}				//返回结果值；				Map<String, Object> map = new HashMap<>();				try {					//获取参数；					//String basePath = request.getServletContext().getAttribute("RESOURCE_LOCAL_URL").toString();					String userId = parameter.getUserId();					Users users = usersDao.findById(Integer.parseInt(userId));					Map<String, Object> goodsData =changeNoteDao.myChangeList(users);				map.put("data", goodsData);				} catch (Exception e) {					e.printStackTrace();					map.put("status", 0x01);					map.put("message", "请求成功");				}				map.put("status", 0x01);				map.put("message", "请求成功");				return map;		}		//增加换货商品访问量		public Map<String, Object> addPageView(HttpServletRequest request,HttpServletResponse response){			Parameter parameter = ParameterUtil.getParameter(request);			if (parameter == null) { 				return JsonResponseUtil.getJson(-0x02, "参数data不是合法的json字符串");			}			String goodsOrder=parameter.getData().getString("goodsOrder");			Integer goodsId = Integer.parseInt(goodsOrder.substring(3,goodsOrder.length()));			dateBaseDAO.updateByHQL("update ReGoodsOfChangeMall set pageView=pageView+1 where id="+goodsId);			return JsonResponseUtil.getJson(1, "请求成功");		}			//获取用户自己的换货商品列表	@Override	public Map<String, Object> getUserChangeGoodsList(HttpServletRequest request,HttpServletResponse response){		Parameter parameter = ParameterUtil.getParameter(request);		if (parameter == null) { 			return JsonResponseUtil.getJson(-0x02, "参数data不是合法的json字符串");		}		Map<String, Object> map=new HashMap<>();		try {		String basePath = request.getServletContext().getAttribute("RESOURCE_LOCAL_URL").toString();		Integer userId=Integer.parseInt(parameter.getUserId());		Integer pageIndex = parameter.getData().getInteger("pageIndex");		Seller seller = sellerDao.findByUserId(userId);		if(seller==null){			map.put("status", -1);			map.put("message", "请先成为商家身份,再进行换货操作");			return map;		}		QueryModel queryModel=new QueryModel();		queryModel.combEquals("isValid", 1);		queryModel.combEquals("isChecked", 1);		queryModel.combCondition("snapshotGoods.seller.id="+seller.getId());		queryModel.combCondition(" addedTime<=now() and shelvesTime>=now() ");		Integer count=dateBaseDAO.findCount(ReGoodsOfChangeMall.class, queryModel);		List<ReGoodsOfChangeMall> list =dateBaseDAO.findPageList(ReGoodsOfChangeMall.class, queryModel,( pageIndex-1*pageSize), pageSize);		List<Map<String, Object>> listMap=new ArrayList<>();		for (ReGoodsOfChangeMall changeMall : list) {			listMap.add(getChangeGoodsMap(changeMall, changeMall.getGoodsOrder(), basePath,userId,null));		}				Integer totalPage = (count % pageSize) > 0 ? ((count / pageSize) + 1) : (count / pageSize);		Map<String, Object> dataMap=new HashMap<>();		dataMap.put("dataList", listMap);		dataMap.put("pageSize", totalPage);		dataMap.put("pageIndex", pageIndex);		dataMap.put("pageItemCount", pageItemCount);		map.put("data", dataMap);		map.put("status", 1);		map.put("message", "请求成功");		} catch (Exception e) {			map.put("status", -1);			map.put("message", "请求失败");			e.printStackTrace();			if(!TransactionAspectSupport.currentTransactionStatus().isRollbackOnly()){				TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();			}		}		return map;	}			//换货商品详情	public Map<String, Object>	getGoodsMapForChange(HttpServletRequest request,HttpServletResponse response){		Parameter parameter = ParameterUtil.getParameter(request);		if (parameter == null) { 			return JsonResponseUtil.getJson(-0x02, "参数data不是合法的json字符串");		}		Map<String, Object> map=new HashMap<>();			try {				String basePath = request.getServletContext().getAttribute("RESOURCE_LOCAL_URL").toString();				String goodsOrder=parameter.getData().getString("goodsOrder");				Integer goodsId = Integer.parseInt(goodsOrder.substring(3,goodsOrder.length()));				Integer usersId=StringUtils.isBlank(parameter.getUserId())?null:Integer.parseInt(parameter.getUserId());				Integer zoneId=StringUtils.isBlank(parameter.getZoneId())?null:Integer.parseInt(parameter.getZoneId());				//ReGoodsOfChangeMall changeMall = reGoodsOfChangeMallDao.findById(goodsId);				map.put("data",getChangeGoodsDetail(goodsOrder, basePath,usersId,zoneId));				map.put("status", 1);				map.put("message", "请求成功");			} catch (Exception e) {				map.put("status", -1);				map.put("message", "请求失败");				e.printStackTrace();				if(!TransactionAspectSupport.currentTransactionStatus().isRollbackOnly()){					TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();				}			}				return map;				}			public Map<String, Object> getChangeGoodsDetail(String goodsOrder,String basePath,Integer userId,Integer zoneId) throws Exception {		Map<String, Object> goodsData=new HashMap<>();		Integer goodsId = Integer.parseInt(goodsOrder.substring(3,goodsOrder.length()));		ReGoodsOfChangeMall changeMall = reGoodsOfChangeMallDao.findById(goodsId);		//ReGoodsSnapshot goodsSnapshot = changeMall.getSnapshotGoods();			goodsData=getChangeGoodsMap(changeMall, goodsOrder, basePath,userId,zoneId);		return goodsData;	}			/**	 * 用来构建换货会商品信息 列表可用 明细可用	 * @param changeMall	 * @param goodsOrder	 * @param basePath	 * @return	 * @throws Exception	 */	public Map<String, Object> getChangeGoodsMap(ReGoodsOfChangeMall changeMall,String goodsOrder,String basePath,Integer userId,Integer zoneId) throws Exception{		Map<String, Object> goodsData=new HashMap<>();		ReGoodsSnapshot goodsSnapshot = changeMall.getSnapshotGoods();		goodsData.put("goodsName", goodsSnapshot.getName()); //商品名 		goodsData.put("coverPic", goodsSnapshot.getPrefixCoverPic(basePath)); //商品轮播图多张		goodsData.put("coverPicOne",basePath+goodsSnapshot.getCoverPicForUse()); //商品图一张		goodsData.put("changeDesc", changeMall.getChangeDesc()); //描述		//goodsData.put("displayPrice", changeMall.getDisplayPrice()); //市场价		goodsData.put("displayPrice", changeMall.getPrice()); //市场价		if(goodsSnapshot.getSeller()!=null){			goodsData.put("sellerAddress", goodsSnapshot.getSeller().getSellerAddres()); //商家店铺所在地址						if(zoneId!=null && zoneId>0){				ProvinceEnum pe = provinceEnumDao.findById(zoneId);//用户所在地				ProvinceEnum spe = goodsSnapshot.getSeller().getProvinceEnum();				if(pe!=null && spe!=null){//					if(pe.getLevel2()==3 && spe.getLevel2()==3){						if(pe.getProvinceEnumId().intValue()==spe.getProvinceEnumId2().intValue()){//同城							goodsData.put("isSameCity", "1");						}else{							goodsData.put("isSameCity", "2");						}					}else if(pe.getLevel2()==2 && spe.getLevel2()==2){						if(pe.getId().intValue()==spe.getId().intValue()){							goodsData.put("isSameCity", "1");						}else{							goodsData.put("isSameCity", "2");						}					}else{						goodsData.put("isSameCity", "2");					}				}							}else{				goodsData.put("isSameCity", "3");			}								}else{			goodsData.put("sellerAddress", "请联系商家！");			goodsData.put("isSameCity", "3");		}		 //商家店铺所在地址						goodsData.put("want", changeMall.getWantArray()); //存的时候给数组 取也是数组 //想换什么		ReGoodsDetails goodsDetails =reGoodsDetailsDao.getByBaseGoods(reGoodsOfBaseDao.findById(changeMall.getBaseGoodsId()));		JSONArray  goodsDetail=new JSONArray();		if(goodsDetails.getIsNew()!=null&&goodsDetails.getIsNew()==1){			goodsDetail=JSONArray.parseArray(goodsDetails.getJsonContent(basePath).toString());		}		goodsData.put("goodsDetail",goodsDetail); //图文详情		goodsData.put("isNewGoodDetail",goodsDetails.getIsNew()!=null&&goodsDetails.getIsNew()==1);		Users goodsUser = goodsSnapshot.getSeller().getUsers();		goodsData.put("goodsUserId",goodsUser.getId()); //商品的userId  聊天使用; 联系他		goodsData.put("goodsUserName", StringUtils.isBlank(goodsUser.getRealname())?goodsUser.getName():goodsUser.getRealname());		goodsData.put("goodsOrder", goodsOrder);		goodsData.put("goodsId", changeMall.getId());		goodsData.put("mallType", ReBaseGoods.getMallTypeId(goodsOrder.substring(0,3)));		goodsData.put("transportationType", changeMall.getTransportationName()); //交易方式		goodsData.put("pageView", changeMall.getPageView()); //浏览量		if(!changeMall.getIsNoStandard()){			goodsData.put("specifications", changeMall.getSpecifications());// 有规格			}else{			goodsData.put("specifications", changeMall.getIsNotSpecifications());//没规格		}		goodsData.put("goodsUserHead", StringUtil.getUserDefaultHead(goodsUser, basePath));		goodsData.put("hasSpecStr", !changeMall.getIsNoStandard());		goodsData.put("stock", changeMall.getDefaultRepertory());				Integer score=0;		if(userId!=null && userId>0){			Users users = usersDao.findById(userId);			score=users.getScore()==null?0:users.getScore();		}		goodsData.put("userScore", score);				return goodsData;	}			public Map<String, Object> getGoodsOfChange(HttpServletRequest request,			HttpServletResponse response) {				//参数检查；				Parameter parameter = ParameterUtil.getParameter(request);				if (parameter == null) { 					return JsonResponseUtil.getJson(-0x02, "参数data不是合法的json字符串");				}				//获取参数；				String basePath = request.getServletContext().getAttribute("RESOURCE_LOCAL_URL").toString();				String goodsOrder = parameter.getData().getString("goodsId");				String userId = parameter.getUserId();				goodsOrder ="cha"+goodsOrder;				Map<String, Object> goodsData = getGoodsDataWirhCommentForChange(goodsOrder, userId, basePath);				//返回结果值；				Map<String, Object> map = new HashMap<>();				if (goodsData != null) {					map.put("data", goodsData);				} else {					map.put("data", "");				}				map.put("status", 0x01);				map.put("message", "请求成功");				return map;		}		@Override	public Map<String, Object> updateStatus(HttpServletRequest request,			HttpServletResponse response) {		Parameter parameter = ParameterUtil.getParameter(request);		if (parameter == null) { 			return JsonResponseUtil.getJson(-0x02, "参数data不是合法的json字符串");		}		//获取参数；		String basePath = request.getServletContext().getAttribute("RESOURCE_LOCAL_URL").toString();		String goodsOrder = parameter.getData().getString("goodsId");		String status = parameter.getData().getString("status");		String userId = parameter.getUserId();		int goodsid=0;		if(goodsOrder.startsWith("cha")){			goodsid=Integer.parseInt(goodsOrder.substring(3));		}else{			goodsid= Integer.parseInt(goodsOrder);		}		if(Integer.parseInt(status)==0 || Integer.parseInt(status)==1){		dateBaseDAO.updateByHQL("update  ReGoodsOfChangeMall set isChange="+status+" where id="+goodsid);		}		//返回结果值；		Map<String, Object> map = new HashMap<>();		map.put("status", 0x01);		map.put("message", "请求成功");		return map;	}	@Override	public Map<String, Object> getGoodsList(HttpServletRequest request,			HttpServletResponse response) {		// TODO Auto-generated method stub		return null;	}	@Override	public Map<String, Object> getSellerGoodsList(HttpServletRequest request,			HttpServletResponse response) {// da		//获取参数		Parameter parameter = ParameterUtil.getParameter(request);		String basePath = request.getServletContext().getAttribute("RESOURCE_LOCAL_URL").toString();				if(parameter == null){			return JsonResponseUtil.getJson(-0x02, "参数data不合法的json字符串");		}		//封装结果集,并返回的				//获取具体参数；		Integer sellerId = Integer.parseInt(parameter.getData().getString("sellerId"));		String v = parameter.getAppVersion();		String version = "";		//判断APP版本号		char[] charArray = v.toCharArray();		for (int i = 0; i < charArray.length; i++) {			if(".".equals(String.valueOf(charArray[i]))){				continue;			}			 version+=charArray[i];		}		Map<String, Object> statusMap = new HashMap<>();		statusMap.put("message", "请求成功");		statusMap.put("status", 0x01);				Map<String,Object> dataMap = new HashMap<String,Object>();						//根据sellerId 查询该商家下所有的商品信息		QueryModel queryModel = new QueryModel();		queryModel.combPreEquals("id", sellerId);				Seller seller = (Seller) dateBaseDAO.findOne(Seller.class, queryModel);		if(seller==null){			dataMap.put("noseller", "没有找到该用户");			return dataMap;		}		List<Map<String, Object>> dataList = new ArrayList<>();				Map<String,Object> goodMaps  = new HashMap<String,Object>();			//商品快照			queryModel.clearQuery();			queryModel.combPreEquals("seller.id",seller.getId(),"sellerId" );			List<ReGoodsSnapshot> goodsSnapshotList = dateBaseDAO.findLists(ReGoodsSnapshot.class, queryModel);			if(goodsSnapshotList.size()>0){								goodMaps.put("goodsSnapshotList", goodsSnapshotList);			}			for(ReGoodsSnapshot s: goodsSnapshotList){								Map<String,Object> goodMap  = new HashMap<String,Object>();				queryModel.clearQuery();				queryModel.combPreEquals("baseGoodsId", s.getBaseGoodsId());//("id",s.getBaseGoodsId)				queryModel.combPreEquals("isValid", true);				queryModel.combPreEquals("isChecked", true);				queryModel.combCondition("shelvesTime >= now()");//下架时间				queryModel.combCondition("addedTime <= now()");//上架时间											List<ReGoodsOfSellerMall> sellerList = dateBaseDAO.findLists(ReGoodsOfSellerMall.class, queryModel);				if(sellerList.size()>0){					goodMap.put("sellerList", sellerList);				}								//基础商品				queryModel.clearQuery();				queryModel.combPreEquals("snapshotGoods.seller.id", s.getSeller().getId(),"sellerId");				queryModel.combPreEquals("isValid", true);				queryModel.combPreEquals("isChecked", true);				List<ReBaseGoods> goodsBaseList = dateBaseDAO.findLists(ReBaseGoods.class, queryModel);				if(goodsBaseList.size()>0){					goodMap.put("goodsBaseList", goodsBaseList);				}							//秒杀				queryModel.clearQuery();				//queryModel.combPreEquals("baseGoodsId",s.getBaseGoodsId());				queryModel.combPreEquals("snapshotGoods.seller.id",sellerId,"sellerId");				queryModel.combPreEquals("isChecked", true);				queryModel.combPreEquals("isValid", true);				queryModel.combCondition("shelvesTime >= now()");//下架时间				queryModel.combCondition("addedTime <= now()");//上架时间				List<ReGoodsOfSeckillMall> killMallList = dateBaseDAO.findLists(ReGoodsOfSeckillMall.class, queryModel);				if(killMallList.size()>0){					goodMap.put("killMallList", killMallList);				}							//拼团				List<ReGoodsOfTeamMall> teamMallList = dateBaseDAO.findLists(ReGoodsOfTeamMall.class, queryModel);				if(teamMallList.size()>0){										goodMap.put("teamMallList", teamMallList);				}								//积分商城				List<ReGoodsOfScoreMall> scoreMallList = dateBaseDAO.findLists(ReGoodsOfScoreMall.class, queryModel);				if(scoreMallList.size()>0){										goodMap.put("scoreMallList", scoreMallList);				}								//特色商城				List<ReGoodsOfLocalSpecialtyMall> LocalMall = dateBaseDAO.findLists(ReGoodsOfLocalSpecialtyMall.class, queryModel);				if(LocalMall.size()>0){										goodMap.put("LocalMall", LocalMall);				}								dataList.add(goodMap);			}					//活动 优惠券		queryModel.clearQuery();		queryModel.combPreEquals("isValid", true);		queryModel.combPreEquals("sign", 1);//换券中,未下架标识		queryModel.combPreEquals("seller.id",seller.getId(),"sellerid");		queryModel.combPreEquals("isActivity",1);		List<ReGoodsofextendmall> extendMallList = dateBaseDAO.findLists(ReGoodsofextendmall.class, queryModel);		if(extendMallList.size()>0){						goodMaps.put("extendMallList", extendMallList);		}				dataList.add(goodMaps);		statusMap.put("dataList", dataList);				return statusMap;	}	@Override	public List<Map<String,Object>> getGoodsMap(Integer mallType, Integer start,			Integer end ,Integer pid ,String basePath,double lat,double lng) throws Exception {		// TODO Auto-generated method stub			List<Map<String,Object>> dataList = new ArrayList<>();		try{		//获取具体参数；			Class<?> clazz = reGoodsOfBaseService.getTargetClass(mallType);			//拼接查询条件；			QueryModel queryModel = new QueryModel();			queryModel.combCondition("addedTime < now()");			queryModel.combCondition("shelvesTime > now()");			queryModel.combPreEquals("isValid", true);			queryModel.combPreEquals("isChecked", true);						if(pid==4){ //超级特惠				queryModel.combCondition("score < 100 ");				queryModel.setOrder("zhiding_99 DESC , transportationType DESC");			}			if(pid==6){ //人气推荐, 销量排序				queryModel.combCondition("score>=100 and score <=500 ");				queryModel.setOrder("zhiding_hot desc , transportationType DESC");			}			if(pid==3){				queryModel.setOrder("zhidingTime desc , transportationType DESC");			}						//查询结果；			List<ReBaseGoods> rgSellerMallList2 = dateBaseDAO.findPageList(clazz, queryModel,start,end);			for (ReBaseGoods r : rgSellerMallList2) {				 				//为多图添加前序   				String covers = r.getSnapshotGoods().getCoverPic();				if(StringUtil.hasLength(covers)&&covers.startsWith("[")){					JSONArray array = JSONArray.parseArray(covers);					if(array.size()>0){						String a = array.getJSONObject(0).getString("imgUrl");						covers = basePath + "/" + a;  //da					}				}else{					covers="";				}				Map<String,Object> goodMap = new HashMap<String,Object>();								List<SellerMainPage> pageList = mainPageDAO.getSellerMainPageIds(r.getSnapshotGoods().getSeller().getId().toString());				SellerMainPage sellerPage = null ;				if(pageList.size()>0 && pageList != null){					 sellerPage = pageList.get(0);										 List<Object> pageMapList = new ArrayList<>();					 SellerMainPage.InnerSellerMainPage page = sellerPage.new InnerSellerMainPage(lat,lng);										 if(mallType==ReGoodsOfBase.sellerMall|| mallType==ReGoodsOfBase.scoreMall){						 goodMap.put("goodsId",StringUtil.getNullValue(ReBaseGoods.getMallType(mallType)+r.getId()));						 goodMap.put("price",StringUtil.getNullValue(r.getPrice())+"");						 goodMap.put("name",StringUtil.getNullValue(r.getSnapshotGoods().getName()));						 goodMap.put("score",StringUtil.getNullValue(r.getScore()));						 goodMap.put("mallType", mallType); 						 goodMap.put("costPrice", StringUtil.getNullValue(r.getDisplayPrice()));						 goodMap.put("coverPic",covers);						 goodMap.put("distance", page.getDistance());						 goodMap.put("transportationType", r.getTransportationType());												 //商品类别 //餐饮美食分类						 String type = "";						 String getType = r.getSnapshotGoods().getType();						 if(!getType.startsWith("[")){							 getType = "["+getType+"]";						 }						 JSONArray typeList = JSONArray.parseArray(getType);						 for(int i=0;i<typeList.size();i++){							 type =  ((Map<String,Object>)typeList.get(i)).get("parentTypeName").toString();						 }						 						 goodMap.put("goodType", type);						 goodMap.put("goodDescription", type);					 }				}								dataList.add(goodMap);			}												}catch(Exception e){			e.printStackTrace();			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();		}		return dataList;	}	/**	 * 同步爱小屏积分商品	 */	@Override	public Map<String, Object> getAxpScoreGoods(HttpServletRequest request,			HttpServletResponse response) {		Parameter parameter = ParameterUtil.getParameter(request);		String app = parameter.getApp();		String appVersion = parameter.getAppVersion();		String axp = parameter.getAxp();		String channelId = parameter.getChannelId();		String dip = parameter.getDip();		String lat = parameter.getLat();		String lng = parameter.getLng();		String os = parameter.getOs();		String times = parameter.getTimes();		String userId = parameter.getUserId();		String zoneId = parameter.getZoneId();		String mallType = parameter.getData().getString("mallType");		Integer pageIndex = parameter.getData().getInteger("pageIndex");		String salesVolume = parameter.getData().getString("salesVolume");		String value = parameter.getData().getString("value");				String a = "http://www.aixiaoping.com:8080/aixiaopingAPI/invoke/mall/getGoodsList?"				+"data={\"app\":\""+app+"\",\"appVersion\":\""+appVersion+"\",\"axp\":\""+axp+"\","				+"\"channelId\":\""+channelId+"\",\"data\":{\"mallType\":\""+mallType+"\",\"pageIndex\":"+pageIndex				+",\"salesVolume\":\""+salesVolume+"\",\"value\":\""+value+"\"},\"dip\":\""+dip+"\",\"lat\":\""+lat+"\",\"lng\":\""+lng+"\",\"os\":\""+os+"\","				+"\"times\":\""+times+"\",\"userId\":\""+userId+"\",\"zoneId\":\""+zoneId+"\"}";						Map<String,Object> scoreGoods = UrlUtil.getTaoKeToMap(a.replaceAll(" ", ""));				String b = (scoreGoods.toString()).replaceAll("null", "");		JSONObject  jasonObject = JSONObject.parseObject(b);		Map<String,Object> map = (Map<String,Object>)jasonObject;			return map;	}		@Override	public Map<String, Object> xcxGoods(HttpServletRequest request,			HttpServletResponse response) {		//返回结果值；		Map<String, Object> map = new HashMap<>();		try {			//获取参数；			String basePath = request.getServletContext().getAttribute("RESOURCE_LOCAL_URL").toString();			String goodsOrder = request.getParameter("goodsId");//这里的goodsId并不是id，而是goodsOrder，是商城前缀和商品id拼接成的字符串；			String userId = request.getParameter("userId");									 Map<String,Object> goodsData = getGoodsDataWirhComment(goodsOrder, userId, basePath,null,null); //新版本			if (goodsData != null) {				map.put("data", goodsData);				map.put("status", 0x01);				map.put("message", "请求成功");							} else {				map.put("data", "");				map.put("status", -0x01);				map.put("message", "没有请求到数据");							}		} catch (Exception e) {			// TODO Auto-generated catch block			e.printStackTrace();			map.put("status", -0x01);			map.put("message", "请求出错");		}								return map;		}				}