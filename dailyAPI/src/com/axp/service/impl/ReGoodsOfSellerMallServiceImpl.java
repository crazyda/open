package com.axp.service.impl;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import com.alibaba.fastjson.JSONArray;import com.axp.dao.DateBaseDAO;import com.axp.domain.ReBaseGoods;import com.axp.domain.ReGoodsOfSellerMall;import com.axp.domain.ReGoodsOfTeamMall;import com.axp.domain.Seller;import com.axp.service.IReGoodsOfSellerMallService;import com.axp.util.CalcUtil;import com.axp.util.Parameter;import com.axp.util.ParameterUtil;import com.axp.util.QueryModel;import com.axp.util.StringUtil;import com.fasterxml.jackson.annotation.JsonIdentityInfo;@Servicepublic class ReGoodsOfSellerMallServiceImpl extends BaseServiceImpl<ReGoodsOfSellerMall> implements IReGoodsOfSellerMallService {		@Autowired	public DateBaseDAO dateBaseDao;			@Override	public Map<String,Object> getHotSellerGoods(HttpServletRequest request) {			Parameter parameter = ParameterUtil.getParameter(request);		String basePath = request.getServletContext().getAttribute("RESOURCE_LOCAL_URL").toString();				Integer pageIndex = 0;		Integer page = 3;		if(parameter.getData() != null){			pageIndex = parameter.getData().getInteger("pageIndex");			page = parameter.getData().getInteger("page");					}		Map<String, Object> statusMap = new HashMap<>();		Map<String, Object> dataMap = new HashMap<>();		List<Map<String,Object>> dataList = new ArrayList<Map<String,Object>>();		Integer count = 0 ;						QueryModel model = new QueryModel();		model.combPreEquals("isValid", true);		model.combCondition("addedTime < now()");		model.combCondition("shelvesTime > now()");		model.setOrder("createTime DESC");				int start = (pageIndex - 1) * page;		count = dateBaseDAO.findCount(ReGoodsOfSellerMall.class, model);				List<ReGoodsOfSellerMall> hotSellerGoods = dateBaseDao.findPageList(ReGoodsOfSellerMall.class, model, start, page);				for( ReGoodsOfSellerMall r : hotSellerGoods){			Map<String, Object> goodMap = new HashMap<>();						//为多图添加前序			String covers = r.getSnapshotGoods().getCoverPic();			if(StringUtil.hasLength(covers)&&covers.startsWith("[")){				JSONArray array = JSONArray.parseArray(covers);				if(array.size()>0){					covers = basePath+array.getJSONObject(0).getString("imgUrl");				}			}else{				covers="";			}						Integer repertory=0;			Integer salesVolume =0;						if(r.getReGoodsOfSellerMall()!=null){				if(r.getReGoodsOfSellerMall().getDefaultRepertory()!=null){					repertory =r.getReGoodsOfSellerMall().getDefaultRepertory();				}				if(r.getReGoodsOfSellerMall().getSalesVolume()!=null){					salesVolume = r.getReGoodsOfSellerMall().getSalesVolume();				}			}else{				repertory = r.getDefaultRepertory()==null?0:r.getDefaultRepertory();//库存				salesVolume =  r.getSalesVolume()==null?0:r.getSalesVolume();//销量			}						Double salesRatio = 0d;			if(repertory>0){				salesRatio = CalcUtil.div(salesVolume, (repertory+salesVolume), 2);			}			if(repertory==0){				salesRatio=1d;			}						Integer stockNumber=0;						//商品类别			String type = "";			String getType = r.getSnapshotGoods().getType();			if(!getType.startsWith("[")){				getType = "["+getType+"]";			}			JSONArray typeList = JSONArray.parseArray(getType);			for(int i=0;i<typeList.size();i++){				type =  ((Map<String,Object>)typeList.get(i)).get("parentTypeName").toString();			}						goodMap.put("goodType", type);			goodMap.put("salesRatio",salesRatio*100);			//库存			goodMap.put("stockNumber",stockNumber);			//商品快照的id值			goodMap.put("snapshotGoodsId", r.getSnapshotGoods().getId());			//对应的基础商品的商品编号；			goodMap.put("sign", r.getSnapshotGoods().getSign());			//商品名称			goodMap.put("name", r.getSnapshotGoods().getName());			goodMap.put("expressTactics", r.getTransportationName());			//商品的封面图片			goodMap.put("coverPic", covers);			//商品对应的商家id值			Seller seller = r.getSnapshotGoods().getSeller();			seller.setBasePath(basePath);			goodMap.put("seller", seller);			//商品显示价格，即原价；			goodMap.put("costPrice", r.getDisplayPrice());			//商品售价（这个售价是所有规格中价格最小的那个售价）			goodMap.put("price", r.getPrice());			goodMap.put("score", r.getScore());			goodMap.put("cashpoint", r.getRedPaper());			goodMap.put("expressTactics", r.getTransportationName());			goodMap.put("salesVolume", r.getSalesVolume());			if(r.getPrice()!=0&&r.getDisplayPrice()!=0){				double b = CalcUtil.div(r.getPrice(), r.getDisplayPrice(),2);				goodMap.put("discount",CalcUtil.mul(b, 10, 2) + "折");// 商品折扣			}			goodMap.put("goodsId", r.getGoodsOrder());						dataList.add(goodMap);		}								dataMap.put("hotSellerGoodsList", dataList);		statusMap.put("count", count);		statusMap.put("data", dataMap);		return statusMap;	}	}