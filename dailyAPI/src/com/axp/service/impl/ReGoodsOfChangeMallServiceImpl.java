package com.axp.service.impl;import java.sql.Timestamp;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.commons.lang.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import com.alibaba.fastjson.JSONArray;import com.axp.domain.CommodityType;import com.axp.domain.ReBaseGoods;import com.axp.domain.ReGoodsOfBase;import com.axp.domain.ReGoodsOfChangeMall;import com.axp.domain.ReGoodsOfScoreMall;import com.axp.domain.ReGoodsOfSellerMall;import com.axp.domain.ReGoodsOfTeamMall;import com.axp.domain.Slides;import com.axp.service.IReGoodsOfBaseService;import com.axp.service.IReGoodsOfChangeMallService;import com.axp.service.IReGoodsOfScoreMallService;import com.axp.util.DateUtil;import com.axp.util.JsonResponseUtil;import com.axp.util.Parameter;import com.axp.util.ParameterUtil;import com.axp.util.QueryModel;import com.axp.util.StringUtil;@Servicepublic class ReGoodsOfChangeMallServiceImpl extends BaseServiceImpl<ReGoodsOfChangeMall> implements IReGoodsOfChangeMallService {		@Autowired	IReGoodsOfBaseService reGoodsOfBaseService;	public String PATH="http://jifen.aixiaoping.cn:8080/dailyRes/";	public ReGoodsOfChangeMall buildChangeMall(ReGoodsOfSellerMall reGoodsOfSellerMall,			ReGoodsOfChangeMall changeMall,com.alibaba.fastjson.JSONArray standardArray,			String goodsOrder,String want,Integer stock,Integer adminUserId,String changeDesc){		//Integer goodsId=Integer.parseInt(goodsOrder.substring(3,goodsOrder.length()));		//reGoodsOfSellerMall = reGoodsOfSellerMallDao.findById(goodsId);		changeMall.setCreateTime(new Timestamp(System.currentTimeMillis()));		changeMall.setBaseGoodsId(reGoodsOfSellerMall.getBaseGoodsId());		changeMall.setTransportationPrice(0d);		changeMall.setDisplayPrice(reGoodsOfSellerMall.getDisplayPrice());		changeMall.setPrice(reGoodsOfSellerMall.getPrice());		changeMall.setScore(0);		changeMall.setIsValid(true);		changeMall.setSnapshotGoods(reGoodsOfSellerMall.getSnapshotGoods());		changeMall.setPageView(0);		changeMall.setAddedTime(new java.sql.Timestamp(System.currentTimeMillis()));		changeMall.setShelvesTime(new Timestamp(DateUtil.addDay2Date(180,new Date()).getTime()));		changeMall.setIsChecked(false);		changeMall.setIsNoStandard(reGoodsOfSellerMall.getIsNoStandard());		changeMall.setNoStandardRepertory(stock);		changeMall.setNoStandardPrice(reGoodsOfSellerMall.getNoStandardPrice());		changeMall.setWant(want);		changeMall.setReGoodsOfSellerMall(reGoodsOfSellerMall);		changeMall.setTransportationType(ReBaseGoods.shuang_fang_xie_shang);		changeMall.setChangeDesc(changeDesc); 		if(changeMall.getReGoodsOfSellerMall().getIsNoStandard()){			changeMall.setNoStandardRepertory(stock);		}else{			reGoodsOfBaseService.setStandardDetails(standardArray, adminUserId, changeMall);		}						return changeMall;	}	@Override	public Map<String, Object> getChangeMallList(HttpServletRequest request, HttpServletResponse response) {		String xcx = request.getParameter("xcx");		Map<String, Object> statusMap = new HashMap<String, Object>();		Map<String, Object> dataMap = new HashMap<String, Object>();		Integer pageIndex = 0;		String typeId = "";		String search = "";		if(xcx != null){			pageIndex = Integer.valueOf(request.getParameter("pageIndex"));			typeId = request.getParameter("typeId");			search = request.getParameter("search");					}else{			Parameter parameter = ParameterUtil.getParameter(request);			pageIndex = parameter.getData().getInteger("pageIndex");			typeId = parameter.getData().getString("typeId");			search = parameter.getData().getString("search");		}			try {			QueryModel queryModel = new QueryModel();			queryModel.combPreEquals("isValid", true);			queryModel.combPreEquals("isChecked", true);			queryModel.combCondition("shelvesTime >= sysdate()");			queryModel.combCondition("addedTime <= sysdate()");			if(pageIndex<=1){				List<Map<String,Object>> classifications = getTypes();				dataMap.put("classifications", classifications);							}						String parentTypeId = "";			String childTypeId ="";			if (Integer.parseInt(typeId)!=0 && StringUtils.isNotBlank(typeId)) {				CommodityType commodityType = commodityTypeDao.findById(Integer.parseInt(typeId));				if (commodityType!=null && commodityType.getName().equals("全部")) {					parentTypeId = "\"parentTypeId\""+":\""+commodityType.getCommodityType().getId()+"\"";				}else{					parentTypeId = "\":"+typeId+",\"";					childTypeId = "\":"+typeId+",\"";				}								queryModel.combCondition("( snapshotGoods.type like '%"+parentTypeId+"%' and snapshotGoods.type like '%"+childTypeId+"%')");			}						if (StringUtils.isNotBlank(search)) {				queryModel.combCondition("(snapshotGoods.name like '%" + search + "%')");			}			List<Map<String, Object>> dataList = new ArrayList<>();			int totalPage = 0;			List<ReGoodsOfScoreMall> rechangelist = new ArrayList<ReGoodsOfScoreMall>();			int page = 4;			int count = 0;			int changeCount= 0;			int start=(pageIndex - 1) * page;			count = dateBaseDAO.findCount(ReGoodsOfScoreMall.class, queryModel);			changeCount = dateBaseDAO.findCount(ReGoodsOfScoreMall.class, queryModel);			rechangelist = dateBaseDAO.findPageList(ReGoodsOfScoreMall.class, queryModel, start, page);						if (rechangelist!=null && rechangelist.size()>0) {				for (ReGoodsOfScoreMall scoreMall : rechangelist) {					String cover = scoreMall.getSnapshotGoods().getCoverPic();					if (StringUtil.hasLength(cover)&&cover.startsWith("[")) {						JSONArray array = JSONArray.parseArray(cover);						if(array.size()>0){							cover = array.getJSONObject(0).getString("imgUrl");						}else{							cover="";						}					}										Map<String, Object> goodMap = new HashMap<>();					goodMap.put("name", scoreMall.getSnapshotGoods().getName());					goodMap.put("price", scoreMall.getPrice());					goodMap.put("coverPic",PATH + cover);					goodMap.put("goodsId", scoreMall.getId());					goodMap.put("goodsOrder",scoreMall.getGoodsOrder());					goodMap.put("score", scoreMall.getScore());																				dataList.add(goodMap);				}							}			if(changeCount>0){ 				count=changeCount;			}			 totalPage = (count % page) > 0 ? ((count / page) + 1) : (count / page);			 						 dataMap.put("homeTopImages", getNewHeadBanner(Slides.CHANGE));			 dataMap.put("changeList", dataList);			dataMap.put("pageSize", totalPage);						dataMap.put("pageIndex", pageIndex);			dataMap.put("pageItemCount", pageItemCount);			statusMap.put("data", dataMap);			statusMap.put("status", 0x01);			statusMap.put("message", "请求成功");		} catch (NumberFormatException e) {			e.printStackTrace();		}		return statusMap;	}				public List<Map<String, Object>> getTypes(){		List<Map<String, Object>> list = new ArrayList<Map<String,Object>>(154);		List<CommodityType> ctlist =null;		CommodityType type = null;		Map<String,Object> lv1map =null;		QueryModel model = new QueryModel();		model.combPreEquals("isValid", true);		model.combPreEquals("level", 1);		ctlist = dateBaseDAO.findLists(CommodityType.class, model);		for (int i = 0; i < ctlist.size(); i++) {			lv1map = new HashMap<String, Object>();			type = ctlist.get(i);			if (!type.getName().equals("全部")) {				lv1map.put("typeId", type.getId().toString());				lv1map.put("typeName", type.getName());				list.add(lv1map);			}		}		return list;	}		public List<Map<String, Object>> getNewHeadBanner(Integer type){		List<Slides> list = slidesDao.getsListByZb(type);		List<Map<String, Object>> dataList = new ArrayList<Map<String,Object>>();		int i = 0;		for (Slides slides : list) {			if (i < 7) {				Map<String, Object> map = new HashMap<String, Object>();				map.put("image", slides.getImgurls() == null ? ""						: PATH + slides.getImgurls());				map.put("uri", slides.getLinkurl());				map.put("name", slides.getName());				dataList.add(map);				i++;			}		}		return dataList;	}	@Override	public Map<String, Object> getChangeKeyWord(HttpServletRequest request, HttpServletResponse response) {		Map<String, Object> statusMap = new HashMap<String, Object>();		Map<String, Object> data = new HashMap<String, Object>();		List<String> list=new ArrayList<>(15);		list.add("剃须刀"); list.add("Ｔ恤衫"); list.add("手表"); list.add("手机");		list.add("香港脚"); list.add("指甲钳"); list.add("西瓜刀"); list.add("菜刀");		list.add("口红"); list.add("益达100g"); list.add("宝刀不老"); list.add("光明顶");		list.add("小明"); list.add("绿帽子(爆款)"); list.add("西瓜太郎专属头盔"); 				 data.put("dataList", list);	 	 statusMap.put("data", data);	 	 statusMap.put("status", 1);	 	 statusMap.put("message", "请求成功");	 	 	 	 return statusMap;	}			}